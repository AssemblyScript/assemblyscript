{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","basicClasses","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","registerBasicClass","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","typeKind","className","classElement","globalName","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","superType","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","i64_is_u32","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","compileInstantiate","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_bool","explicitLocal","functionTarget","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","dest","copy","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 19,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 20,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 21,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 22,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 26,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 27,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 28,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 29\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.PARENTHESIZED: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType; keyType.parent = elem;\r\n    elem.valueType = valueType; valueType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low,\r\n  getGetGlobalName\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  basicClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'ArrayBuffer'\r\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\r\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerBasicClass(TypeKind.I8, \"I8\");\r\n    this.registerBasicClass(TypeKind.I16, \"I16\");\r\n    this.registerBasicClass(TypeKind.I32, \"I32\");\r\n    this.registerBasicClass(TypeKind.I64, \"I64\");\r\n    this.registerBasicClass(TypeKind.ISIZE, \"Isize\");\r\n    this.registerBasicClass(TypeKind.U8, \"U8\");\r\n    this.registerBasicClass(TypeKind.U16, \"U16\");\r\n    this.registerBasicClass(TypeKind.U32, \"U32\");\r\n    this.registerBasicClass(TypeKind.U64, \"U64\");\r\n    this.registerBasicClass(TypeKind.USIZE, \"Usize\");\r\n    this.registerBasicClass(TypeKind.BOOL, \"Bool\");\r\n    this.registerBasicClass(TypeKind.F32, \"F32\");\r\n    this.registerBasicClass(TypeKind.F64, \"F64\");\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  private registerBasicClass(typeKind: TypeKind, className: string): void {\r\n    if (this.elementsLookup.has(className)) {\r\n      let element = assert(this.elementsLookup.get(className));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.basicClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantIntegerValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantFloatValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances by class type arguments and function type arguments. */\r\n  instances: Map<string,Map<string,Function>> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Applies class type arguments to the context of a partially resolved instance method. */\r\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\r\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\r\n    var classDeclaration = assert(this.classPrototype).declaration;\r\n    var classTypeParameters = classDeclaration.typeParameters;\r\n    var numClassTypeParameters = classTypeParameters.length;\r\n    assert(numClassTypeParameters == classTypeArguments.length);\r\n    for (let i = 0; i < numClassTypeParameters; ++i) {\r\n      contextualTypeArguments.set(\r\n        classTypeParameters[i].name.text,\r\n        classTypeArguments[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport const enum NativeType {\r\n  None = 0,        // _BinaryenTypeNone(),\r\n  I32  = 1,        // _BinaryenTypeInt32(),\r\n  I64  = 2,        // _BinaryenTypeInt64(),\r\n  F32  = 3,        // _BinaryenTypeFloat32(),\r\n  F64  = 4,        // _BinaryenTypeFloat64(),\r\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\r\n  Auto = -1        // _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n  // SIMDExtract = _BinaryenSIMDExtractId(),\r\n  // SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  // SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  // SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  // SIMDShift = _BinaryenSIMDShiftId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\n// export enum SIMDOp {\r\n//   SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n//   SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n//   SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n//   SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n//   SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n//   SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n//   NotVec128 = _BinaryenNotVec128(),\r\n//   NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n//   AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n//   AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n//   NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n//   AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n//   AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n//   NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n//   AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n//   AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n//   NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n//   AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n//   AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n//   AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n//   NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n//   SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n//   AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n//   NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n//   SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n//   TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n//   TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n//   TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n//   TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n//   ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n//   ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n//   ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n//   ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n//   EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n//   NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n//   LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n//   LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n//   LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n//   LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n//   GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n//   GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n//   GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n//   GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n//   EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n//   NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n//   LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n//   LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n//   LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n//   LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n//   GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n//   GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n//   GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n//   GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n//   EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n//   NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n//   LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n//   LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n//   LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n//   LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n//   GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n//   GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n//   GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n//   GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n//   EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n//   NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n//   LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n//   LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n//   GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n//   GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n//   EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n//   NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n//   LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n//   LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n//   GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n//   GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n//   AndVec128 = _BinaryenAndVec128(),\r\n//   OrVec128 = _BinaryenOrVec128(),\r\n//   XorVec128 = _BinaryenXorVec128(),\r\n//   AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n//   AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n//   AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n//   SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n//   SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n//   SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n//   MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n//   AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n//   AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n//   AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n//   SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n//   SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n//   SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n//   MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n//   AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n//   SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n//   MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n//   AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n//   SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n//   AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n//   SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n//   MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n//   DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n//   MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n//   MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n//   AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n//   SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n//   MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n//   DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n//   MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n//   MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n// }\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = memory.allocate(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveGlobal(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0; // for free'ing\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    memory.free(this.cachedByValue);\r\n    memory.free(this.cachedTemporaryName);\r\n    memory.free(this.cachedPrecomputeName);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current outer function in compilation, if compiling a function expression. */\r\n  currentOuterFunction: Function | null = null;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(\"HEAP_BASE\");\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if resolved lazily\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      null,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) {\r\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n          stmts.unshift(\r\n            module.createIf(\r\n              module.createUnary(\r\n                UnaryOp.EqzI32,\r\n                module.createGetGlobal(\"~started\", NativeType.I32)\r\n              ),\r\n              module.createBlock(null, [\r\n                module.createCall(\"start\", null, NativeType.None),\r\n                module.createSetGlobal(\"~started\", module.createI32(1))\r\n              ])\r\n            )\r\n          );\r\n        }\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n      // concrete functions cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration); // TODO: check for duplicates\r\n\r\n      // create the function import\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.resolver.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var currentFunction = this.currentFunction;\r\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY: {\r\n        indexArg = this.compileGetter(<Property>target, expression.expression);\r\n        let type = this.currentType;\r\n        signature = type.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let classType = thisType.classReference;\r\n      let superType = classType\r\n        ? classType.base\r\n          ? classType.base.type\r\n          : null\r\n        : null;\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) { // reuse this var\r\n        flow.addScopedLocalAlias(getGetLocalIndex(thisArg), thisType, \"this\");\r\n        if (superType) flow.addScopedLocalAlias(getGetLocalIndex(thisArg), superType, \"super\");\r\n      } else { // use a temp var\r\n        let thisLocal = flow.addScopedLocal(thisType, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n        if (superType) flow.addScopedLocalAlias(thisLocal.index, superType, \"super\");\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return flow.is(FlowFlags.RETURNS)\r\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\r\n      : body.length > 1\r\n        ? module.createBlock(null, body, returnType.toNativeType())\r\n        : body.length\r\n          ? body[0]\r\n          : module.createNop();\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction, contextualType); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      makeMap<string,Type>(flow.contextualTypeArguments),\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = assert(currentFunction.signature.thisType);\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentEnum || currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expr = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(compiledValues[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var currentFunction = this.currentFunction;\r\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      compileAllocate(this, classReference, expression)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    // traverse to the top-most visible constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance: Function | null = null;\r\n    do {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n      if (constructorInstance) break; // TODO: check visibility\r\n    } while (currentClassInstance = currentClassInstance.base);\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    var expr: ExpressionRef;\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, argumentExpressions, reportNode,\r\n        this.options.usizeType.toNativeZero(this.module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      if (argumentExpressions.length) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", argumentExpressions.length.toString(10)\r\n        );\r\n      }\r\n      expr = this.makeAllocate(classInstance, reportNode);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: {// instance property (here: getter)\r\n        return this.compileGetter(<Property>target, propertyAccess);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(instance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = currentFunction.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = declaration.programLevelInternalName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              makeMap<string,Type>(contextualTypeArguments),\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var typeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let numTypeArguments = typeArgumentNodes.length;\r\n      typeArguments = new Array<Type>(numTypeArguments);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!paramType) return null;\r\n        typeArguments[i] = paramType;\r\n      }\r\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(typeArguments);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // check built-in macro types\r\n    if (simpleName == \"NATIVE\") {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: return Type.i32;\r\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: return Type.u32;\r\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: return Type.void;\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range.atEnd,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // search locals, use prototype\r\n          element = (<Function>context).flow.getScopedLocal(name);\r\n          if (element) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var resolveType = assert(global.declaration).type;\r\n    if (!resolveType) return false;\r\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\r\n    if (!resolvedType) return false;\r\n    global.type = resolvedType;\r\n    global.set(CommonFlags.RESOLVED);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let basicClasses = this.program.basicClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && basicClasses.has(type.kind)) {\r\n            classReference = assert(basicClasses.get(type.kind));\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  determineIntegerLiteralType(\r\n    intValue: I64,\r\n    contextualType: Type\r\n  ): Type {\r\n\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function,\r\n    contextualType: Type = Type.void,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType(\r\n          (<AssertionExpression>expression).toType,\r\n          contextualFunction.flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!type) return null;\r\n        let classType = type.classReference;\r\n        if (!classType) return null;\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return classType;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPrefixExpression>expression).operator) {\r\n          case Token.MINUS: {\r\n            let operand = (<UnaryPrefixExpression>expression).operand;\r\n            // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n            if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n              let type = this.determineIntegerLiteralType(\r\n                i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n                contextualType\r\n              );\r\n              return assert(this.program.basicClasses.get(type.kind));\r\n            }\r\n            return this.resolveExpression(\r\n              operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.PLUS:\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.EXCLAMATION: {\r\n            return assert(this.program.basicClasses.get(TypeKind.BOOL));\r\n          }\r\n          case Token.TILDE: {\r\n            let resolvedOperand = this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n            if (!resolvedOperand) return null;\r\n            throw new Error(\"not implemented\"); // TODO: should all elements have a corresponding type right away?\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPostfixExpression>expression).operator) {\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPostfixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        // TODO: all sorts of unary and binary expressions, which means looking up overloads and\r\n        // evaluating their return types, knowing the semantics of different operators etc.\r\n        // should probably share that code with the compiler somehow, as it also does exactly this.\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.INTEGER: {\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                this.determineIntegerLiteralType(\r\n                  (<IntegerLiteralExpression>expression).value,\r\n                  contextualType\r\n                ).kind\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.FLOAT: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                contextualType == Type.f32\r\n                  ? TypeKind.F32\r\n                  : TypeKind.F64\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            makeMap<string,Type>(contextualFunction.flow.contextualTypeArguments),\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this.program, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\r\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var classInstances = prototype.instances.get(classInstanceKey);\r\n    if (classInstances) {\r\n      let instance = classInstances.get(instanceKey);\r\n      if (instance) return instance;\r\n    }\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // apply class type arguments if a partially resolved instance method\r\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      let explicitThisType = signatureNode.explicitThisType;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n        if (!thisType) return null;\r\n      } else {\r\n        thisType = classInstance.type;\r\n      }\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    } else {\r\n      if (signatureNode.explicitThisType) {\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          signatureNode.explicitThisType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\r\n    classInstances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    partialPrototype.instances = prototype.instances;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // apply class type arguments if a partially resolved instance method\r\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\r\n      // required there for just resolving a function no matter if a partial or not.\r\n      let classTypeArguments = prototype.classTypeArguments;\r\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    var constructorPrototype = prototype.constructorPrototype;\r\n    if (constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(\r\n        constructorPartial,\r\n        null,\r\n        makeMap<string,Type>(),\r\n        reportMode\r\n      );\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(\r\n          operatorPartial,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instances of element.instances.values()) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable,\r\n  IndexSignatureDeclaration\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          // TODO: this works for now, but the representation isn't great\r\n          identifier = Node.createIdentifierExpression(\r\n            identifier.text + \".\" + tn.readIdentifier(),\r\n            tn.range(identifier.range.start, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFunction,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let currentFunction = compiler.currentFunction;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = currentFunction.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          ret = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          currentFunction.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let currentFunction = compiler.currentFunction;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = currentFunction.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          currentFunction.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let currentFunction = compiler.currentFunction;\r\n\r\n          let tempLocal1 = currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          ret = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          currentFunction.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case \"instantiate\": {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  // __gc_allocate(size, markFn)\r\n  if (program.hasGC && classInstance.type.isManaged(program)) {\r\n    let allocateInstance = assert(program.gcAllocateInstance);\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset),\r\n        module.createI32(\r\n          ensureGCHook(compiler, classInstance)\r\n        )\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n\r\n  // memory.allocate(size)\r\n  } else {\r\n    let allocateInstance = program.memoryAllocateInstance;\r\n    if (!allocateInstance) {\r\n      program.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        reportNode.range, \"memory.allocate\"\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset)\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n  }\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\r\n  if (original) {\r\n    let cloned = new Map<K,V>();\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    return cloned;\r\n  }\r\n  return new Map<K,V>();\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}