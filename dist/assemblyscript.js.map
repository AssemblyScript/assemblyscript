{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","NamedTypeNode","parameters","explicitThisType","FunctionTypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","isSimpleType","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","Cannot_find_name_0","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAKAA,IAAA,2BAxEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA4EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SACT9B,EAAA+B,QAAU,UACV/B,EAAAgC,QAAU,UAEVhC,EAAAiC,MAAQ,OACRjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QAETnC,EAAAoC,MAAQ,OACRpC,EAAAqC,OAAS,QACTrC,EAAAsC,YAAc,cAEdtC,EAAAuC,WAAa,aACbvC,EAAAwC,mBAAqB,qBACrBxC,EAAAyC,cAAgB,gBAChBzC,EAAA0C,gBAAkB,kBAClB1C,EAAA2C,mBAAqB,qBACrB3C,EAAA4C,iBAAmB,mBACnB5C,EAAA6C,2BAA6B,6BAC7B7C,EAAA8C,2BAA6B,6BAC7B9C,EAAA+C,wBAA0B,0BAC1B/C,EAAAgD,iBAAmB,mBACnBhD,EAAAiD,oBAAsB,sBAEtBjD,EAAAkD,GAAK,KACLlD,EAAAmD,IAAM,MACNnD,EAAAoD,IAAM,MACNpD,EAAAqD,IAAM,MACNrD,EAAAsD,MAAQ,QACRtD,EAAAuD,GAAK,KACLvD,EAAAwD,IAAM,MACNxD,EAAAyD,IAAM,MACNzD,EAAA0D,IAAM,MACN1D,EAAA2D,MAAQ,QACR3D,EAAA4D,KAAO,OACP5D,EAAA6D,IAAM,MACN7D,EAAA8D,IAAM,MACN9D,EAAA+D,KAAO,OACP/D,EAAAgE,OAAS,SACThE,EAAAiE,MAAQ,QACRjE,EAAAkE,WAAa,aACblE,EAAAmE,IAAM,MACNnE,EAAAoE,IAAM,MACNpE,EAAAqE,gBAAkB,kBAClBrE,EAAAsE,YAAc,cACdtE,EAAAuE,KAAO,OACPvE,EAAAwE,MAAQ,QACRxE,EAAAyE,UAAY,YACZzE,EAAA0E,WAAa,aACb1E,EAAA2E,WAAa,aACb3E,EAAA4E,WAAa,aACb5E,EAAA6E,WAAa,aACb7E,EAAA8E,kBAAoB,oBACpB9E,EAAA+E,YAAc,cACd/E,EAAAgF,YAAc,cACdhF,EAAAiF,YAAc,cACdjF,EAAAkF,aAAe,eACflF,EAAAmF,aAAe,eAEfnF,EAAAoF,MAAQ,QACRpF,EAAAqF,IAAM,MACNrF,EAAAsF,IAAM,MACNtF,EAAAuF,MAAQ,UACRvF,EAAAwF,QAAU,YACVxF,EAAAyF,KAAO,SACPzF,EAAA0F,OAAS,WACT1F,EAAA2F,QAAU,YACV3F,EAAA4F,QAAU,YACV5F,EAAA6F,SAAW,aACX7F,EAAA8F,YAAc,eACd9F,EAAA+F,MAAQ,UACR/F,EAAAgG,WAAa,eAvG5B,CAAiBtJ,EAAAsD,gBAAAtD,EAAAsD,cAAa,KA2G9B,IAAAiG,EAAA9I,EAAA,IAAST,EAAAwJ,QAAAD,EAAAC,QACT,IAAAC,EAAAhJ,EAAA,IAAST,EAAA0J,OAAAD,EAAAC,OACT,IAAAC,EAAAlJ,EAAA,IAAST,EAAA4J,SAAAD,EAAAC,SAAU5J,EAAA6J,cAAAF,EAAAE,2JC9MnBC,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KAGAT,EAAA+J,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAAzJ,EAAA,IAKA0J,EAAA1J,EAAA,GAIA2J,EAAA3J,EAAA,IAgBA,SAAgB4J,EAA2BC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAgBC,EAA0BL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAOvK,EAAA4K,WACrC,KAAKX,EAAmBO,QAAS,OAAOxK,EAAA6K,aACxC,KAAKZ,EAAmBQ,MAAO,OAAOzK,EAAA8K,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CX1K,EAAA+K,eAAAX,EAAAW,eACA/K,EAAAgL,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAjK,EAAAiK,qBAAAjK,EAAAiK,mBAAkB,KAU9BjK,EAAAqK,6BAaarK,EAAA4K,WAAqB,QAErB5K,EAAA6K,aAAuB,QAEvB7K,EAAA8K,UAAoB,QAEpB9K,EAAAiL,YAAsB,OAGnCjL,EAAA2K,4BAaA,IAAAO,EAAA,WAcE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAL7D9K,KAAA+K,MAAsB,KAEtB/K,KAAAgL,aAA6B,KAI3BhL,KAAK6K,KAAOA,EACZ7K,KAAKgK,SAAWA,EAChBhK,KAAK8K,QAAUA,EAkFnB,OA9ESF,EAAAjJ,OAAP,SACEkJ,EACAb,EACAiB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARI,IAAcH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,MAARC,IAAcJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,MAARC,IAAcL,EAAUA,EAAQM,QAAQ,MAAOD,IAC5C,IAAIP,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAS,WAAP,SACER,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBM,KAAMgB,EAAMC,IAIhEN,EAAAU,cAAP,SACET,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBO,QAASe,EAAMC,IAInEN,EAAAW,YAAP,SACEV,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBQ,MAAOc,EAAMC,IAIxEN,EAAA3I,UAAAuJ,UAAA,SAAUT,GAER,OADA/K,KAAK+K,MAAQA,EACN/K,MAIT4K,EAAA3I,UAAAwJ,iBAAA,SAAiBV,GAEf,OADA/K,KAAKgL,aAAeD,EACb/K,MAIT4K,EAAA3I,UAAAyJ,SAAA,WACE,OAAI1L,KAAK+K,MAELhB,EAA2B/J,KAAKgK,UAChC,IACAhK,KAAK6K,KAAKa,SAAS,IACnB,MACA1L,KAAK8K,QACL,QACA9K,KAAK+K,MAAMY,OAAOC,eAClB,IACA5L,KAAK+K,MAAMc,KAAKH,SAAS,IACzB,IACA1L,KAAK+K,MAAMe,OAAOJ,SAAS,IAI7B3B,EAA2B/J,KAAKgK,UAChC,IACAhK,KAAK6K,KAAKa,SAAS,IACnB,KACA1L,KAAK8K,SAGXF,EAnGA,GA4JA,SAAgBmB,EAAwBhB,EAAciB,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOlB,EAAMY,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQrB,EAAMqB,MACdC,EAAMtB,EAAMsB,IACTD,EAAQ,IAAMvC,EAAAyC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQrC,EAAAyC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,EAAe,CACjB,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQrB,EAAMqB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAKhN,EAAA8K,WACnBO,EAAMqB,OAASrB,EAAMsB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUrB,EAAMsB,KAAK,CAC1B,GAAIxC,EAAAyC,YAAYL,EAAKM,WAAWH,IAAS,CACvCI,EAAGE,KAAKN,GAASrB,EAAMqB,MAAQ,EAAI,IAAM,KACzC,MAEFI,EAAGE,KAAK,KAIZ,OADIV,GAAWQ,EAAGE,KAAKhN,EAAAiL,aAChB6B,EAAGG,KAAK,IAzLJjN,EAAAkL,oBAsGblL,EAAAkN,wBAAA,SACE9B,EACAkB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,EAAe,GAUnB,GATIR,GAAWQ,EAAGE,KAAKrC,EAA0BS,EAAQd,WACzDwC,EAAGE,KAAK3C,EAA2Be,EAAQd,WACvCgC,GAAWQ,EAAGE,KAAKhN,EAAAiL,aACvB6B,EAAGE,KAAK5B,EAAQD,KAAO,IAAO,MAAQ,OACtC2B,EAAGE,KAAK5B,EAAQD,KAAKa,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK5B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB8B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBhB,EAAOiB,KAEzCQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAER,IAAI1B,EAAeF,EAAQE,aACvBA,IACE6B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAcgB,KAEhDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjBjN,EAAAqM,0BAiCA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpB/M,KAAK+M,YAAcA,GAAiD,IAAI9F,MAwF5E,OApFE6F,EAAA7K,UAAA+K,eAAA,SACEnC,EACAb,EACAe,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUF,EAAkBjJ,OAAOkJ,EAAMb,EAAUiB,EAAMC,EAAMC,GAAMK,UAAUT,GAC/EC,IAAcF,EAAQE,aAAeA,GACzChL,KAAK+M,YAAYL,KAAK5B,IAMxBgC,EAAA7K,UAAAgL,KAAA,SACEpC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAO,KAAME,EAAMC,EAAMC,IAI9E2B,EAAA7K,UAAAiL,YAAA,SACErC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAcC,EAAMC,EAAMC,IAItF2B,EAAA7K,UAAAkL,QAAA,SACEtC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBO,QAASa,EAAO,KAAME,EAAMC,EAAMC,IAIjF2B,EAAA7K,UAAAmL,eAAA,SACEvC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAcC,EAAMC,EAAMC,IAIzF2B,EAAA7K,UAAAoL,MAAA,SACExC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAO,KAAME,EAAMC,EAAMC,IAI/E2B,EAAA7K,UAAAqL,aAAA,SACEzC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAcC,EAAMC,EAAMC,IAEzF2B,EA/FA,GAAsBpN,EAAAoN,85BC9PtB,IA8IYS,EA9IZC,EAAArN,EAAA,GAmBAsN,EAAAtN,EAAA,GAMAuN,EAAAvN,EAAA,GAOAwN,EAAAxN,EAAA,GAiDA0J,EAAA1J,EAAA,GASAyN,EAAAzN,EAAA,GAIA0N,EAAA1N,EAAA,IAKA2N,EAAA,WAaA,OAZE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAnO,KAAA+N,YAEA/N,KAAAgO,kBAEAhO,KAAAiO,oBAEAjO,KAAAkO,cAEAlO,KAAAmO,kBAXX,GAgBAC,EAAA,WAWA,OAVE,SAESJ,EAEAC,EAEAC,EAEAC,GANAnO,KAAAgO,kBAEAhO,KAAAiO,oBAEAjO,KAAAkO,cAEAlO,KAAAmO,kBATX,GAcAE,EAAA,WAUA,OARE,SAESH,EAEAC,EAEAG,GAJAtO,KAAAkO,cAEAlO,KAAAmO,iBAEAnO,KAAAsO,eARX,GA6DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADArE,OAAOqE,EAAItC,QACHqC,GACN,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACjB,OAAQH,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAasB,YACrC,GAAW,OAAPJ,EAAc,OAAOlB,EAAauB,YACtC,MAEF,SACE,GAAW,MAAPL,EAAa,OAAOlB,EAAawB,sBACrC,GAAW,OAAPN,EAAc,OAAOlB,EAAayB,sBACtC,MAEF,QACE,GAAW,KAAPP,EAAY,OAAOlB,EAAa0B,IACpC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOlB,EAAa2B,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOlB,EAAa4B,IACpC,GAAW,MAAPV,EAAa,OAAOlB,EAAa6B,IACrC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOlB,EAAa8B,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOlB,EAAa+B,IACpC,MAEF,QACE,GAAW,KAAPb,EAAY,OAAOlB,EAAagC,YACpC,MAEF,SACE,GAAW,KAAPd,EAAY,OAAOlB,EAAaiC,WACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOlB,EAAakC,YACpC,MAEF,QACE,GAAW,MAAPhB,EAAa,OAAOlB,EAAamC,GACrC,MAEF,QACE,GAAW,MAAPjB,EAAa,OAAOlB,EAAaoC,GACrC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOlB,EAAaqC,GACpC,GAAW,MAAPnB,EAAa,OAAOlB,EAAasC,GACrC,GAAW,MAAPpB,EAAa,OAAOlB,EAAauC,YACrC,GAAW,OAAPrB,EAAc,OAAOlB,EAAawC,cACtC,MAEF,QACE,GAAW,KAAPtB,EAAY,OAAOlB,EAAayC,GACpC,GAAW,MAAPvB,EAAa,OAAOlB,EAAa0C,GACrC,GAAW,MAAPxB,EAAa,OAAOlB,EAAa2C,YAIzC,MAEF,KAAKvC,EAAAe,cAAcyB,gBACjB,OAAQ1B,EAAIlC,WAAW,IACrB,QACE,GAAW,KAAPkC,EAAY,OAAOlB,EAAa6C,KACpC,GAAW,MAAP3B,EAAa,OAAOlB,EAAa8C,WACrC,MAEF,QACE,GAAW,KAAP5B,EAAY,OAAOlB,EAAa+C,MACpC,GAAW,MAAP7B,EAAa,OAAOlB,EAAagD,WACrC,MAEF,QACE,GAAW,KAAP9B,EAAY,OAAOlB,EAAaiD,IACpC,MAEF,SACE,GAAW,KAAP/B,EAAY,OAAOlB,EAAakD,YAIxC,MAEF,KAAK9C,EAAAe,cAAcgC,iBACjB,OAAQjC,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAaoD,YACrC,MAEF,QACE,GAAW,MAAPlC,EAAa,OAAOlB,EAAaqD,aAO7C,OAAOrD,EAAasD,SA9JtB,SAAYtD,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA7N,EAAA6N,eAAA7N,EAAA6N,aAAY,KAkKxB,IAmhDYuD,EAwCAC,EA3jDZC,EAAA,SAAAC,GAkGE,SAAAD,EAEEjE,QAAA,IAAAA,MAAA,MAFF,IAAAmE,EAIED,EAAAzQ,KAAAR,KAAM+M,IAAY/M,KAjGpBkR,EAAAC,QAAoB,GAEpBD,EAAAE,kBAAyB,EAWzBF,EAAAG,YAAgC,IAAIjK,IAEpC8J,EAAAI,eAAsC,IAAIlK,IAE1C8J,EAAAK,sBAAmE,IAAInK,IAEvE8J,EAAAM,gBAAuC,IAAIpK,IAE3C8J,EAAAO,YAAmC,IAAIrK,IAEvC8J,EAAAQ,eAAiC,IAAItK,IAmErC8J,EAAAS,YAAmB,EAoEXT,EAAAU,qBAAgD,KA5DtD,IAAIC,EAAe,IAAIlE,EAAAmE,OAAOtE,EAAA3K,cAAe,gBAAiB8K,EAAAoE,WAAWC,SACzEd,EAAKW,aAAeA,EACpB,IAAII,EAAa,IAAIC,EAAKhB,EAAMW,UAChCX,EAAKe,WAAaA,EAClBf,EAAKG,YAAYc,IAAIF,EAAWG,aAAcH,GAC9Cf,EAAKmB,SAAW,IAAIzE,EAAA0E,SAASpB,KAo6CjC,OAhhD6BqB,EAAAvB,EAAAC,GAgH3BD,EAAA/O,UAAAuQ,mBAAA,SAAmBC,EAAoBC,EAAaC,EAAsBC,GAOxExI,OAAOwI,EAAe,GAAK,IAC3B/I,EAAAgJ,SAASD,EAAaH,EAAQC,GAC9B7I,EAAAgJ,SAAS,EAAGJ,EAAQC,EAAS,GAC7B7I,EAAAgJ,SAASF,EAAcG,GAAIL,EAAQC,EAAS,GAC5C7I,EAAAgJ,SAASD,EAAaH,EAAQC,EAAS,KAIzC3R,OAAAC,eAAIgQ,EAAA/O,UAAA,oBAAiB,KAArB,WACE,OAAO,oCAIT+O,EAAA/O,UAAA8Q,8BAAA,SAEEnS,EAEAoS,QAAA,IAAAA,MAAqBxF,EAAAnL,YAAY4Q,MAEjC,IAAIlI,EAAQ/K,KAAK6R,aAAa9G,MAC9B,OAAO4C,EAAAuF,KAAKC,0BACVxF,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACtC,KAAM,KAAM,KAAMiI,EAAOjI,IAK7BiG,EAAA/O,UAAAoR,0BAAA,SAEEzS,EAEAoS,QAAA,IAAAA,MAAqBxF,EAAAnL,YAAY4Q,MAEjC,IAAIlI,EAAQ/K,KAAK6R,aAAa9G,MAC1BuI,EAAa3F,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACvD,OAAO4C,EAAAuF,KAAKK,sBACVD,EACA,KACA3F,EAAAuF,KAAKM,kBAAkBzI,GACvB,KAAMiI,EAAOjI,IAQjBiG,EAAA/O,UAAAwR,8BAAA,SAEE7S,EAEAoS,QAAA,IAAAA,MAAqBxF,EAAAnL,YAAY4Q,MAEjC,IAAIlI,EAAQ/K,KAAK6R,aAAa9G,MAC9B,OAAO4C,EAAAuF,KAAKQ,0BACV/F,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACtC,KACA/K,KAAK4R,uBAAyB5R,KAAK4R,qBAAuBjE,EAAAuF,KAAKS,mBAAmB,GAChFhG,EAAAuF,KAAKU,gBACHjG,EAAAuF,KAAKW,qBAAqBrG,EAAAxK,cAAc0B,MAAOqG,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAMiI,EAAK,EAAkBjI,IAKvCiG,EAAA/O,UAAA6R,+BAAA,SAEElT,EAEAoS,QAAA,IAAAA,MAAqBxF,EAAAnL,YAAY4Q,MAEjC,IAAIlI,EAAQ/K,KAAK6R,aAAa9G,MAC9B,OAAO4C,EAAAuF,KAAKa,2BACVpG,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACtC,GAAI,KAAMiI,EAAOjI,IAKrBiG,EAAA/O,UAAA+R,mBAAA,SAEEpT,EAEAqT,EAEAC,EAEAlB,EAEAmB,GAEA,YANA,IAAAD,MAAkBlU,KAAKiS,iBAEvB,IAAAe,MAAqBxF,EAAAnL,YAAY4Q,WAEjC,IAAAkB,MAAiCpD,EAAekC,MAEzC,IAAImB,EACTxT,EACA,IAAIyT,EACFzT,EACAsT,EACAlU,KAAKyT,8BAA8B7S,EAAMoS,GACzCmB,GAEFF,IAKJjD,EAAA/O,UAAAqS,wBAAA,SAAwBC,GACtB,IAAIhD,EAAwBvR,KAAKuR,sBAEjC,OADAnH,OAAOmH,EAAsBiD,IAAID,IAC1BhD,EAAsBrQ,IAAIqT,IAInCvD,EAAA/O,UAAAwS,WAAA,SAAWC,+BACT1U,KAAK0U,QAAUA,EAGf1U,KAAK2U,mBAAmBnH,EAAAxK,cAAcE,GAAIwK,EAAAkH,KAAK1R,IAC/ClD,KAAK2U,mBAAmBnH,EAAAxK,cAAcG,IAAKuK,EAAAkH,KAAKzR,KAChDnD,KAAK2U,mBAAmBnH,EAAAxK,cAAcI,IAAKsK,EAAAkH,KAAKxR,KAChDpD,KAAK2U,mBAAmBnH,EAAAxK,cAAcK,IAAKqK,EAAAkH,KAAKvR,KAChDrD,KAAK2U,mBAAmBnH,EAAAxK,cAAcM,MAAOoR,EAAQG,WACrD7U,KAAK2U,mBAAmBnH,EAAAxK,cAAcO,GAAImK,EAAAkH,KAAKrR,IAC/CvD,KAAK2U,mBAAmBnH,EAAAxK,cAAcQ,IAAKkK,EAAAkH,KAAKpR,KAChDxD,KAAK2U,mBAAmBnH,EAAAxK,cAAcS,IAAKiK,EAAAkH,KAAKnR,KAChDzD,KAAK2U,mBAAmBnH,EAAAxK,cAAcU,IAAKgK,EAAAkH,KAAKlR,KAChD1D,KAAK2U,mBAAmBnH,EAAAxK,cAAcW,MAAO+Q,EAAQI,WACrD9U,KAAK2U,mBAAmBnH,EAAAxK,cAAcY,KAAM8J,EAAAkH,KAAKhR,MACjD5D,KAAK2U,mBAAmBnH,EAAAxK,cAAca,IAAK6J,EAAAkH,KAAK/Q,KAChD7D,KAAK2U,mBAAmBnH,EAAAxK,cAAcc,IAAK4J,EAAAkH,KAAK9Q,KAChD9D,KAAK2U,mBAAmBnH,EAAAxK,cAAc0B,MAAOgJ,EAAAkH,KAAKG,MAClD/U,KAAK2U,mBAAmBnH,EAAAxK,cAAc2B,OAAQ+I,EAAAkH,KAAK9Q,KACnD9D,KAAK2U,mBAAmBnH,EAAAxK,cAAc4B,QAAS8I,EAAAkH,KAAKhR,MACpD5D,KAAKiS,WAAW+C,IAAIxH,EAAAxK,cAAc8B,OAAQ,IAAImQ,EAC5CzH,EAAAxK,cAAc8B,OACd9E,KAAKiS,WACLjS,KAAKqT,0BAA0B7F,EAAAxK,cAAc8B,OAAQ0I,EAAAnL,YAAY6S,OAAS1H,EAAAnL,YAAY8S,SACtFpE,EAAeqE,UAEjBpV,KAAKiS,WAAW+C,IAAIxH,EAAAxK,cAAc+B,QAAS,IAAIkQ,EAC7CzH,EAAAxK,cAAc+B,QACd/E,KAAKiS,WACLjS,KAAKqT,0BAA0B7F,EAAAxK,cAAc+B,QAASyI,EAAAnL,YAAY6S,OAAS1H,EAAAnL,YAAY8S,SACvFpE,EAAeqE,UAEjBpV,KAAKiS,WAAW+C,IAAIxH,EAAAxK,cAAcgC,QAAS,IAAIiQ,EAC7CzH,EAAAxK,cAAcgC,QACdhF,KAAKiS,WACLjS,KAAKqT,0BAA0B7F,EAAAxK,cAAcgC,QAASwI,EAAAnL,YAAY6S,OAAS1H,EAAAnL,YAAY8S,SACvFpE,EAAeqE,UAEbV,EAAQW,WAAU,IAAgBrV,KAAK2U,mBAAmBnH,EAAAxK,cAAce,KAAM2J,EAAAkH,KAAK7Q,MAGvF/D,KAAKsV,wBAAwB9H,EAAAxK,cAAcuC,WAAYmI,EAAAkH,KAAKxR,IAC1DmS,QAAQb,EAAQc,SAAWhI,EAAApE,OAAOqM,OAASjI,EAAApE,OAAOsM,SACpD1V,KAAKsV,wBAAwB9H,EAAAxK,cAAcyC,cAAeiI,EAAAkH,KAAKhR,KAC7D2R,QAAQb,EAAQiB,SAAW,EAAI,EAAG,IACpC3V,KAAKsV,wBAAwB9H,EAAAxK,cAAc0C,gBAAiBgI,EAAAkH,KAAKxR,IAC/DmS,QAAQb,EAAQkB,WAAY,IAC9B5V,KAAKsV,wBAAwB9H,EAAAxK,cAAc2C,mBAAoB+H,EAAAkH,KAAKxR,IAClEmS,QAAQb,EAAQmB,kBAAmB,IACrC7V,KAAKsV,wBAAwB9H,EAAAxK,cAAc4C,iBAAkB8H,EAAAkH,KAAKxR,IAChEmS,QAAQb,EAAQoB,gBAAiB,IACnC9V,KAAKsV,wBAAwB9H,EAAAxK,cAAc6C,2BAA4B6H,EAAAkH,KAAKhR,KAC1E2R,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DrV,KAAKsV,wBAAwB9H,EAAAxK,cAAc8C,2BAA4B4H,EAAAkH,KAAKhR,KAC1E2R,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DrV,KAAKsV,wBAAwB9H,EAAAxK,cAAc+C,wBAAyB2H,EAAAkH,KAAKhR,KACvE2R,QAAQb,EAAQW,WAAU,GAAwB,EAAI,EAAG,IAC3DrV,KAAKsV,wBAAwB9H,EAAAxK,cAAcgD,iBAAkB0H,EAAAkH,KAAKhR,KAChE2R,QAAQb,EAAQW,WAAU,GAAiB,EAAI,EAAG,IACpDrV,KAAKsV,wBAAwB9H,EAAAxK,cAAciD,oBAAqByH,EAAAkH,KAAKhR,KACnE2R,QAAQb,EAAQW,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIU,EAAgB,IAAI9O,MACpB+O,EAAgB,IAAI5O,IACpB6O,EAAoB,IAAI7O,IACxB8O,EAAgB,IAAIjP,MACpBkP,EAAmB,IAAIlP,MAGlB5G,EAAI,EAAG+V,EAAIpW,KAAKmR,QAAQhF,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACnD,IAAIsL,EAAS3L,KAAKmR,QAAQ9Q,GACtBgW,EAAO,IAAInE,EAAKlS,KAAM2L,GAC1B3L,KAAKqR,YAAYc,IAAIkE,EAAKjE,aAAciE,GAExC,IADA,IAAIC,EAAa3K,EAAO2K,WACfC,EAAI,EAAGjW,EAAIgW,EAAWnK,OAAQoK,EAAIjW,IAAKiW,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAK9I,EAAA+I,SAASxB,OACZlV,KAAK2W,kBAAmCH,EAAWH,EAAML,EAAeC,GACxE,MAEF,KAAKtI,EAAA+I,SAASE,cACZ5W,KAAK6W,wBAAgDL,EAAWH,EAAMH,EAAeC,GACrF,MAEF,KAAKxI,EAAA+I,SAASI,OACZ9W,KAAK+W,kBAAmCP,EAAWH,EAAMN,EAAeC,GACxE,MAEF,KAAKrI,EAAA+I,SAASM,SACZhX,KAAKiX,oBAAuCT,EAAWH,GACvD,MAEF,KAAK1I,EAAA+I,SAASQ,iBACZlX,KAAKmX,gBAAkCX,EAAWH,EAAMH,EAAeC,GACvE,MAEF,KAAKxI,EAAA+I,SAASU,gBACZpX,KAAKqX,eAAgCb,EAAWH,GAChD,MAEF,KAAK1I,EAAA+I,SAASY,oBACZtX,KAAKuX,mBAAwCf,EAAWH,GACxD,MAEF,KAAK1I,EAAA+I,SAASc,qBACZxX,KAAKyX,oBAA0CjB,EAAWH,GAC1D,MAEF,KAAK1I,EAAA+I,SAASgB,qBACZ1X,KAAK2X,oBAA0CnB,EAAWH,EAAMH,EAAeC,GAC/E,MAEF,KAAKxI,EAAA+I,SAASkB,gBACZ5X,KAAK6X,yBAA0CrB,EAAWH,SAQlE,IAAgC,IAAAyB,EAAAC,EAAA9B,GAAiB+B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAxC,KAAAE,EAAAC,EAAAJ,EAAA1W,MAAA,GAAO+W,GAANhC,EAAA8B,EAAA,GAAMA,EAAA,IACd,IAAS9X,EAAI,EAAG+V,EAAIiC,EAAYlM,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAClD,IAAIiY,EAAaD,EAAYhY,IACzBkY,EAAcvY,KAAKwY,kBAAkBF,EAAWpK,YAAaoK,EAAWnK,iBAQ5EkI,EAAKoC,iBAAiBF,GANpBvY,KAAKqN,MACHI,EAAAhD,eAAeiO,iBACfJ,EAAWhK,YAAYvD,MAAOuN,EAAWhK,YAAYhN,0GAS7D,IAASjB,EAAI,EAAG+V,EAAIL,EAAc5J,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACpD,IAuBMkY,EAvBFI,EAAe5C,EAAc1V,GAC7B4N,EAAoB0K,EAAa1K,kBACrC,GAAIA,GACE2K,GAAU5Y,KAAK6Y,cACjB5K,EAAkBhC,KAClB0M,EAAazK,YACbyK,EAAaxK,eACb6H,IAGA2C,EAAa5K,UAAUiH,IACrB2D,EAAa3K,gBAAgB/B,KAC7B2M,IACA,GAIF5Y,KAAKqN,MACHI,EAAAhD,eAAeqO,kCACf7K,EAAkBlD,MAAO4N,EAAazK,YAAaD,EAAkBhC,WAKzE,GADIsM,EAAcvY,KAAKwY,kBAAkBG,EAAazK,YAAayK,EAAaxK,gBAC/D,CACf,IAAIJ,EAAY4K,EAAa5K,UACzBgL,EAAYJ,EAAa3K,gBAAgB/B,KAC7C8B,EAAUiH,IACR+D,EACAR,EAAYS,oBACVD,EACAhL,IAEF,QAGF3D,QAAO,OAMb,IAA4B,IAAA6O,EAAAlB,EAAA/B,GAAakD,EAAAD,EAAAhB,QAAAiB,EAAAhB,KAAAgB,EAAAD,EAAAhB,OAAE,CAAlC,IAAAkB,EAAAf,EAAAc,EAAA5X,MAAA,GAAO5B,GAAN2W,EAAA8C,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,GAAAC,OAAA,EAAAtB,EAAArY,IAAO4Z,EAAAF,EAAAnB,QAAAqB,EAAApB,KAAAoB,EAAAF,EAAAnB,OAAE,CAAvC,IAAAsB,EAAAnB,EAAAkB,EAAAhY,MAAA,GAACkY,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBrL,IADA6K,EAAYU,GAAazL,gBAAgB/B,KAC3BwN,GAAavL,aAC/B,GAAIA,IACE0K,GAAU5Y,KAAK6Y,cACjBE,EACA7K,GACA9D,OAAOqP,GAAatL,gBACpB6H,IAGAK,EAAKqD,aAAaF,GAAYZ,IAE9B5Y,KAAKqN,MACHI,EAAAhD,eAAeqO,kCACfW,GAAazL,gBAAgBjD,MAC7BmD,GAAa6K,QAKjB,GADIH,GAAUvC,EAAKsD,aAAaZ,GAE9B1C,EAAKqD,aAAaF,GAAYZ,QACzB,CACL,IAAIgB,GAAgB5Z,KAAK6Z,aAAad,GAClCa,IAAiBA,cAAyBE,EAC5CzD,EAAKqD,aAAaF,GAA6BI,IAE/C5Z,KAAKqN,MACHI,EAAAhD,eAAeqO,kCACfW,GAAaxL,kBAAkBlD,MAC/BsL,EAAKjE,aAAcqH,GAAaxL,kBAAkBhC,4MAS9D7B,OAA2B,GAApBpK,KAAK2R,aACZ3R,KAAK+Z,oBAAsB/Z,KAAKga,aAAaxM,EAAAxK,cAAcsE,aAC3D8C,OAAsC,GAA/BpK,KAAK+Z,oBAAoBjH,IAChC9S,KAAKia,eAAiBja,KAAKga,aAAaxM,EAAAxK,cAAcgE,QACtDoD,OAAiC,GAA1BpK,KAAKia,eAAenH,IAC3B9S,KAAKka,wBAA0Bla,KAAKga,aAAaxM,EAAAxK,cAAcqE,iBAC/D+C,OAA0C,GAAnCpK,KAAKka,wBAAwBpH,IAGpC9S,KAAKma,wBAAuB,EAAc3M,EAAAxK,cAAckD,IACxDlG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAcmD,KACzDnG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAcoD,KACzDpG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAcqD,KACzDrG,KAAKma,wBAAuB,EAAiB3M,EAAAxK,cAAcsD,OAC3DtG,KAAKma,wBAAuB,EAAc3M,EAAAxK,cAAcuD,IACxDvG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAcwD,KACzDxG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAcyD,KACzDzG,KAAKma,wBAAuB,EAAe3M,EAAAxK,cAAc0D,KACzD1G,KAAKma,wBAAuB,EAAiB3M,EAAAxK,cAAc2D,OAC3D3G,KAAKma,wBAAuB,GAAgB3M,EAAAxK,cAAc4D,MAC1D5G,KAAKma,wBAAuB,GAAe3M,EAAAxK,cAAc6D,KACzD7G,KAAKma,wBAAuB,GAAe3M,EAAAxK,cAAc8D,KACrD4N,EAAQW,WAAU,IAAgBrV,KAAKma,wBAAuB,GAAgB3M,EAAAxK,cAAc+D,MAGhG/G,KAAKoa,iBAAmCpa,KAAKJ,QAAQ4N,EAAAxK,cAAcyE,UAAWqJ,EAAYuJ,iBAC1Fra,KAAKsa,kBAAoCta,KAAKJ,QAAQ4N,EAAAxK,cAAc0E,WAAYoJ,EAAYuJ,iBAC5Fra,KAAKua,kBAAoCva,KAAKJ,QAAQ4N,EAAAxK,cAAc2E,WAAYmJ,EAAYuJ,iBAC5Fra,KAAKwa,kBAAoCxa,KAAKJ,QAAQ4N,EAAAxK,cAAc4E,WAAYkJ,EAAYuJ,iBAC5Fra,KAAKya,iBAAmCza,KAAKJ,QAAQ4N,EAAAxK,cAAc6E,WAAYiJ,EAAYuJ,iBAC3Fra,KAAK0a,wBAA0C1a,KAAKJ,QAAQ4N,EAAAxK,cAAc8E,kBAAmBgJ,EAAYuJ,iBACzGra,KAAK2a,kBAAoC3a,KAAKJ,QAAQ4N,EAAAxK,cAAc+E,YAAa+I,EAAYuJ,iBAC7Fra,KAAK4a,kBAAoC5a,KAAKJ,QAAQ4N,EAAAxK,cAAcgF,YAAa8I,EAAYuJ,iBAC7Fra,KAAK6a,kBAAoC7a,KAAKJ,QAAQ4N,EAAAxK,cAAciF,YAAa6I,EAAYuJ,iBAC7Fra,KAAK8a,kBAAoC9a,KAAKJ,QAAQ4N,EAAAxK,cAAckF,aAAc4I,EAAYuJ,iBAC9Fra,KAAK+a,kBAAoC/a,KAAKJ,QAAQ4N,EAAAxK,cAAcmF,aAAc2I,EAAYuJ,iBAG9F,IAAIhI,GAAWrS,KAAKqS,SACpB,IAAShS,EAAI,EAAG+V,EAAIF,EAAc/J,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACpD,IAAI2a,GAAgB9E,EAAc7V,GAC9B4a,GAAc7Q,OAAO4Q,GAAcC,aACnCC,GAAc7I,GAAS8I,gBAAgBF,GAAYra,KAAMoa,GAAc9G,QAC3E,GAAKgH,GACL,GAAIA,GAAYzE,MAAQ3F,EAAYuJ,gBAAiB,CACnD,IAAIe,GAAgCF,GAChCE,GAAcC,aAAatK,EAAeuK,SAC5Ctb,KAAKqN,MACHI,EAAAhD,eAAe8Q,yCACfN,GAAYlQ,MAAwBmQ,GAAaM,eAAevP,MAIlEmP,GAAcC,aAAatK,EAAe0K,YAC1CT,GAAcK,aAAatK,EAAe0K,YAE1Czb,KAAKqN,MACHI,EAAAhD,eAAeiR,+DACf/N,EAAAgO,MAAMhP,KAAKqO,GAAcQ,eAAezQ,MAAOkQ,GAAYlQ,QAG/DiQ,GAAcI,cAAgBA,QAE9Bpb,KAAKqN,MACHI,EAAAhD,eAAemR,sCACfX,GAAYlQ,OAOhB,IAAI8Q,GAAgBnH,EAAQmH,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAA/D,EAAA8D,IAAaE,GAAAD,GAAA7D,QAAA8D,GAAA7D,KAAA6D,GAAAD,GAAA7D,OAAE,CAAhC,IAAA+D,GAAA5D,EAAA2D,GAAAza,MAAA,GAAC2a,GAAAD,GAAA,GAAOpb,GAAAob,GAAA,GACf,GAAKpb,GAAKuL,OAAV,CACA,IAAI+P,GAAYtb,GAAK2L,WAAW,GAChC,GAAI2P,IAAS,IAAmBA,IAAS,GACvClc,KAAKsV,wBAAwB2G,GAAOvO,EAAAkH,KAAKxR,IAAKmS,QAAa4G,SAASvb,GAAM,UACrE,CACL,IAAI0Q,GAAiBtR,KAAKsR,eAE1B,KADIsH,GAAUtH,GAAepQ,IAAIN,KAK5B,MAAM,IAAIwb,MAAM,2BAA6Bxb,IAHhD,GAAI0Q,GAAekD,IAAIyH,IAAQ,MAAM,IAAIG,MAAM,6BAA+Bxb,IAC9E0Q,GAAea,IAAI8J,GAAOrD,4GASpC5Y,KAAKqc,eAAiCrc,KAAKJ,QAAQ4N,EAAAxK,cAAciE,MAAO6J,EAAYuJ,iBACpFra,KAAKsc,oBAAsCtc,KAAKJ,QAAQ4N,EAAAxK,cAAckE,WAAY4J,EAAYuJ,iBAC9Fra,KAAKuc,aAA+Bvc,KAAKJ,QAAQ4N,EAAAxK,cAAcmE,IAAK2J,EAAYuJ,iBAChFra,KAAKwc,aAA+Bxc,KAAKJ,QAAQ4N,EAAAxK,cAAcoE,IAAK0J,EAAYuJ,iBAChFra,KAAKyc,cAAgBzc,KAAK0c,eAAelP,EAAAxK,cAAcoF,OACvDpI,KAAK2c,cAAgB3c,KAAK4c,gBAAgBpP,EAAAxK,cAAcuF,OACxDvI,KAAK6c,gBAAkB7c,KAAK4c,gBAAgBpP,EAAAxK,cAAcwF,SAC1DxI,KAAK8c,aAAe9c,KAAK4c,gBAAgBpP,EAAAxK,cAAcyF,MACvDzI,KAAK+c,eAAiB/c,KAAK4c,gBAAgBpP,EAAAxK,cAAc0F,QACzD1I,KAAKgd,gBAAkBhd,KAAK4c,gBAAgBpP,EAAAxK,cAAc2F,SAC1D3I,KAAKid,gBAAkBjd,KAAK4c,gBAAgBpP,EAAAxK,cAAc4F,SAC1D5I,KAAKkd,iBAAmBld,KAAK4c,gBAAgBpP,EAAAxK,cAAc6F,UAC3D7I,KAAKmd,mBAAqBnd,KAAK4c,gBAAgBpP,EAAAxK,cAAc8F,aAC7D9I,KAAKod,cAAgBpd,KAAK4c,gBAAgBpP,EAAAxK,cAAc+F,OACxD/I,KAAKqd,mBAAqBrd,KAAK4c,gBAAgBpP,EAAAxK,cAAcgG,gBAG7D,IAAiB,IAAAsU,GAAAvF,EAAA/X,KAAKqR,YAAYkM,UAAQC,GAAAF,GAAArF,QAAAuF,GAAAtF,KAAAsF,GAAAF,GAAArF,OAAE,CACtCvY,GADG2W,EAAImH,GAAAlc,OACQ5B,QACnB,GAAM2W,EAAK1K,OAAO8R,SAAW/d,MAC7B,IAAoB,IAAAge,IAAAC,OAAA,EAAA5F,EAAArY,EAAQ6d,WAAQK,GAAAF,GAAAzF,QAAA2F,GAAA1F,KAAA0F,GAAAF,GAAAzF,OAAA,CAA/B,IAAIW,GAAOgF,GAAAtc,MAAsBtB,KAAK6d,iBAAiBjF,mNAKxD5H,EAAA/O,UAAArC,QAAR,SAAgBgB,EAAc6V,GAC5B,IAAImC,EAAU5Y,KAAK6Z,aAAajZ,GAChC,IAAKgY,EAAS,MAAM,IAAIwD,MAAM,WAAaxb,GAC3C,GAAIgY,EAAQnC,MAAQA,EAAM,MAAM,IAAI2F,MAAM,cAAgBxb,GAC1D,OAAOgY,GAID5H,EAAA/O,UAAA+X,aAAR,SAAqBpZ,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMkQ,EAAYuJ,iBAC3CyD,EAAW9d,KAAKqS,SAAS0L,aAA6B9b,EAAW,MACrE,IAAK6b,EAAU,MAAM,IAAI1B,MAAM,WAAaxb,GAC5C,OAAOkd,GAID9M,EAAA/O,UAAAya,eAAR,SAAuB9b,GACrB,IAAIqB,EAAYjC,KAAK6Z,aAAajZ,GAClC,OAAKqB,GAAaA,EAAUwU,MAAQ3F,EAAYkN,mBACzChe,KAAKqS,SAAS4L,gBAAmChc,EAAW,MADQ,MAKrE+O,EAAA/O,UAAA2a,gBAAR,SAAwBhc,GACtB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMkQ,EAAYkN,oBAC3CF,EAAW9d,KAAKqS,SAAS4L,gBAAmChc,EAAW,MAC3E,IAAK6b,EAAU,MAAM,IAAI1B,MAAM,WAAaxb,GAC5C,OAAOkd,GAID9M,EAAA/O,UAAA4b,iBAAR,SAAyBjF,eAEvB,OADAA,EAAQzG,IAAI3E,EAAAnL,YAAY6b,eAChBtF,EAAQnC,MACd,KAAK3F,EAAYuJ,gBACf,IAAI8D,EAAmCvF,EAASuF,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAArG,EAAAoG,EAAgBZ,UAAQc,EAAAD,EAAAnG,QAAAoG,EAAAnG,KAAAmG,EAAAD,EAAAnG,OAAA,CAAtC,IAAIqG,EAAMD,EAAA/c,MAA8BtB,KAAK6d,iBAAiBS,qGACxF,MAEF,KAAKxN,EAAYyN,mBACf,IAAIC,EAAsC5F,EAAS4F,gBAC/CA,GAAiBxe,KAAK6d,iBAAiBW,GAC3C,IAAIC,EAAsC7F,EAAS6F,gBAC/CA,GAAiBze,KAAK6d,iBAAiBY,GAC3C,MAEF,KAAK3N,EAAY4N,SACjB,KAAK5N,EAAY6N,SACjB,KAAK7N,EAAY8N,MACjB,KAAK9N,EAAY+N,MAAOzU,QAAO,GAG/B,IAAI0U,EAAUlG,EAAQkG,QACtB,GAAIA,MAAS,IAAmB,IAAAC,EAAAhH,EAAA+G,EAAQvB,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAA,CAA1BqG,EAAMU,EAAA1d,MAAsBtB,KAAK6d,iBAAiBS,uGAKpEtN,EAAA/O,UAAA0S,mBAAR,SAA2B/T,EAAcqe,GACvC,IAAIrG,EAAU,IAAI3D,EAChBrU,EACAZ,KAAKiS,WACLjS,KAAKqT,0BAA0BzS,EAAM4M,EAAAnL,YAAY6S,QACjDnE,EAAeqE,SAEjBwD,EAAQsG,QAAQD,GAChBjf,KAAKiS,WAAW+C,IAAIpU,EAAMgY,IAIpB5H,EAAA/O,UAAAkY,wBAAR,SAAgCgF,EAAoBC,GAClDhV,QAAQpK,KAAKyR,YAAY+C,IAAI2K,IAC7B,IAAIvG,EAAU5Y,KAAK6Z,aAAauF,GAChC,GAAIxG,EAAS,CACXxO,OAAOwO,EAAQnC,MAAQ3F,EAAYuJ,iBACnC,IAAIgF,EAAerf,KAAKqS,SAAS0L,aAA6BnF,EAAS,MACnEyG,GAAcrf,KAAKyR,YAAYU,IAAIgN,EAAUE,KAK7CrO,EAAA/O,UAAAqT,wBAAR,SAAgC1U,EAAcqe,EAAY3d,GACxD8I,OAAO6U,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf5e,EACAZ,KAAKiS,WACLlB,EAAekC,KACfjT,KAAK+S,8BAA8BnS,EAAM4M,EAAAnL,YAAYod,MAAQjS,EAAAnL,YAAY6S,SAE3EqK,EAAOG,wBAAwBpe,EAAO2d,GACtCjf,KAAKiS,WAAW+C,IAAIpU,EAAM2e,IAIpBvO,EAAA/O,UAAA0d,sBAAR,SAA8B/e,EAAcqe,EAAY3d,GACtD8I,OAAO6U,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACf5e,EACAZ,KAAKiS,WACLlB,EAAekC,KACfjT,KAAK+S,8BAA8BnS,EAAM4M,EAAAnL,YAAYod,MAAQjS,EAAAnL,YAAY6S,SAE3EqK,EAAOK,sBAAsBte,EAAO2d,GACpCjf,KAAKiS,WAAW+C,IAAIpU,EAAM2e,IAI5BvO,EAAA/O,UAAA4d,aAAA,SAAajf,EAAcgY,GACzB,IAAItH,EAAiBtR,KAAKsR,eAC1B,GAAIA,EAAekD,IAAI5T,IACR0Q,EAAepQ,IAAIN,KAMjBgY,EAAS,CACtB,IAAIkH,EAASC,EAASzO,EAAepQ,IAAIN,GAAQgY,GACjD,IAAKkH,EAKH,OAJA9f,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACfpH,EAAQ4C,eAAezQ,MAAOnK,GAEzBgY,EAETA,EAAUkH,EAId,OADAxO,EAAea,IAAIvR,EAAMgY,GAClBA,GAIT5H,EAAA/O,UAAA4X,aAAA,SAAajZ,GACX,IAAIqf,EAAWjgB,KAAKsR,eACpB,OAAI2O,EAASzL,IAAI5T,GAAcqf,EAAS/e,IAAIN,GACrC,MAIToQ,EAAA/O,UAAAie,cAAA,SAActf,GACZ,IAAIqf,EAAWjgB,KAAKsR,eACpB,GAAI2O,EAASzL,IAAI5T,GAAO,OAAOqf,EAAS/e,IAAIN,GAC5C,MAAM,IAAIwb,MAAM,mBAIVpL,EAAA/O,UAAAuW,kBAAR,SAEEtK,EAEAC,GAEA,IAAIkD,EAAcrR,KAAKqR,YACvB,OAAOA,EAAYmD,IAAItG,GAChBmD,EAAYnQ,IAAIgN,GAChBmD,EAAYmD,IAAIrG,GAChBkD,EAAYnQ,IAAIiN,GAChB,MAID6C,EAAA/O,UAAA4W,cAAR,SAEEsH,EAEAjS,EAEAC,EAEA6H,GAEA,OAAG,CACD,IAAIuC,EAAcvY,KAAKwY,kBAAkBtK,EAAaC,GACtD,IAAKoK,EAAa,OAAO,KAGzB,IAAIK,EAAUL,EAAY6H,aAAaD,GACvC,GAAIvH,EAAS,OAAOA,EAGpB,GAAI5C,EAAcxB,IAAI+D,GAAc,CAClC,IAAI8H,EAAoBrK,EAAc9U,IAAIqX,GAC1C,GAAI8H,EAAkB7L,IAAI2L,GAAc,CACtC,IAAI1G,EAAe4G,EAAkBnf,IAAIif,GACzC,GAAI1G,EAAavL,YAAa,CAC5BiS,EAAc1G,EAAazL,gBAAgB/B,KAC3CiC,EAAcuL,EAAavL,YAC3BC,EAAiB/D,OAAOqP,EAAatL,gBACrC,SAGA,GADAyK,EAAUL,EAAYoB,aAAaF,EAAazL,gBAAgB/B,MACnD,OAAO2M,GAI1B,MAEF,OAAO,MAID5H,EAAA/O,UAAAqe,gBAAR,SAEEC,EAEAC,GAEA,IAAIxN,EAAQjC,EAAekC,KAC3B,GAAIsN,EACF,IAAK,IAAIlgB,EAAI,EAAG+V,EAAImK,EAAWpU,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACjD,IAAIogB,EAAYF,EAAWlgB,GAEvBqgB,EAAOC,EADAhT,EAAAiT,oBAAoBH,EAAU7f,OAErC8f,IACEA,GAAQ3P,EAAeqE,QACnBoL,EAAgBE,GAAUD,EAAU1V,MAAMY,OAAOkV,UAMrD7N,GAAS0N,EALT1gB,KAAKqN,MACHI,EAAAhD,eAAeqW,8BACfL,EAAU1V,MAAO0V,EAAU7f,KAAKmK,MAAMW,YAK/B8U,EAAgBE,EAKlB1N,EAAQ0N,EACjB1gB,KAAKqN,MACHI,EAAAhD,eAAesW,oBACfN,EAAU1V,MAAO0V,EAAU7f,KAAKmK,MAAMW,YAGxCsH,GAAS0N,EAVT1gB,KAAKqN,MACHI,EAAAhD,eAAeqW,8BACfL,EAAU1V,MAAO0V,EAAU7f,KAAKmK,MAAMW,aAahD,OAAOsH,GAIDhC,EAAA/O,UAAAkV,gBAAR,SAEE5C,EAEAL,EAEAgC,EAEAC,GAEA,IAAIvV,EAAO2T,EAAY3T,KAAKqL,KACxB2M,EAAU,IAAIoI,EAChBpgB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAC/BxP,EAAekQ,OACflQ,EAAeuK,OACfvK,EAAe0K,YAGnB,IAAKvH,EAAOc,IAAIpU,EAAMgY,GAAU,OAAO,KAEvC,IAAIsI,EAAkB3M,EAAY2M,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgB/U,OAEzC,GAAIyM,EAAQyC,aAAatK,EAAe0K,WAClC0F,GACFnhB,KAAKqN,MACHI,EAAAhD,eAAe2W,8CACfzT,EAAAgO,MAAMhP,KACJ4H,EAAY3T,KAAKmK,MACjBmW,EAAgBC,EAAqB,GAAGpW,aAIzC,GAAIoW,EAAoB,CAE7B,IAAK,IAAI9gB,EAAI,EAAGA,EAAI8gB,IAAsB9gB,EACxCL,KAAKmN,QACHM,EAAAhD,eAAe4W,wBACfH,EAAgB7gB,GAAG0K,OAGvBoL,EAAiBzJ,KAAKkM,IAItBrE,EAAY+M,aAAapL,EAAcxJ,KAAKkM,GAIhD,IADA,IAAI2I,EAAqBhN,EAAYuK,QACrB1I,GAAP/V,EAAI,EAAOkhB,EAAmBpV,QAAQ9L,EAAI+V,IAAK/V,EAAG,CACzD,IAAImhB,EAAoBD,EAAmBlhB,GAC3C,OAAQmhB,EAAkB/K,MACxB,KAAK9I,EAAA+I,SAAS+K,iBACZzhB,KAAK0hB,gBAAkCF,EAAmB5I,GAC1D,MAEF,KAAKjL,EAAA+I,SAASiL,kBACRH,EAAkBI,MAAMpU,EAAAnL,YAAYwf,IAAMrU,EAAAnL,YAAYyf,KACxD9hB,KAAK+hB,mBAAsCP,EAAmB5I,GAE9D5Y,KAAKgiB,iBAAoCR,EAAmB5I,GAE9D,MAEF,KAAKjL,EAAA+I,SAASuL,0BAA2B,MACzC,QAAS7X,QAAO,IAGpB,OAAOwO,GAID5H,EAAA/O,UAAAyf,gBAAR,SAEEnN,EAEAL,GAEA,IAEI0E,EAFAhY,EAAO2T,EAAY3T,KAAKqL,KACxBsU,EAAahM,EAAYgM,WAE7B,GAAIhM,EAAY+K,GAAG9R,EAAAnL,YAAY6f,SAa7B,GAZA9X,OAAO8J,EAAOuC,MAAQ3F,EAAYqR,qBAClCvJ,EAAU,IAAI4G,EACZ5e,EACAsT,EACAlU,KAAKsgB,gBAAgBC,GAClBhM,EAAY+K,GAAG9R,EAAAnL,YAAY+f,UACxBrR,EAAesR,OACftR,EAAekC,MACflC,EAAeuR,KAAOvR,EAAewR,QAE3ChO,IAEGL,EAAOc,IAAIpU,EAAMgY,GAAU,YAShC,GAPAxO,QAAQmK,EAAYqN,MAAMpU,EAAAnL,YAAYmgB,SAAWhV,EAAAnL,YAAYwf,IAAMrU,EAAAnL,YAAYyf,MAC/ElJ,EAAU,IAAI6J,EACZ7hB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgBC,EAAYxP,EAAewR,UAE7CrO,EAAOwO,YAAY9hB,EAAMgY,GAAU,QAKpC5H,EAAA/O,UAAA+f,iBAAR,SAEEzN,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB0W,EAAWpO,EAAY+K,GAAG9R,EAAAnL,YAAY6f,QACtC1B,EAAgBzP,EAAesR,OAAStR,EAAewR,OACtDhO,EAAY+K,GAAG9R,EAAAnL,YAAY8S,WAC9BqL,GAAiBzP,EAAenC,gBACfmC,EAAeZ,gBACfY,EAAeL,kBAElC,IAAIkI,EAAU,IAAIvE,EAChBzT,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAAYC,IAE/C,GAAImC,GAEF,GADAvY,OAAOmK,EAAY3T,KAAK6V,MAAQ9I,EAAA+I,SAASkM,cACpC1O,EAAOc,IAAIpU,EAAMgY,GAAU,YAEhC,IAAK1E,EAAOwO,YAAY9hB,EAAMgY,GAAU,OAE1C5Y,KAAK6iB,uBAAuBtO,EAAYgM,WAAY3H,EAAS1E,IAIvDlD,EAAA/O,UAAA4gB,uBAAR,SAEEtC,EAEAte,EAEA6gB,GAEA,GAAIvC,EACF,IAAK,IAAIlgB,EAAI,EAAG+V,EAAImK,EAAWpU,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACjD,IAAIogB,EAAYF,EAAWlgB,GAC3B,OAAQogB,EAAUjS,eAChB,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACnB,KAAKjB,EAAAe,cAAcyB,gBACnB,KAAKxC,EAAAe,cAAcgC,iBACjB,IAAIqS,EAAUtC,EAAUuC,WAAavC,EAAUuC,UAAU7W,QAAU,EACnE,GAAe,GAAX4W,EAAc,CAChB,IAAIE,EAA0BxC,EAAUuC,UAAW,GACnD,GACEC,EAASxM,MAAQ9I,EAAA+I,SAASwM,SACND,EAAUE,aAAexV,EAAAyV,YAAYC,OACzD,CACA,IAAI5M,EAAOlI,EACTkS,EAAUjS,cACgByU,EAAU3hB,OAEtC,GAAImV,GAAQlJ,EAAasD,QACvB7Q,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf4B,EAASlY,WAEN,CACL,IAAIuY,EAAYR,EAAeS,mBAC3BD,EAAU9O,IAAIiC,GAChBzW,KAAKqN,MACHI,EAAAhD,eAAe+Y,kCACfP,EAASlY,QAGX9I,EAAUwhB,aAAehN,EACzB6M,EAAUnR,IAAIsE,EAAMxU,UAIxBjC,KAAKqN,MACHI,EAAAhD,eAAeiZ,wBACfT,EAASlY,YAIb/K,KAAKqN,MACHI,EAAAhD,eAAekZ,+BACflD,EAAU1V,MAAO,IAAKgY,EAAQrX,SAAS,QAU7CsF,EAAA/O,UAAA2hB,eAAR,SAEErP,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KAC5B,GAAIsI,EAAY+K,GAAG9R,EAAAnL,YAAY6f,QAAS,CAEtC,KADI2B,EAAgB3P,EAAO4K,WACN+E,EAAcrP,IAAI5T,GAGhC,CACL,IAAIgY,EAAU,IAAIkL,EAAkBljB,EAAMsT,EAAQK,GAClD,OAAKL,EAAOc,IAAIpU,EAAMgY,GACfA,EADgC,KAHvC,IADIA,EAAmBiL,EAAc3iB,IAAIN,IAC7B6V,MAAQ3F,EAAYyN,mBAAoB,OAA0B3F,MAM3E,CACL,IAAIiL,EACJ,KADIA,EAAgB3P,EAAOiK,mBACN0F,EAAcrP,IAAI5T,GAGhC,CACDgY,EAAU,IAAIkL,EAAkBljB,EAAMsT,EAAQK,GAClD,OAAKL,EAAOwO,YAAY9hB,EAAMgY,GACvBA,EADwC,KAH/C,IADIA,EAAmBiL,EAAc3iB,IAAIN,IAC7B6V,MAAQ3F,EAAYyN,mBAAoB,OAA0B3F,EAWlF,OAJA5Y,KAAKqN,MACHI,EAAAhD,eAAesZ,qBACfxP,EAAY3T,KAAKmK,MAAOnK,GAEnB,MAIDoQ,EAAA/O,UAAA8f,mBAAR,SAEExN,EAEAL,GAEA,IAAIlS,EAAWhC,KAAK4jB,eAAerP,EAAaL,GAChD,GAAKlS,EAAL,CACA,IAAIpB,EAAO2T,EAAY3T,KAAKqL,KACxB+X,EAAWzP,EAAY+K,GAAG9R,EAAAnL,YAAYwf,KAC1C,GAAImC,GACF,GAAIhiB,EAASwc,gBAKX,YAJAxe,KAAKqN,MACHI,EAAAhD,eAAesZ,qBACfxP,EAAY3T,KAAKmK,MAAOnK,QAK5B,GAAIoB,EAASyc,gBAKX,YAJAze,KAAKqN,MACHI,EAAAhD,eAAesZ,qBACfxP,EAAY3T,KAAKmK,MAAOnK,GAK9B,IAAIgY,EAAU,IAAIvE,GACf2P,EAAWxW,EAAAhL,cAAgBgL,EAAA/K,eAAiB7B,EAC7CoB,EACAuS,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAC/BxP,EAAesR,OAAStR,EAAewR,SAGvCyB,EACFhiB,EAASwc,gBAAkB5F,EAE3B5W,EAASyc,gBAAkB7F,IAKvB5H,EAAA/O,UAAAoV,eAAR,SAEE9C,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB2M,EAAU,IAAIqL,EAChBrjB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAC/BxP,EAAekQ,OACflQ,EAAesR,OACftR,EAAeuR,OAGnB,IAAKpO,EAAOc,IAAIpU,EAAMgY,GAAU,OAAO,KAEvC,IADA,IAAI2E,EAAShJ,EAAYgJ,OAChBld,EAAI,EAAG+V,EAAImH,EAAOpR,OAAQ9L,EAAI+V,IAAK/V,EAC1CL,KAAKkkB,oBAAoB3G,EAAOld,GAAIuY,GAEtC,OAAOA,GAID5H,EAAA/O,UAAAiiB,oBAAR,SAEE3P,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB2M,EAAU,IAAIuL,EAChBvjB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAC/BxP,EAAekC,OAGdiB,EAAOc,IAAIpU,EAAMgY,IAIhB5H,EAAA/O,UAAA0U,kBAAR,SAEEH,EAEAtC,EAEA8B,EAEAC,GAEA,IAAI6I,EAAUtI,EAAUsI,QACxB,GAAIA,EACF,IAAK,IAAIze,EAAI,EAAG+V,EAAI0I,EAAQ3S,OAAQ9L,EAAI+V,IAAK/V,EAC3CL,KAAKokB,iBAAiBtF,EAAQze,GAAI6T,EAAQsC,EAAU6N,aAAcrO,OAE/D,CACL,IAAIsO,OAAM,EACNrO,EAAkBzB,IAAIN,GAASoQ,EAASrO,EAAkB/U,IAAIgT,GAC7D+B,EAAkB9D,IAAI+B,EAAQoQ,EAAS,IAC5C,IAAIpW,EAAc9D,OAAOoM,EAAU6N,cACnCC,EAAO5X,KAAK,IAAI2B,EACdH,EACAA,EAAYqW,SAAS/W,EAAAzK,cACjBmL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAzK,aAAaoJ,QAC3D+B,EAAcV,EAAAzK,aAClBqH,OAAOoM,EAAUgO,UAMfxT,EAAA/O,UAAAmiB,iBAAR,SAEE9F,EAEAvQ,EAEAG,EAEA8H,GAEA,IAAI+C,EAAYuF,EAAOvF,UAAU9M,KAC7BkU,EAAc7B,EAAOmG,aAAaxY,KAGlC2M,EAAU7K,EAAUqS,aAAaD,GACrC,GAAIvH,EACF5Y,KAAKqN,MACHI,EAAAhD,eAAeia,4DACfpG,EAAOmG,aAAa1Z,MAAOoV,QAK/B,GAAoB,OAAhBjS,EAGF,GAAI0K,EAAU7K,EAAU4L,aAAaZ,GACnChL,EAAU2L,aAAayG,EAAavH,OAG/B,CACL,IAAI0L,OAAM,EACNtO,EAAcxB,IAAIzG,GAAYuW,EAAStO,EAAc9U,IAAI6M,GACxDiI,EAAc7D,IAAIpE,EAAWuW,EAAS,IAAIld,KAC/Ckd,EAAOnS,IAAIgO,EAAa,IAAI/R,EAC1BkQ,EAAOvF,UACPuF,EAAOmG,aACP,KAAM,WAKL,CACDH,OAAM,EACNtO,EAAcxB,IAAIzG,GAAYuW,EAAStO,EAAc9U,IAAI6M,GACxDiI,EAAc7D,IAAIpE,EAAWuW,EAAS,IAAIld,KAC/Ckd,EAAOnS,IAAIgO,EAAa,IAAI/R,EAC1BkQ,EAAOvF,UACPuF,EAAOmG,aACPvW,EACAA,EAAYqW,SAAS/W,EAAAzK,cACjBmL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAzK,aAAaoJ,QAC3D+B,EAAcV,EAAAzK,iBAKhBiO,EAAA/O,UAAA4U,wBAAR,SAEEL,EAEAtC,EAEAgC,EAEAC,GAEA,IAAI5B,EAAciC,EAAUjC,YACxBqE,EAAkC,KACtC,OAAQrE,EAAYkC,MAClB,KAAK9I,EAAA+I,SAASU,gBACZwB,EAAU5Y,KAAKqX,eAAgC9C,EAAaL,GAC5D,MAEF,KAAKvG,EAAA+I,SAASY,oBACZsB,EAAU5Y,KAAKuX,mBAAwChD,EAAaL,GACpE,MAEF,KAAKvG,EAAA+I,SAASQ,iBACZ0B,EAAU5Y,KAAKmX,gBAAkC5C,EAAaL,EAAQgC,EAAeC,GACrF,MAEF,KAAKxI,EAAA+I,SAASc,qBACZoB,EAAU5Y,KAAKyX,oBAA0ClD,EAAaL,GACtE,MAEF,KAAKvG,EAAA+I,SAASgB,qBACZkB,EAAU5Y,KAAK2X,oBAA0CpD,EAAaL,EAAQgC,EAAeC,GAC7F,MAEF,QAAS/L,QAAO,GAElB,GAAIwO,EAAS,CACX,IAAIlZ,EAAUwU,EAAOxU,QACrB,GAAKA,GACA,GAAIA,EAAQ8U,IAAI,WAKnB,YAJAxU,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACfzL,EAAY3T,KAAKmK,MAAO,gBAJdmJ,EAAOxU,QAAUA,EAAU,IAAI0H,IAQ7C1H,EAAQyS,IAAI,UAAWyG,KAKnB5H,EAAA/O,UAAA8U,kBAAR,SAEEP,EAEAtC,EAEA6B,EAEAC,GAEA,IAAI2O,EAAenO,EAAUmO,aAC7B,GAAIA,EACF,IAAK,IAAItkB,EAAI,EAAG+V,EAAIuO,EAAaxY,OAAQ9L,EAAI+V,IAAK/V,EAChDL,KAAK4kB,iBACHD,EAAatkB,GACb6T,EACAsC,EAAU6N,aACVtO,EACAC,QAGKQ,EAAUqO,eACnB9O,EAAcrJ,KAAK,IAAIoB,EACrBoG,EACAsC,EAAUqO,cACV,KACArO,EAAU6N,aACV7N,EAAU6N,aAAe7W,EAAAzK,gBAQvBiO,EAAA/O,UAAA2iB,iBAAR,SAEErQ,EAEAL,EAEAhG,EAEA6H,EAEAC,GAEA,IAAI7H,EAAiBD,EAAYqW,SAAS/W,EAAAzK,cACtCmL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAzK,aAAaoJ,QAC3D+B,EAAcV,EAAAzK,aAGd6V,EAAU5Y,KAAK6Y,cAActE,EAAY4L,YAAYlU,KAAMiC,EAAaC,EAAgB6H,GACxF4C,EACF1E,EAAOc,IAAIT,EAAY3T,KAAKqL,KAAM2M,GAAS,GAK7C7C,EAAcrJ,KAAK,IAAIoB,EACrBoG,EACAK,EAAY3T,KACZ2T,EAAY4L,YACZjS,EACAC,KAKI6C,EAAA/O,UAAAsV,mBAAR,SAEEhD,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB6Y,EAAkB/T,EAAewR,OAASxR,EAAeqE,QACzDb,EAAY+K,GAAG9R,EAAAnL,YAAY0iB,SAC7BD,GAAmB/T,EAAeiU,SAElCF,GAAmB/T,EAAesR,OAE/B9N,EAAY+K,GAAG9R,EAAAnL,YAAY4iB,WAC1B/Q,EAAOuC,MAAQ3F,EAAYuJ,kBAC7ByK,GAAmB/T,EAAekQ,QAGtC,IAAIrI,EAAU,IAAIvE,EAChBzT,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAAYuE,IAE/C,OAAK5Q,EAAOc,IAAIpU,EAAMgY,GACfA,EADgC,MAKjC5H,EAAA/O,UAAAwV,oBAAR,SAEElD,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB2M,EAAU,IAAIsM,EAChBtkB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAC/BxP,EAAekQ,SAGnB,IAAK/M,EAAOc,IAAIpU,EAAMgY,GAAU,OAAO,KAEvC,IADA,IAAI2I,EAAqBhN,EAAYuK,QAC5Bze,EAAI,EAAG+V,EAAImL,EAAmBpV,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACzD,IAAImhB,EAAoBD,EAAmBlhB,GAC3C,OAAQmhB,EAAkB/K,MACxB,KAAK9I,EAAA+I,SAAS+K,iBACZzhB,KAAK0hB,gBAAkCF,EAAmB5I,GAC1D,MAEF,KAAKjL,EAAA+I,SAASiL,kBACRH,EAAkBI,MAAMpU,EAAAnL,YAAYwf,IAAMrU,EAAAnL,YAAYyf,KACxD9hB,KAAK+hB,mBAAsCP,EAAmB5I,GAE9D5Y,KAAKgiB,iBAAoCR,EAAmB5I,GAE9D,MAEF,QAASxO,QAAO,IAGpB,OAAOwO,GAID5H,EAAA/O,UAAA0V,oBAAR,SAEEpD,EAEAL,EAEAgC,EAEAC,GAEA,IAAIvV,EAAO2T,EAAY3T,KAAKqL,KACxBkZ,EAAW,IAAIC,EACjBxkB,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAAYxP,EAAekQ,SAE9D,IAAK/M,EAAOc,IAAIpU,EAAMukB,GAAW,OAAO,KAGxC,IAFA,IAAIvM,EAAUxO,OAAO8J,EAAOyF,aAAa/Y,IACrCke,EAAUvK,EAAYuK,QACjBze,EAAI,EAAG+V,EAAI0I,EAAQ3S,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAC9C,IAAIie,EAASQ,EAAQze,GACrB,OAAQie,EAAO7H,MACb,KAAK9I,EAAA+I,SAASQ,iBACZlX,KAAKmX,gBAAkCmH,EAAQ6G,EAAUjP,EAAeC,GACxE,MAEF,KAAKxI,EAAA+I,SAASU,gBACZpX,KAAKqX,eAAgCiH,EAAQ6G,GAC7C,MAEF,KAAKxX,EAAA+I,SAASY,oBACZtX,KAAKuX,mBAAwC+G,EAAQ6G,GACrD,MAEF,KAAKxX,EAAA+I,SAASc,qBACZxX,KAAKyX,oBAA0C6G,EAAQ6G,GACvD,MAEF,KAAKxX,EAAA+I,SAASgB,qBACZ1X,KAAK2X,oBAA0C2G,EAAQ6G,EAAUjP,EAAeC,GAChF,MAEF,KAAKxI,EAAA+I,SAASkB,gBACZ5X,KAAK6X,yBAA0CyG,EAAQ6G,GACvD,MAEF,KAAKxX,EAAA+I,SAASM,SACZhX,KAAKiX,oBAAuCqH,EAAQ6G,GACpD,MAEF,QAAS/a,QAAO,IAIpB,OADI+a,GAAYvM,GAASyM,EAAYF,EAAUvM,GACxCA,GAID5H,EAAA/O,UAAA4V,yBAAR,SAEEtD,EAEAL,GAEA,IAAItT,EAAO2T,EAAY3T,KAAKqL,KACxB2M,EAAU,IAAI3D,EAChBrU,EACAsT,EACAK,EACAvU,KAAKsgB,gBAAgB/L,EAAYgM,WAAYxP,EAAekC,OAE9DiB,EAAOc,IAAIpU,EAAMgY,IAIX5H,EAAA/O,UAAAgV,oBAAR,SAEET,EAEAtC,GAGA,IADA,IAAIyQ,EAAenO,EAAUmO,aACpBtkB,EAAI,EAAG+V,EAAIuO,EAAaxY,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACnD,IAAIkU,EAAcoQ,EAAatkB,GAC3BO,EAAO2T,EAAY3T,KAAKqL,KACxBuU,EAAgBzP,EAAekQ,OAASlQ,EAAeuR,KACvD/N,EAAY+K,GAAG9R,EAAAnL,YAAYijB,WAC7B9E,GAAiBzP,EAAeiU,UAE9BzQ,EAAY+K,GAAG9R,EAAAnL,YAAYod,SAC7Be,GAAiBzP,EAAesR,QAElC,IAAIzJ,EAAU,IAAI4G,EAChB5e,EACAsT,EACAlU,KAAKsgB,gBAAgB/L,EAAYgM,WAAYC,GAC7CjM,GAEGL,EAAOc,IAAIpU,EAAMgY,KA8B5B5H,EAhhDA,CAA6BvD,EAAAX,mBAulD7B,SAAgB6T,EAAoBlK,GAClC,OAAQA,GACN,KAAK9I,EAAAe,cAAcuS,OAAQ,OAAOlQ,EAAekQ,OACjD,KAAKtT,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBAAiB,OAAOmC,EAAenC,gBAC1D,KAAKjB,EAAAe,cAAcyB,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAKxC,EAAAe,cAAcgC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAK/C,EAAAe,cAAc+M,UAAW,OAAO1K,EAAe0K,UACpD,KAAK9N,EAAAe,cAAc4M,OAAQ,OAAOvK,EAAeuK,OACjD,KAAK3N,EAAAe,cAAc2T,OAAQ,OAAOtR,EAAesR,OACjD,KAAK1U,EAAAe,cAAcsW,SAAU,OAAOjU,EAAeiU,SACnD,KAAKrX,EAAAe,cAAc0G,QAAS,OAAOrE,EAAeqE,QAClD,KAAKzH,EAAAe,cAAc4T,KAAM,OAAOvR,EAAeuR,KAC/C,KAAK3U,EAAAe,cAAc6T,OAAQ,OAAOxR,EAAewR,OACjD,QAAS,OAAOxR,EAAekC,MArmDtBvT,EAAAsR,UAmhDb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAApR,EAAAoR,cAAApR,EAAAoR,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,sBAxBF,CAAYA,EAAArR,EAAAqR,iBAAArR,EAAAqR,eAAc,KA4B1BrR,EAAAihB,sBAmBA,IAAA4E,EAAA,WAcE,SAAAA,EAES9O,EAEA7V,EAEAwR,EAEAoT,EAEPtR,GAROlU,KAAAyW,OAEAzW,KAAAY,OAEAZ,KAAAoS,eAEApS,KAAAwlB,UAjBTxlB,KAAAgT,MAAqBxF,EAAAnL,YAAY4Q,KAEjCjT,KAAAmU,eAAiCpD,EAAekC,KAEhDjT,KAAA8e,QAA8C,KAE9C9e,KAAAylB,WAAoC,KAelCzlB,KAAKwlB,QAAUA,EACfxlB,KAAKY,KAAOA,EACZZ,KAAKoS,aAAeA,EAChB8B,EACFlU,KAAKkU,OAASA,GAEd9J,OAAOpK,KAAKyW,MAAQ3F,EAAY4U,MAChC1lB,KAAKkU,OAASlU,MAoEpB,OA/DEe,OAAAC,eAAIukB,EAAAtjB,UAAA,OAAI,KAAR,WAEE,IADA,IAAI0jB,EAAmB3lB,OACpB,IAAK2lB,EAAUA,EAAQzR,QAAQuC,MAAQ3F,EAAY4U,KAAM,OAAaC,mCAK3EJ,EAAAtjB,UAAAqd,GAAA,SAAGoB,GAA2B,OAAQ1gB,KAAKgT,MAAQ0N,IAASA,GAE5D6E,EAAAtjB,UAAA2f,MAAA,SAAM5O,GAA4B,OAA+B,IAAvBhT,KAAKgT,MAAQA,IAEvDuS,EAAAtjB,UAAAkQ,IAAA,SAAIuO,GAA2B1gB,KAAKgT,OAAS0N,GAE7C6E,EAAAtjB,UAAA2jB,MAAA,SAAMlF,GAA0B1gB,KAAKgT,QAAU0N,GAE/C6E,EAAAtjB,UAAAoZ,aAAA,SAAaqF,GAA8B,OAAQ1gB,KAAKmU,eAAiBuM,IAASA,GAGlF6E,EAAAtjB,UAAA0X,aAAA,SAAa/Y,GACX,IAAIke,EAAU9e,KAAK8e,QACnB,OAAIA,GAAWA,EAAQtK,IAAI5T,GAAcke,EAAQ5d,IAAIN,GAC9C,MAOT2kB,EAAAtjB,UAAA+S,IAAA,SAAIpU,EAAcgY,GAChB,IAAIiN,EAAsBjN,EAAQrE,YAC9BuK,EAAU9e,KAAK8e,QACnB,GAAKA,GACA,GAAIA,EAAQtK,IAAI5T,GAAO,CAC1B,IAAIklB,EAAShH,EAAQ5d,IAAIN,GACzB,GAAIklB,EAAO5R,SAAWlU,UAEf,CACL,IAAI8f,EAASC,EAAS+F,EAAQlN,GAC9B,IAAIkH,EAOF,OAJA9f,KAAKwlB,QAAQnY,MACXI,EAAAhD,eAAeuV,uBACfpH,EAAQ4C,eAAezQ,MAAO6N,EAAQ4C,eAAevP,OAEhD,EANP2M,EAAUkH,SARF9f,KAAK8e,QAAUA,EAAU,IAAI1X,IAkB3C0X,EAAQ3M,IAAIvR,EAAMgY,GAClB,IAAI4M,EAAUxlB,KAAKwlB,QAMnB,OALI5M,EAAQnC,MAAQ3F,EAAYkN,oBAA2CpF,EAASmN,UAElFP,EAAQlU,eAAea,IAAIyG,EAAQxG,aAAcwG,GACjD4M,EAAQjU,sBAAsBY,IAAI0T,EAAqBjN,KAElD,GAIT2M,EAAAtjB,UAAAyJ,SAAA,WACE,OAAOoF,EAAY9Q,KAAKyW,MAAQ,IAAMzW,KAAKoS,cAE/CmT,EArGA,GAAsB7lB,EAAA6lB,UAwGtB,IAAAzL,EAAA,SAAA7I,GAGE,SAAA6I,EAEErD,EAEA7V,EAEAwR,EAEAoT,EAEAtR,EAEOK,GAZT,IAAArD,EAcED,EAAAzQ,KAAAR,KAAMyW,EAAM7V,EAAMwR,EAAcoT,EAAStR,IAAOlU,YAFzCkR,EAAAqD,cASPrD,EAAKqD,YAAcA,EACnBrD,EAAK8B,MAAQuB,EAAYvB,QAiB7B,OA1C8CT,EAAAuH,EAAA7I,GA6B5ClQ,OAAAC,eAAI8Y,EAAA7X,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAKuU,YAAYxJ,MAAMY,OAAOkV,2CAIvC9f,OAAAC,eAAI8Y,EAAA7X,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKuU,YAAY3T,sCAI1BG,OAAAC,eAAI8Y,EAAA7X,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKuU,YAAYgM,4CAE5BzG,EA1CA,CAA8CyL,GAAxB7lB,EAAAoa,kBA6CtB,IAAAkM,EAAA,SAAA/U,GAAA,SAAA+U,IAAA,IAAA9U,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YAGEkR,EAAA+N,KAAavR,EAAAkH,KAAKG,OAQpB,OAX2CxC,EAAAyT,EAAA/U,GAMzC+U,EAAA/jB,UAAAid,QAAA,SAAQD,GACN7U,QAAQpK,KAAKsf,GAAG9R,EAAAnL,YAAY6jB,WAC5BlmB,KAAKif,KAAOA,EACZjf,KAAKmS,IAAI3E,EAAAnL,YAAY6jB,WAEzBF,EAXA,CAA2ClM,GAArBpa,EAAAsmB,eActB,IAAA9T,EAAA,SAAAjB,GAUE,SAAAiB,EAEEsT,EAEO7Z,GAJT,IAAAuF,EAMED,EAAAzQ,KAAAR,KACE8Q,EAAY4U,KACZ/Z,EAAOC,eACPD,EAAO0Y,aACPmB,EACA,OACDxlB,KARMkR,EAAAvF,SAXTuF,EAAAxR,QAA8C,KAE9CwR,EAAAmH,YAA6B,KAkB3BnH,EAAKvF,OAASA,EACdvB,QAAQob,EAAQnU,YAAYmD,IAAItD,EAAKkB,eACrCoT,EAAQnU,YAAYc,IAAIjB,EAAKkB,aAAclB,GAC3C,IAAIiV,EAAgBjV,EAAKsU,QAAQxR,mBAC/B,SAAW9C,EAAKkB,aAChB,IAAI1E,EAAA0Y,UAAU,KAAM1Y,EAAAkH,KAAKG,MACzB7D,UAEFiV,EAAc/T,aAAe+T,EAAcvlB,KAC3CsQ,EAAKiV,cAAgBA,IAoFzB,OApH0B5T,EAAAL,EAAAjB,GAoCxBiB,EAAAjQ,UAAA+S,IAAA,SAAIpU,EAAcgY,EAA0ByN,GAI1C,YAJ0C,IAAAA,OAAA,GACtCzN,EAAQyC,aAAatK,EAAekQ,UACtCrI,EAAU5Y,KAAKwlB,QAAQ3F,aAAajf,EAAMgY,MAEvC3H,EAAAhP,UAAM+S,IAAGxU,KAAAR,KAACY,EAAMgY,MACrBA,EAAUxO,OAAOpK,KAAK2Z,aAAa/Y,KACvB0e,GAAG9R,EAAAnL,YAAY6S,UAAYmR,GACrCrmB,KAAK0Z,aACHd,EAAQhY,KACRgY,IAGG,IAIT1G,EAAAjQ,UAAA0X,aAAA,SAAa/Y,GACX,IAAIgY,EAAU3H,EAAAhP,UAAM0X,aAAYnZ,KAAAR,KAACY,GACjC,GAAIgY,EAAS,OAAOA,EACpB,IAAIP,EAAcrY,KAAKqY,YACvB,GAAIA,EACF,IAAK,IAAIhY,EAAI,EAAG+V,EAAIiC,EAAYlM,OAAQ9L,EAAI+V,IAAK/V,EAC/C,GAAIuY,EAAUP,EAAYhY,GAAGsZ,aAAa/Y,GAAO,OAAOgY,EAG5D,OAAO,MAIT1G,EAAAjQ,UAAAqkB,OAAA,SAAO1lB,GACL,IAAIgY,EAAU5Y,KAAK2Z,aAAa/Y,GAChC,OAAIgY,GACG5Y,KAAKwlB,QAAQ3L,aAAajZ,IAInCsR,EAAAjQ,UAAAyX,aAAA,SAAa9Y,EAAcgY,GACzB,IAAIlZ,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAI0H,KAC3C1H,EAAQyS,IAAIvR,EAAMgY,GACd5Y,KAAK2L,OAAOkV,WAAW7gB,KAAKwlB,QAAQ3F,aAAajf,EAAMgY,IAI7D1G,EAAAjQ,UAAAwW,iBAAA,SAAiBpC,GACf,IAAIgC,EAAcrY,KAAKqY,YACvB,GAAKA,GACA,GAAIA,EAAYkO,SAASlQ,GAAO,YADnBrW,KAAKqY,YAAcA,EAAc,GAEnDA,EAAY3L,KAAK2J,IAInBnE,EAAAjQ,UAAAme,aAAA,SAAaxf,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQ8U,IAAI5T,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAIyX,EAAcrY,KAAKqY,YACvB,GAAIA,EACF,IAAK,IAAIhY,EAAI,EAAG+V,EAAIiC,EAAYlM,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAClD,IAAIuY,EAAUP,EAAYhY,GAAG+f,aAAaxf,GAC1C,GAAIgY,EAAS,OAAOA,EAGxB,OAAO,MAIT1G,EAAAjQ,UAAA+W,oBAAA,SAAoBpY,EAAcsT,WAC5BxS,EAAK,IAAI0jB,EACXxkB,EACAsT,EACAlU,KAAKwlB,QAAQ1R,+BAA+BlT,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAA8mB,EAAAzO,EAAArY,GAAO+mB,EAAAD,EAAAvO,QAAAwO,EAAAvO,KAAAuO,EAAAD,EAAAvO,OAAE,CAAjC,IAAAyO,EAAAtO,EAAAqO,EAAAnlB,MAAA,GAACqlB,EAAAD,EAAA,GAAYpI,EAAAoI,EAAA,GACpBhlB,EAAGsT,IAAI2R,EAAYrI,qGAGvB,OAAO5c,GAEXwQ,EApHA,CAA0BqT,GAAb7lB,EAAAwS,OAuHb,IAAA+C,EAAA,SAAAhE,GAGE,SAAAgE,EAEErU,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAY8V,eACZhmB,EACAimB,EAAmBjmB,EAAMsT,GAAQ,GACjCA,EAAOsR,QACPtR,EACAK,IACDvU,YACDkR,EAAKiD,eAAiBA,IAiB1B,OAtCoC5B,EAAA0C,EAAAhE,GAyBlClQ,OAAAC,eAAIiU,EAAAhT,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAKuU,YAAauS,gDAI7C/lB,OAAAC,eAAIiU,EAAAhT,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAKuU,YAAa0K,sCAI7ChK,EAAAhT,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BqU,EAtCA,CAAoC+Q,GAAvBtmB,EAAAuV,iBAyCb,IAAAmQ,EAAA,SAAAnU,GAGE,SAAAmU,EAEExkB,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAYiW,UACZnmB,EACAimB,EAAmBjmB,EAAMsT,GAAQ,GACjCA,EAAOsR,QACPtR,EACAK,IACDvU,YACDkR,EAAKiD,eAAiBA,IAQ1B,OA7B+B5B,EAAA6S,EAAAnU,GAyB7BmU,EAAAnjB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAK2Z,aAAa/Y,IAClBZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BwkB,EA7BA,CAA+BtL,GAAlBpa,EAAA0lB,YAgCb,IAAAnB,EAAA,SAAAhT,GAGE,SAAAgT,EAEErjB,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAYkW,KACZpmB,EACAimB,EAAmBjmB,EAAMsT,GAAQ,GACjCA,EAAOsR,QACPtR,EACAK,IACDvU,YACDkR,EAAKiD,eAAiBA,EACtBjD,EAAKgO,QAAQxR,EAAAkH,KAAKxR,OAQtB,OA9B0BmP,EAAA0R,EAAAhT,GA0BxBgT,EAAAhiB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAK2Z,aAAa/Y,IAClBZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BqjB,EA9BA,CAA0B+B,GAAbtmB,EAAAukB,OAiCb,SAAkBgD,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkBvnB,EAAAunB,oBAAAvnB,EAAAunB,kBAAiB,KAUnC,IAAAC,EAAA,SAAAjW,GAUE,SAAAiW,EAEEzQ,EAEA7V,EAEAsT,EAEAK,QAAA,IAAAA,MAAgDL,EAAOsR,QAAQzS,8BAA8BnS,IAR/F,IAAAsQ,EAUED,EAAAzQ,KAAAR,KACEyW,EACA7V,EACAimB,EAAmBjmB,EAAMsT,GAAQ,GACjCA,EAAOsR,QACPtR,EACAK,IACDvU,YAxBHkR,EAAAiW,kBAAiB,EAyBfjW,EAAK8B,MAAQuB,EAAYvB,QAmC7B,OA/DkDT,EAAA2U,EAAAjW,GAgChDlQ,OAAAC,eAAIkmB,EAAAjlB,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAKuU,YAAa0K,sCAI9Dle,OAAAC,eAAIkmB,EAAAjlB,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAKuU,YAAa6S,6CAI9DF,EAAAjlB,UAAAyd,wBAAA,SAAwBpe,EAAY2d,GAClC7U,OAAO6U,EAAKK,GAAE,IACdtf,KAAKif,KAAOA,EACZjf,KAAKmnB,kBAAiB,EACtBnnB,KAAKqnB,qBAAuB/lB,EAC5BtB,KAAKmS,IAAI3E,EAAAnL,YAAYod,MAAQjS,EAAAnL,YAAYilB,QAAU9Z,EAAAnL,YAAY6jB,WAIjEgB,EAAAjlB,UAAA2d,sBAAA,SAAsBte,EAAY2d,GAChC7U,OAAO6U,EAAKK,GAAE,IACdtf,KAAKif,KAAOA,EACZjf,KAAKmnB,kBAAiB,EACtBnnB,KAAKunB,mBAAqBjmB,EAC1BtB,KAAKmS,IAAI3E,EAAAnL,YAAYod,MAAQjS,EAAAnL,YAAYilB,QAAU9Z,EAAAnL,YAAY6jB,WAIjEgB,EAAAjlB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BsmB,EA/DA,CAAkDlB,GAA5BtmB,EAAAwnB,sBAkEtB,IAAA/C,EAAA,SAAAlT,GAGE,SAAAkT,EAEEvjB,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAY0W,UACZ5mB,EACAsT,EACAK,IACDvU,YAMHkR,EAAAuW,aAAoB,EALlBvW,EAAKiD,eAAiBA,EACtBjD,EAAKgO,QAAQxR,EAAAkH,KAAKxR,OAetB,OAnC+BmP,EAAA4R,EAAAlT,GA2B7BlQ,OAAAC,eAAImjB,EAAAliB,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAKuU,YAAajT,uCAIlD6iB,EAAAliB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BujB,EAnCA,CAA+B+C,GAAlBxnB,EAAAykB,YAsCb,IAAA3E,EAAA,SAAAvO,GAGE,SAAAuO,EAEE5e,EAEAsT,EAEAC,EAEAI,QAAA,IAAAA,MAAgDL,EAAOsR,QAAQzS,8BAA8BnS,IAR/F,IAAAsQ,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAYmQ,OACZrgB,EACAsT,EACAK,IACDvU,YACDkR,EAAKiD,eAAiBA,IAE1B,OArB4B5B,EAAAiN,EAAAvO,GAqB5BuO,EArBA,CAA4B0H,GAAfxnB,EAAA8f,SAwBb,IAAAkI,EAAA,WAUA,OARE,SAES9mB,EAEAqe,EAEAmI,QAAA,IAAAA,MAAA,MAJApnB,KAAAY,OAEAZ,KAAAif,OAEAjf,KAAAonB,eARX,GAAa1nB,EAAAgoB,YAab,IAAAC,EAAA,SAAA1W,GAGE,SAAA0W,EAEE/mB,EAEOgnB,EAEP3I,EAEA/K,EAEAK,QAAA,IAAAA,MAAgDL,EAAOsR,QAAQzS,8BAA8BnS,IAV/F,IAAAsQ,EAYED,EAAAzQ,KAAAR,KACE8Q,EAAY+W,MACZjnB,EACAsT,EACAK,IACDvU,YAbMkR,EAAA0W,QAcP1W,EAAK0W,MAAQA,EACbxd,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACpB7D,EAAKgO,QAAQD,KAEjB,OAzB2B1M,EAAAoV,EAAA1W,GAyB3B0W,EAzBA,CAA2BT,GAAdxnB,EAAAioB,QA4Bb,IAAAtT,EAAA,SAAApD,GAWE,SAAAoD,EAEEzT,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAYkN,mBACZpd,EACAimB,EAAmBjmB,EAAMsT,EAAQK,EAAY+K,GAAG9R,EAAAnL,YAAY4iB,WAC5D/Q,EAAOsR,QACPtR,EACAK,IACDvU,YAzBHkR,EAAAuS,aAA6BlW,EAAasD,QAE1CK,EAAA4W,UAAyC,KAGjC5W,EAAA6W,gBAAuD,KAqB7D7W,EAAKiD,eAAiBA,IAsE1B,OAnGuC5B,EAAA8B,EAAApD,GAiCrClQ,OAAAC,eAAIqT,EAAApS,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAKuU,YAAauS,gDAIjD/lB,OAAAC,eAAIqT,EAAApS,UAAA,mBAAgB,KAApB,WACE,OAA6BjC,KAAKuU,YAAaN,2CAIjDlT,OAAAC,eAAIqT,EAAApS,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAKuU,YAAayT,sCAIjDjnB,OAAAC,eAAIqT,EAAApS,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAKuU,YAAa0T,2CAIjDlnB,OAAAC,eAAIqT,EAAApS,UAAA,UAAO,KAAX,WACE,IAAIiS,EAASlU,KAAKkU,OAClB,OAAOA,EAAOuC,MAAQ3F,EAAY+N,OAC3B3K,EAAOuC,MAAQ3F,EAAYyN,oBAAsBrK,EAAOA,OAAOuC,MAAQ3F,EAAY+N,uCAI5FxK,EAAApS,UAAAimB,QAAA,SAAQvV,GACNvI,OAAOpK,KAAKsf,GAAG9R,EAAAnL,YAAY4iB,WAC3B7a,QAAQpK,KAAK+lB,SACb,IAAIgC,EAAkB/nB,KAAK+nB,gBAC3B,GAAKA,GACA,GAAIA,EAAgBvT,IAAI7B,GAAgB,OAAOoV,EAAgB7mB,IAAIyR,QADlD3S,KAAK+nB,gBAAkBA,EAAkB,IAAI3gB,IAEnE,IAAImN,EAAcvU,KAAKuU,YAAanK,OAAOmK,EAAYkC,MAAQ9I,EAAA+I,SAASiL,mBACxE,IAAIwG,EAAQ,IAAI9T,EACdrU,KAAKY,KACL+R,EACmB4B,EACnBvU,KAAKmU,gBAMP,OAJAgU,EAAMnV,MAAQhT,KAAKgT,MACnBmV,EAAM1E,aAAezjB,KAAKyjB,aAE1BsE,EAAgB5V,IAAIQ,EAAewV,GAC5BA,GAIT9T,EAAApS,UAAAmmB,oBAAA,SAAoBC,GAClB,IAAIP,EAAY9nB,KAAK8nB,UACrB,OAAIA,GAAaA,EAAUtT,IAAI6T,GAA+BP,EAAU5mB,IAAImnB,GACrE,MAIThU,EAAApS,UAAAqmB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAY9nB,KAAK8nB,UAChBA,EACA1d,QAAQ0d,EAAUtT,IAAI6T,IADXroB,KAAK8nB,UAAYA,EAAY,IAAI1gB,IAEjD0gB,EAAU3V,IAAIkW,EAAaE,IAI7BlU,EAAApS,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9ByT,EAnGA,CAAuCyF,GAA1Bpa,EAAA2U,oBAsGb,IAAAD,EAAA,SAAAnD,GAiCE,SAAAmD,EAEEoU,EAEAvmB,EAEAgS,EAEAwU,QAAA,IAAAA,MAAA,MARF,IAAAvX,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAY6N,SACZ6J,EACA3B,EAAmB2B,EAAwBvmB,EAAUiS,OAAQjS,EAAUqd,GAAG9R,EAAAnL,YAAY4iB,WACtFhjB,EAAUujB,QACVvjB,EAAUiS,OACVjS,EAAUsS,cACXvU,KAOD,GAlDFkR,EAAAwX,aAAkC,IAAIthB,IAEtC8J,EAAAyX,cAAyB,GAEzBzX,EAAA0X,iBAA2B,GAM3B1X,EAAA2X,eAA0B,GAE1B3X,EAAA4X,IAAmB,EAEnB5X,EAAA6X,oBAA2B,EAE3B7X,EAAA8X,WAA8B,KAG9B9X,EAAA+X,aAAoB,EAEpB/X,EAAAgY,gBAAuB,EAEvBhY,EAAAiY,kBAAyB,EAyFzBjY,EAAAkY,SAA2B,KAC3BlY,EAAAmY,SAA2B,KAC3BnY,EAAAoY,SAA2B,KAC3BpY,EAAAqY,SAA2B,KAC3BrY,EAAAsY,UAA4B,KAG5BtY,EAAAuY,YAAmB,EACnBvY,EAAAwY,WAA2B,KAC3BxY,EAAAyY,WAA4B,KA7E1BzY,EAAKjP,UAAYA,EACjBiP,EAAK+C,UAAYA,EACjB/C,EAAK8B,MAAQ/Q,EAAU+Q,MAAQxF,EAAAnL,YAAY6jB,SAC3ChV,EAAKiD,eAAiBlS,EAAUkS,eAChCjD,EAAKuX,wBAA0BA,EAC/BvX,EAAK+N,KAAOvR,EAAAkH,KAAKnR,IAAImmB,WAAW3V,IAC3BhS,EAAUqd,GAAG9R,EAAAnL,YAAY0iB,SAAU,CACtC,IAAI8E,EAAa,EACjB,GAAI3Y,EAAKoO,GAAG9R,EAAAnL,YAAY4iB,UAAW,CACjC,IAAI6E,EAAQ,IAAInC,EACdna,EAAAxK,cAAcoC,MACdykB,IACAzf,OAAO6J,EAAU8V,UACjB7Y,GAEFA,EAAKwX,aAAavW,IAAI3E,EAAAxK,cAAcoC,MAAO0kB,GAC3C5Y,EAAKyX,cAAcmB,EAAMlC,OAASkC,EAGpC,IADA,IAAIE,EAAiB/V,EAAU+V,eACtB3pB,EAAI,EAAG+V,EAAI4T,EAAe7d,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACrD,IAAI4pB,EAAgBD,EAAe3pB,GAC/B6pB,EAAgBjW,EAAUkW,iBAAiB9pB,GAC3CypB,EAAQ,IAAInC,EACduC,EACAL,IACAI,EACA/Y,GAEFA,EAAKwX,aAAavW,IAAI+X,EAAeJ,GACrC5Y,EAAKyX,cAAcmB,EAAMlC,OAASkC,UAGtC5Y,EAAKkZ,KAAOvc,EAAAwc,KAAK1oB,OAAOuP,GACxBoZ,EAAwBpZ,EAAKsU,QAAStU,KAmE1C,OAvJ8BqB,EAAA6B,EAAAnD,GAwF5BmD,EAAAnS,UAAAsoB,SAAA,SAAStL,EAAYre,EAA4B2T,QAA5B,IAAA3T,MAAA,WAA4B,IAAA2T,MAAA,MAE/C,IAAIsV,EAAa7pB,KAAKiU,UAAU+V,eAAe7d,OAASnM,KAAK4oB,iBAAiBzc,OAC1EnM,KAAKsf,GAAG9R,EAAAnL,YAAY4iB,aAAa4E,EACrC,IAAI9Q,EAAqB,OAATnY,EACZA,EACA,OAASipB,EAAWne,WACpBoe,EAAQ,IAAInC,EACd5O,EACA8Q,EACA5K,EACAjf,KACAuU,GAAevU,KAAKwlB,QAAQzS,8BAA8BgG,IAE5D,GAAInY,EAAM,CACR,GAAIZ,KAAK0oB,aAAalU,IAAI5T,GAAO,MAAM,IAAIwb,MAAM,wBACjDpc,KAAK0oB,aAAavW,IAAIvR,EAAMkpB,GAI9B,OAFA9pB,KAAK2oB,cAAcmB,EAAMlC,OAASkC,EAClC9pB,KAAK4oB,iBAAiBlc,KAAKuS,GACpB6K,GAIT1V,EAAAnS,UAAAqkB,OAAA,SAAO1lB,GACL,IAAI4pB,EAASxqB,KAAK0oB,aAClB,OAAI8B,EAAOhW,IAAI5T,GAAc4pB,EAAOtpB,IAAIN,GACjCZ,KAAKkU,OAAOoS,OAAO1lB,IAgB5BwT,EAAAnS,UAAAwoB,SAAA,SAAS9qB,EAAgBmpB,GAMvB,GALA9oB,KAAK8oB,IAAMA,EACX1e,QAAQpK,KAAK0pB,aAAe1pB,KAAK0pB,WAAWvd,QAC5CnM,KAAK0pB,WAAa,KAClB1pB,KAAK2pB,WAAa,KAClB3pB,KAAKopB,SAAWppB,KAAKqpB,SAAWrpB,KAAKspB,SAAWtpB,KAAKupB,SAAW,KAC5DvpB,KAAKwlB,QAAQ9Q,QAAQgW,UAEvB,IADA,IAAI7B,EAAiB7oB,KAAK6oB,eACjBxoB,EAAI,EAAG+V,EAAIyS,EAAe1c,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACrD,IAAIsqB,EAAgB9B,EAAexoB,GACnCV,EAAOirB,iBACL9B,EACA6B,EAAcE,aACdF,EAAchf,OAAOmf,eACrBH,EAAc9e,KACd8e,EAAc7e,UAKxBsI,EAvJA,CAA8B4R,GAAjBtmB,EAAA0U,WA0Jb,IAAA2W,EAAA,SAAA9Z,GAQE,SAAA8Z,EAEE9W,EAEAuR,EACAwF,QAAA,IAAAA,MAAA,IALF,IAAA9Z,EAOED,EAAAzQ,KAAAR,KACE8Q,EAAYma,gBACZD,EAAM,OAAS/W,EAAUiX,oBACzBF,EACAxF,EACAA,EAAQvT,aACTjS,YACDkR,EAAK+C,UAAYA,EACjB/C,EAAK8B,MAAQxF,EAAAnL,YAAY6jB,SACzBhV,EAAK+N,KAAOvR,EAAAkH,KAAKnR,IAAImmB,WAAW3V,KAOpC,OA/BoC1B,EAAAwY,EAAA9Z,GA4BlC8Z,EAAA9oB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAO,MAEXmqB,EA/BA,CAAoCxF,GAAvB7lB,EAAAqrB,iBAkCb,IAAAtI,EAAA,SAAAxR,GAGE,SAAAwR,EAEE7hB,EAEAsT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCpD,EAAekC,MARlD,IAAA/B,EAUED,EAAAzQ,KAAAR,KACE8Q,EAAYqa,gBACZvqB,EACAimB,EAAmBjmB,EAAMsT,EAAQ9J,OAAOmK,EAAY+K,GAAG9R,EAAAnL,YAAY4iB,YACnE/Q,EAAOsR,QACPtR,EACAK,IACDvU,YACDkR,EAAKiD,eAAiBA,IAsB1B,OA3CoC5B,EAAAkQ,EAAAxR,GAyBlClQ,OAAAC,eAAIyhB,EAAAxgB,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAKuU,YAAa0K,sCAI9Cle,OAAAC,eAAIyhB,EAAAxgB,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKuU,YAAa6S,6CAI9CrmB,OAAAC,eAAIyhB,EAAAxgB,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAKuU,YAAa6W,gDAI9C3I,EAAAxgB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9B6hB,EA3CA,CAAoC3I,GAAvBpa,EAAA+iB,iBA8Cb,IAAA4I,EAAA,SAAApa,GAQE,SAAAoa,EAEEppB,EAEAiS,EAEA+K,GANF,IAAA/N,EAQED,EAAAzQ,KAAAR,KACE8Q,EAAY8N,MACZ3c,EAAUrB,KACVsT,EACkCjS,EAAUsS,cAC7CvU,YAhBHkR,EAAAoa,cAAqB,EAiBnBpa,EAAKjP,UAAYA,EACjBiP,EAAK8B,MAAQ/Q,EAAU+Q,MACvB5I,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACpB7D,EAAKgO,QAAQD,GACbqL,EAAwBpZ,EAAKsU,QAAStU,KAE1C,OA5B2BqB,EAAA8Y,EAAApa,GA4B3Boa,EA5BA,CAA2BnE,GAAdxnB,EAAA2rB,QA+Bb,IAAAvH,EAAA,SAAA7S,GAQE,SAAA6S,EAEEljB,EAEAsT,EAEAqX,GANF,IAAAra,EAQED,EAAAzQ,KAAAR,KACE8Q,EAAYyN,mBACZ3d,EACAimB,EAAmBjmB,EAAMsT,EAAQqX,EAAiBjM,GAAG9R,EAAAnL,YAAY4iB,WACjE/Q,EAAOsR,QACPtR,EACAqX,IACDvrB,YApBHkR,EAAAsN,gBAA4C,KAE5CtN,EAAAuN,gBAA4C,KAmB1CvN,EAAK8B,SAAWxF,EAAAnL,YAAYwf,IAAMrU,EAAAnL,YAAYyf,OAOlD,OA/BuCvP,EAAAuR,EAAA7S,GA4BrC6S,EAAA7hB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BkjB,EA/BA,CAAuChK,GAA1Bpa,EAAAokB,oBAkCb,IAAA0H,EAAA,SAAAva,GAUE,SAAAua,EAEEvpB,EAEAiS,GAJF,IAAAhD,EAMED,EAAAzQ,KAAAR,KACE8Q,EAAY4N,SACZzc,EAAUrB,KACVsT,EACAjS,EAAUujB,QAAQzS,8BAChB9Q,EAAUrB,KACVqB,EAAUqd,GAAG9R,EAAAnL,YAAY4iB,UACrBzX,EAAAnL,YAAY4iB,SACZzX,EAAAnL,YAAY4Q,QAEnBjT,YArBHkR,EAAAua,eAAkC,KAElCva,EAAAwa,eAAkC,KAoBhCxa,EAAKjP,UAAYA,EACjBqoB,EAAwBpZ,EAAKsU,QAAStU,KAO1C,OAnC8BqB,EAAAiZ,EAAAva,GAgC5Bua,EAAAvpB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9B4qB,EAnCA,CAA8BtE,GAAjBxnB,EAAA8rB,WAsCb,IA4GWG,EA5GX3K,EAAA,SAAA/P,GAaE,SAAA+P,EAEEpgB,EAEAsT,EAEAK,EAEAJ,EACAyX,QADA,IAAAzX,MAAiCpD,EAAekC,WAChD,IAAA2Y,OAAA,GATF,IAAA1a,EAWED,EAAAzQ,KAAAR,KACE4rB,EAAe9a,EAAYqR,oBAAsBrR,EAAYuJ,gBAC7DzZ,EACAimB,EAAmBjmB,EAAMsT,EAAQK,EAAY+K,GAAG9R,EAAAnL,YAAY4iB,WAC5D/Q,EAAOsR,QACPtR,EACAK,IACDvU,YA5BHkR,EAAAiN,gBAA8C,KAE9CjN,EAAAkK,cAAuC,KAEvClK,EAAA2a,qBAAiD,KAEjD3a,EAAAqS,mBAA2D,IAAInc,IAE/D8J,EAAA4W,UAAsC,KAqBpC5W,EAAKiD,eAAiBA,IA0E1B,OA1GoC5B,EAAAyO,EAAA/P,GAoClClQ,OAAAC,eAAIggB,EAAA/e,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAKuU,YAAauS,gDAG9C/lB,OAAAC,eAAIggB,EAAA/e,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAKuU,YAAa+M,6CAG9CvgB,OAAAC,eAAIggB,EAAA/e,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKuU,YAAa2M,iDAI9CngB,OAAAC,eAAIggB,EAAA/e,UAAA,iBAAc,KAAlB,WACE,IAAIiY,EAA0Bla,KAAKwlB,QAAQtL,wBAC3C,OAAmC,OAA5BA,GACAla,KAAK8rB,QAAQ5R,EAAwBjY,4CAI9C+e,EAAA/e,UAAA6pB,QAAA,SAAQC,GACN,IAAIpG,EAAiC3lB,KACrC,GAAG,GAAI2lB,IAAYoG,EAAe,OAAO,QAClCpG,EAAUA,EAAQvK,eACzB,OAAO,GAIT4F,EAAA/e,UAAAygB,YAAA,SAAY9hB,EAAcgY,GACxB,IAAIiN,EAAsBjN,EAAQrE,YAC9B4J,EAAkBne,KAAKme,gBAC3B,GAAKA,GACA,GAAIA,EAAgB3J,IAAI5T,GAAO,CAClC,IAAIkf,EAASC,EAAS5B,EAAgBjd,IAAIN,GAAQgY,GAClD,IAAKkH,EAKH,OAJA9f,KAAKwlB,QAAQnY,MACXI,EAAAhD,eAAeuV,uBACfpH,EAAQ4C,eAAezQ,MAAO6N,EAAQ4C,eAAevP,OAEhD,EAET2M,EAAUkH,QAVU9f,KAAKme,gBAAkBA,EAAkB,IAAI/W,IAiBnE,OALA+W,EAAgBhM,IAAIvR,EAAMgY,GACtBA,EAAQ0G,GAAG9R,EAAAnL,YAAY6S,SAAWlV,KAAKsf,GAAG9R,EAAAnL,YAAY6b,gBACxDtF,EAAQzG,IAAI3E,EAAAnL,YAAY6b,eAE1Ble,KAAKwlB,QAAQjU,sBAAsBY,IAAI0T,EAAqBjN,IACrD,GAIToI,EAAA/e,UAAAmmB,oBAAA,SAAoBC,GAClB,IAAIP,EAAY9nB,KAAK8nB,UACrB,OAAIA,GAAaA,EAAUtT,IAAI6T,GAA4BP,EAAU5mB,IAAImnB,GAClE,MAITrH,EAAA/e,UAAAqmB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAY9nB,KAAK8nB,UAChBA,EACA1d,QAAQ0d,EAAUtT,IAAI6T,IADXroB,KAAK8nB,UAAYA,EAAY,IAAI1gB,IAEjD0gB,EAAU3V,IAAIkW,EAAaE,IAI7BvH,EAAA/e,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAE9BogB,EA1GA,CAAoClH,GAAvBpa,EAAAshB,iBA4Gb,SAAW2K,GACTA,IAAA,qBACAA,IAAA,qBACAA,IAAA,6BAHF,CAAWA,MAAY,KAOvB,IAAAK,EAAA,SAAA/a,GAkDE,SAAA+a,EAEExD,EAEAvmB,EAEAgqB,EAEAC,EACAN,gBAHA,IAAAK,MAAA,WAEA,IAAAC,MAAA,WACA,IAAAN,OAAA,GATF,IAAA1a,EAWED,EAAAzQ,KAAAR,KACE4rB,EAAe9a,EAAYqb,UAAYrb,EAAY+N,MACnD2J,EACA3B,EAAmB2B,EAAwBvmB,EAAUiS,OAAQjS,EAAUqd,GAAG9R,EAAAnL,YAAY4iB,WACtFhjB,EAAUujB,QACVvjB,EAAUiS,OACVjS,EAAUsS,cACXvU,KA3DHkR,EAAAuX,wBAAmD,KAEnDvX,EAAAkb,oBAA2B,EAE3Blb,EAAAmb,oBAAuC,KAEvCnb,EAAAoS,UAA+C,KAEvCpS,EAAAob,IAAW,EAEXpb,EAAAqb,SAAQ,EAEhBrb,EAAAsb,UAAiB,EAgDf,IAAIhH,EAAUtU,EAAKsU,QAQnB,GAPAtU,EAAKjP,UAAYA,EACjBiP,EAAK8B,MAAQ/Q,EAAU+Q,MACvB9B,EAAKiD,eAAiBlS,EAAUkS,eAChCjD,EAAK+a,cAAgBA,EACrB/a,EAAKgO,QAAQsG,EAAQ9Q,QAAQI,UAAU2X,QAAQvb,IAC/CA,EAAKgb,KAAOA,GAEPhb,EAAKmK,aAAatK,EAAe0K,WAAY,CAChD,IAAI3I,EAAK0S,EAAQ7T,cACjBT,EAAKob,IAAMxZ,EACX0S,EAAQ9T,eAAeS,IAAIW,EAAI5B,GAIjC,GAAIgb,EAAM,CACR,IAAIQ,EAAyBR,EAAKzD,wBAClC,GAAIiE,EAAwB,CAC1B,IAAIjE,EAA0BvX,EAAKuX,4BACnC,IAAiC,IAAAkE,EAAA5U,EAAA2U,GAAsBE,EAAAD,EAAA1U,QAAA2U,EAAA1U,KAAA0U,EAAAD,EAAA1U,OAAE,CAAhD,IAAAyO,EAAAtO,EAAAwU,EAAAtrB,MAAA,GAACurB,EAAAnG,EAAA,GAAUoG,EAAApG,EAAA,GACb+B,IAAyBvX,EAAKuX,wBAA0BA,EAA0B,IAAIrhB,KAC3FqhB,EAAwBtW,IAAI0a,EAAUC,uGAM5C,IAAIhG,EAAiB7kB,EAAU8qB,mBAC/B,GAAId,EAAe,CACjB,IAAIe,EAAmBf,EAAc9f,OACrC,IAAK2a,GAAkBkG,GAAoBlG,EAAe3a,OACxD,MAAM,IAAIiQ,MAAM,gCAElB,GAAI4Q,EAAkB,CACf9b,EAAKuX,0BAAyBvX,EAAKuX,wBAA0B,IAAIrhB,KACtE,IAAK,IAAI/G,EAAI,EAAGA,EAAI2sB,IAAoB3sB,EACtC6Q,EAAKuX,wBAAwBtW,IAAI2U,EAAezmB,GAAGO,KAAKqL,KAAMggB,EAAc5rB,UAG3E,GAAIymB,GAAkBA,EAAe3a,OAC1C,MAAM,IAAIiQ,MAAM,uCAElBkO,EAAwB9E,EAAStU,KA+NrC,OA9U2BqB,EAAAyZ,EAAA/a,GAwBzBlQ,OAAAC,eAAIgrB,EAAA/pB,UAAA,KAAE,KAAN,WACE,OAAOjC,KAAKssB,qCAIdvrB,OAAAC,eAAIgrB,EAAA/pB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiC,UAAUgrB,gDAIxBlsB,OAAAC,eAAIgrB,EAAA/pB,UAAA,cAAW,KAAf,WACE,GAAIjC,KAAKitB,eAAgB,OAAO,EAChC,IAAIC,EAAcltB,KAAK2Z,aAAa,UACpC,OAAuB,OAAhBuT,IACLA,EAAYzW,MAAQ3F,EAAY8N,OAE9BsO,EAAYzW,MAAQ3F,EAAY4N,UACW,OAAhCwO,EAAazB,kBAGwB,OAAlDzrB,KAAKmtB,eAAe5f,EAAasB,cAC2B,OAA5D7O,KAAKmtB,eAAe5f,EAAawB,yDAsErCid,EAAA/pB,UAAAmrB,eAAA,SAAeC,GACb,IAAI1H,EAAwB3lB,KAC5B,GAAG,GAAI2lB,GAAW0H,EAAQ,OAAO,QAC1B1H,EAAUA,EAAQuG,MACzB,OAAO,GAITF,EAAA/pB,UAAAkrB,eAAA,SAAe1W,EAAoB6W,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQ7W,GACN,KAAKlJ,EAAasB,YAEhB,GADI0e,EAAoBvtB,KAAKmtB,eAAe5f,EAAawB,uBAClC,OAAOwe,EAC9B,MAEF,KAAKhgB,EAAauB,YAChB,IAAIye,EACJ,GADIA,EAAoBvtB,KAAKmtB,eAAe5f,EAAayB,uBAClC,OAAOue,EAC9B,MAEF,QAASnjB,QAAO,GAGpB,IAAIme,EAAyBvoB,KAC7B,EAAG,CACD,IAAIsjB,EAAYiF,EAASjF,UACzB,GAAIA,EAAW,CACb,IAAIkK,EAAWlK,EAAUpiB,IAAIuV,GAC7B,GAAI+W,EAAU,OAAOA,SAEhBjF,EAAWA,EAAS2D,MAC7B,OAAO,MAITF,EAAA/pB,UAAAqkB,OAAA,SAAO1lB,GACL,OAAOZ,KAAKkU,OAAOoS,OAAO1lB,IAI5BorB,EAAA/pB,UAAAwrB,SAAA,SAASC,GACP,IAAI5O,EAAU1U,OAAOpK,KAAK8e,SAC1B1U,OAAO0U,EAAQtK,IAAIkZ,IACnB,IAAIC,EAAiB7O,EAAQ5d,IAAIwsB,GAEjC,OADAtjB,OAAOujB,EAAMlX,MAAQ3F,EAAY8N,OAClB+O,EAAOrC,cAIxBU,EAAA/pB,UAAA2rB,WAAA,SAAchtB,EAAcU,EAAUmR,EAAoBob,GACxD,IAAIF,EAAQ3tB,KAAK2Z,aAAa/Y,GAC9B,GAAI+sB,GAASA,EAAMlX,MAAQ3F,EAAY8N,MAAO,CAC5C,IAAIlM,EAASmb,EAAqBF,EAAOrC,aACzC,OAAgBqC,EAAO1O,KAAKxI,MAC1B,OACA,OAEE,OADA5M,EAAAikB,QAAQ1qB,IAAI9B,GAAQmR,EAAQC,GACrB,EAET,OACA,OAEE,OADA7I,EAAAkkB,SAAS3qB,IAAI9B,GAAQmR,EAAQC,GACtB,EAET,OACA,OAEE,OADA7I,EAAAgJ,SAASzP,IAAI9B,GAAQmR,EAAQC,GACtB,EAET,OACA,OAGE,OAFAtI,QAAQpK,KAAKwlB,QAAQ9Q,QAAQc,UAC7B3L,EAAAgJ,SAASzP,IAAI9B,GAAQmR,EAAQC,GACtB,EAET,QAEE,OADA7I,EAAAmkB,SAASnqB,IAAIvC,GAAQmR,EAAQC,GACtB,EAET,QAEE,OADA7I,EAAAokB,SAASnqB,IAAIxC,GAAQmR,EAAQC,GACtB,GAKb,OADAtI,QAAO,GACA,GAIT4hB,EAAA/pB,UAAA6pB,QAAA,SAAQ7pB,GACN,OAAOjC,KAAKiC,UAAU6pB,QAAQ7pB,IAIhC+pB,EAAA/pB,UAAAisB,mBAAA,SAAmBC,GACjB,IAAIxI,EAAwB3lB,KAC5B,GAAG,GAAI2lB,EAAQ1jB,YAAcksB,EAAmB,OAAOxI,EAAQsG,oBACxDtG,EAAUA,EAAQuG,MACzB,OAAO,MAITF,EAAA/pB,UAAAmsB,kBAAA,WAIE,IAHA,IAAIzI,EAAiB3lB,KACjBwlB,EAAUxlB,KAAKwlB,QACf6I,EAAc7I,EAAQtL,wBACnByL,EAAQuG,OAASmC,GACtB1I,EAAUvb,OAAOub,EAAQuG,MAE3B,OAAQvG,EAAQ1jB,WACd,KAAKujB,EAAQpL,iBAAkB,OAAO1M,EAAAkH,KAAK1R,GAC3C,KAAKsiB,EAAQlL,kBAAmB,OAAO5M,EAAAkH,KAAKzR,IAC5C,KAAKqiB,EAAQjL,kBAAmB,OAAO7M,EAAAkH,KAAKxR,IAC5C,KAAKoiB,EAAQhL,kBAAmB,OAAO9M,EAAAkH,KAAKvR,IAC5C,KAAKmiB,EAAQ/K,iBACb,KAAK+K,EAAQ9K,wBAAyB,OAAOhN,EAAAkH,KAAKrR,GAClD,KAAKiiB,EAAQ7K,kBAAmB,OAAOjN,EAAAkH,KAAKpR,IAC5C,KAAKgiB,EAAQ5K,kBAAmB,OAAOlN,EAAAkH,KAAKnR,IAC5C,KAAK+hB,EAAQ3K,kBAAmB,OAAOnN,EAAAkH,KAAKlR,IAC5C,KAAK8hB,EAAQ1K,kBAAmB,OAAOpN,EAAAkH,KAAK/Q,IAC5C,KAAK2hB,EAAQzK,kBAAmB,OAAOrN,EAAAkH,KAAK9Q,IAC5C,KAAK0hB,EAAQnJ,eAAgB,OAAOjS,OAAOpK,KAAKkuB,mBAAmB1I,EAAQnJ,iBAAiB,GAC5F,QAASjS,QAAO,GAElB,OAAOsD,EAAAkH,KAAKG,MAIdhU,OAAAC,eAAIgrB,EAAA/pB,UAAA,YAAS,KAAb,WACE,IAAIqsB,EAAUtuB,KAAKusB,SACnB,GAAW,GAAP+B,EAAiC,CACnC,IAAIC,EAAWvuB,KAAKwuB,SAASxuB,MACfA,KAAKusB,SAAW+B,EAA1BC,EAAiC,EACT,EAE9B,OAAc,GAAPD,mCAIDtC,EAAA/pB,UAAAusB,SAAR,SAAiBC,EAAcC,WAezB/I,EAJJ,QAX6B,IAAA+I,MAAA,IAAyBvnB,KAWlDunB,EAAOla,IAAIxU,MAAO,OAAO,EAC7B0uB,EAAO1Z,IAAIhV,MAIX,IAeIob,EAfA0D,EAAU9e,KAAK8e,QACnB,GAAIA,MACF,IAAmB,IAAA4H,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAAhC,IAAIqG,EAAMF,EAAA9c,MACb,GACEgd,EAAO7H,MAAQ3F,EAAY8N,OACyB,QAAnD+G,EAAkBrH,EAAQW,KAAK0P,kBAE9BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,oGAQb,IAAKtT,EAAgBpb,KAAKwlB,QAAQnJ,iBAAmBrc,KAAKiC,UAAU6pB,QAAQ1Q,GAAgB,CAC1F,IAAI6Q,EAAgB7hB,OAAOpK,KAAKkuB,mBAAmB9S,IAEnD,GADAhR,OAA+B,GAAxB6hB,EAAc9f,QAE6B,QAA/CwZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKtT,EAAgBpb,KAAKwlB,QAAQjJ,eAAiBvc,KAAKiC,UAAU6pB,QAAQ1Q,GAAgB,CAC3F6Q,EAAgB7hB,OAAOpK,KAAKkuB,mBAAmB9S,IAEnD,GADAhR,OAA+B,GAAxB6hB,EAAc9f,QAE6B,QAA/CwZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKtT,EAAgBpb,KAAKwlB,QAAQhJ,eAAiBxc,KAAKiC,UAAU6pB,QAAQ1Q,GAAgB,CAC3F6Q,EAAgB7hB,OAAOpK,KAAKkuB,mBAAmB9S,IAEnD,GADAhR,OAA+B,GAAxB6hB,EAAc9f,QAE6B,QAA/CwZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/C/I,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAEX1C,EA9UA,CAA2BhG,GAAdtmB,EAAAssB,QAiVb,IAAA9G,EAAA,SAAAjU,GAGE,SAAAiU,EACEtkB,EACAsT,EACAK,EACAJ,UAEAlD,EAAAzQ,KAAAR,KACEY,EACAsT,EACAK,EACAJ,GACA,IACDnU,KAEL,OAjBwCuS,EAAA2S,EAAAjU,GAiBxCiU,EAjBA,CAAwClE,GAA3BthB,EAAAwlB,qBAoBb,IAAA0J,EAAA,SAAA3d,GAGE,SAAA2d,EACEpG,EACAvmB,EACAgqB,EACAC,eADA,IAAAD,MAAA,SACA,IAAAC,MAAA,MAEAjb,EAAAzQ,KAAAR,KACEwoB,EACAvmB,EACAgqB,EACAC,GACA,IACDlsB,KAEL,OAjB+BuS,EAAAqc,EAAA3d,GAiB/B2d,EAjBA,CAA+B5C,GAoB/B,SAAS1B,EAAwB9E,EAAkB5M,GACjDxO,QAAQob,EAAQhU,gBAAgBgD,IAAIoE,EAAQxG,eAC5CoT,EAAQhU,gBAAgBW,IAAIyG,EAAQxG,aAAcwG,GAIpD,SAASmH,EAAS8O,EAAgBC,GAGhC1kB,OAAOykB,EAAMrJ,UAAYsJ,EAAMtJ,SAC/Bpb,QAAQ0kB,EAAMhQ,SACd,IAAIgB,EAAiC,KACrC,OAAQ+O,EAAMpY,MACZ,KAAK3F,EAAYkN,mBACf,OAAQ8Q,EAAMrY,MACZ,KAAK3F,EAAYiW,UACf1B,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,EAC1B,MAEF,KAAK/d,EAAY8V,eACViI,EAAMpJ,aACToJ,EAAMpJ,WAA6BqJ,EACnCzJ,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,GAKhC,MAEF,KAAK/d,EAAYuJ,gBACjB,KAAKvJ,EAAYkW,KACf,GAAI8H,EAAMrY,MAAQ3F,EAAYiW,UAAW,CACvC1B,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,EAC1B,MAEF,MAEF,KAAK/d,EAAYiW,UACf,OAAQ+H,EAAMrY,MACZ,KAAK3F,EAAYkW,KACjB,KAAKlW,EAAYuJ,gBACjB,KAAKvJ,EAAYkN,mBACfqH,EAAYwJ,EAAOC,GACnBhP,EAA0BgP,EAC1B,MAEF,KAAKhe,EAAYiW,UACf1B,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,EAC1B,MAEF,KAAK/d,EAAY8V,eACViI,EAAMpJ,aACToJ,EAAMpJ,WAA6BqJ,EACnCzJ,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,GAKhC,MAEF,KAAK/d,EAAYmQ,OACX6N,EAAMrY,MAAQ3F,EAAY8V,iBACvBiI,EAAMpJ,aACToJ,EAAMpJ,WAA6BqJ,EACnCzJ,EAAYyJ,EAAOD,GACnB/O,EAA0B+O,IAG9B,MAEF,KAAK/d,EAAY8V,eACf,OAAQkI,EAAMrY,MACZ,KAAK3F,EAAYmQ,OACjB,KAAKnQ,EAAYkN,mBACjB,KAAKlN,EAAYiW,UACV+H,EAAMrJ,aACTqJ,EAAMrJ,WAA6BoJ,EACnCxJ,EAAYwJ,EAAOC,GACnBhP,EAA0BgP,IAQhChP,KACkB+O,EAAMvP,GAAG9R,EAAAnL,YAAY6S,SAAW2Z,EAAMxT,aAAatK,EAAekQ,WAClE6N,EAAMxP,GAAG9R,EAAAnL,YAAY6S,SAAW4Z,EAAMzT,aAAatK,EAAekQ,UAEpF4N,EAAMrJ,QAAQnY,MACZI,EAAAhD,eAAeskB,kFACfjP,EAAOtE,eAAezQ,MAAO+U,EAAOtE,eAAevP,OAIzD,OAAO6T,EAIT,SAASuF,EAAY2J,EAAcC,WAC7BC,EAAaF,EAAIlQ,QACrB,GAAIoQ,EAAY,CACd,IAAIC,EAAcF,EAAKnQ,QAClBqQ,IAAaF,EAAKnQ,QAAUqQ,EAAc,IAAI/nB,SACnD,IAAiC,IAAAgoB,EAAArX,EAAAmX,GAAUG,EAAAD,EAAAnX,QAAAoX,EAAAnX,KAAAmX,EAAAD,EAAAnX,OAAE,CAApC,IAAAyO,EAAAtO,EAAAiX,EAAA/tB,MAAA,GAACqlB,EAAAD,EAAA,GAAYpI,EAAAoI,EAAA,GACpByI,EAAYhd,IAAIwU,EAAYrI,uGAMlC,SAAgBuI,EAAmBjmB,EAAcsT,EAAiBob,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1Erb,EAAOuC,MACb,KAAK3F,EAAY4U,KACf,OAAI6J,EAAiB3uB,EACdsT,EAAO9B,aAAe5E,EAAAlL,eAAiB1B,EAEhD,KAAKkQ,EAAY6N,SACf,OAAI4Q,EAAiB3uB,GACrBwJ,QAAQklB,GACDpb,EAAO9B,aAAe5E,EAAA5K,gBAAkBhC,GAEjD,QACE,OAAOimB,EAAmB3S,EAAOtT,KAAMsT,EAAOA,OAAQA,EAAOoL,GAAG9R,EAAAnL,YAAY4iB,UAAWsK,IAC/ED,EAAa9hB,EAAA9K,mBAAqB8K,EAAA7K,kBAAoB/B,GAtJvDlB,EAAAkvB,YAyIblvB,EAAAmnB,sSCz+GA,IAaY2I,EAqBAC,EAlCZjiB,EAAArN,EAAA,IAaA,SAAYqvB,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAOG,sBAAoB,MAC3BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,wBAAsB,MAC7BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,KAAOO,uBAAqB,OAC5BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAR5B,CAAYT,EAAA9vB,EAAA8vB,aAAA9vB,EAAA8vB,WAAU,KAWtB,SAAYU,GACVA,IAAA,QAAUC,2BAAyB,UACnCD,IAAA,eAAiBE,kCAAgC,iBACjDF,IAAA,mBAAqBG,sCAAoC,qBACzDH,IAAA,QAAUI,2BAAyB,UACnCJ,IAAA,WAAaK,8BAA4B,aACzCL,IAAA,QAAUM,2BAAyB,UACnCN,IAAA,kBAAoBO,qCAAmC,oBAPzD,CAAY/wB,EAAAwwB,eAAAxwB,EAAAwwB,aAAY,KAUxB,SAAYT,GACVA,IAAA,QAAUiB,sBAAoB,UAC9BjB,IAAA,MAAQkB,oBAAkB,QAC1BlB,IAAA,GAAKmB,iBAAe,KACpBnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,MAAQqB,oBAAkB,QAC1BrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,KAAOuB,mBAAiB,OACxBvB,IAAA,aAAewB,2BAAyB,eACxCxB,IAAA,SAAWyB,uBAAqB,WAChCzB,IAAA,SAAW0B,uBAAqB,WAChC1B,IAAA,UAAY2B,wBAAsB,YAClC3B,IAAA,UAAY4B,wBAAsB,YAClC5B,IAAA,KAAO6B,mBAAiB,OACxB7B,IAAA,MAAQ8B,oBAAkB,QAC1B9B,IAAA,MAAQ+B,oBAAkB,QAC1B/B,IAAA,MAAQgC,oBAAkB,QAC1BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,OAASkC,qBAAmB,SAC5BlC,IAAA,KAAOmC,mBAAiB,OACxBnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,KAAOqC,mBAAiB,OACxBrC,IAAA,IAAMsC,kBAAgB,MACtBtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,aAAe2C,2BAAyB,eACxC3C,IAAA,YAAc4C,0BAAwB,cACtC5C,IAAA,YAAc6C,0BAAwB,cACtC7C,IAAA,YAAc8C,0BAAwB,cACtC9C,IAAA,cAAgB+C,4BAA0B,gBAC1C/C,IAAA,UAAYgD,wBAAsB,YAClChD,IAAA,WAAaiD,yBAAuB,aACpCjD,IAAA,SAAWkD,uBAAqB,WAChClD,IAAA,WAAamD,yBAAuB,aACpCnD,IAAA,WAAaoD,yBAAuB,aApCtC,CAAYpD,EAAA/vB,EAAA+vB,eAAA/vB,EAAA+vB,aAAY,KAuCxB,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAYz4B,EAAAozB,UAAApzB,EAAAozB,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAYliC,EAAA04B,WAAA14B,EAAA04B,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,WAAaC,uBAAqB,aAClCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAYriC,EAAAmiC,SAAAniC,EAAAmiC,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAY5iC,EAAAsiC,cAAAtiC,EAAAsiC,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAYrjC,EAAA6iC,gBAAA7iC,EAAA6iC,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAY5jC,EAAAsjC,gBAAAtjC,EAAAsjC,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAYzkC,EAAA6jC,cAAA7jC,EAAA6jC,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAAziC,OAAP,SAAc8Q,EAAoBC,GAChC,IAAI2xB,EAAU,IAAID,EAGlB,OAFAC,EAAQ5xB,OAASA,EACjB4xB,EAAQ3xB,OAASA,EACV2xB,GAEXD,EAXA,GAAa1kC,EAAA0kC,gBAab,IAAAE,EAAA,WAyBE,SAAAA,IAwbQtkC,KAAAukC,sBAA6B,EAoO7BvkC,KAAAwkC,sBAA+B,EAmE/BxkC,KAAAykC,cAAmC,IAAIr9B,IA4IjD,OA93BSk9B,EAAA3iC,OAAP,WACE,IAAIhC,EAAS,IAAI2kC,EAGjB,OAFA3kC,EAAOmpB,IAAM4b,wBACb/kC,EAAOglC,IAAMC,OAAOC,SAASC,0BACtBnlC,GAGF2kC,EAAAS,WAAP,SAAkBtyB,GAChB,IAAIuyB,EAAOC,EAAaxyB,GACxB,IACE,IAAI9S,EAAS,IAAI2kC,EAGjB,OAFA3kC,EAAOmpB,IAAMoc,oBAAoBF,EAAMvyB,EAAOtG,QAC9CxM,EAAOglC,IAAMC,OAAOC,SAASC,0BACtBnlC,UAEPilC,OAAOn8B,KAAK08B,WAAkBH,MAQlCV,EAAAriC,UAAAmjC,gBAAA,SACExkC,EACAykC,EACAC,GAEA,IAAIC,EAAOvlC,KAAKwlC,kBAAkB5kC,GAC9BokC,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyB1lC,KAAK8oB,IAAKyc,EAAMF,EAAQL,EAAMM,EAAaA,EAAWn5B,OAAS,WAE/Fy4B,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA0jC,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoC5lC,KAAK8oB,IAAKuc,EAAQL,EAAMM,EAAaA,EAAWn5B,OAAS,WAEpGy4B,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA4jC,mBAAA,SAAmBjlC,GACjB,IAAI2kC,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClCklC,4BAA4B9lC,KAAK8oB,IAAKyc,IAKxCjB,EAAAriC,UAAAmB,IAAA,SAAI9B,GACF,IAAIykC,EAAM/lC,KAAK2kC,IAEf,OADAqB,sBAAsBD,EAAKzkC,GACpB2kC,eAAejmC,KAAK8oB,IAAKid,IAGlCzB,EAAAriC,UAAAoB,IAAA,SAAI6iC,EAAeC,QAAA,IAAAA,MAAA,GACjB,IAAIJ,EAAM/lC,KAAK2kC,IAEf,OADAyB,sBAAsBL,EAAKG,EAAUC,GAC9BF,eAAejmC,KAAK8oB,IAAKid,IAGlCzB,EAAAriC,UAAA4B,IAAA,SAAIvC,GACF,IAAIykC,EAAM/lC,KAAK2kC,IAEf,OADA0B,wBAAwBN,EAAKzkC,GACtB2kC,eAAejmC,KAAK8oB,IAAKid,IAGlCzB,EAAAriC,UAAA6B,IAAA,SAAIxC,GACF,IAAIykC,EAAM/lC,KAAK2kC,IAEf,OADA2B,wBAAwBP,EAAKzkC,GACtB2kC,eAAejmC,KAAK8oB,IAAKid,IAGlCzB,EAAAriC,UAAA8B,KAAA,SAAKwiC,GACHn8B,OAAuB,IAAhBm8B,EAAMp6B,QAEb,IADA,IAAI45B,EAAM/lC,KAAK2kC,IACNtkC,EAAI,EAAGA,EAAI,KAAMA,EAAGmmC,MAAUT,EAAM1lC,EAAGkmC,EAAMlmC,IAEtD,OADAomC,uBAAuBV,EAAKA,GACrBE,eAAejmC,KAAK8oB,IAAKid,IAKlCzB,EAAAriC,UAAAykC,MAAA,SACEC,EACAC,GAEA,OAAOC,eAAe7mC,KAAK8oB,IAAK6d,EAAIC,IAGtCtC,EAAAriC,UAAA6kC,OAAA,SACEH,EACAI,EACAC,GAEA,OAAOC,gBAAgBjnC,KAAK8oB,IAAK6d,EAAII,EAAMC,IAG7C1C,EAAAriC,UAAAilC,KAAA,SACEP,EACA/lC,EACAumC,QADA,IAAAvmC,MAAA,WACA,IAAAumC,MAAA,MAEA,IAAI5B,EAAOvlC,KAAKwlC,kBAAkB5kC,GAC9BokC,EAAOoC,EAAcD,GACzB,IACE,OAAOE,cAAcrnC,KAAK8oB,IAAK6d,EAAIpB,EAAMP,EAAMmC,EAA6BA,EAAUh7B,OAAS,WAE/Fy4B,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAAqlC,UAAA,SACE1f,EACA3I,GAEA,OAAOsoB,kBAAkBvnC,KAAK8oB,IAAKlB,EAAO3I,IAG5CqlB,EAAAriC,UAAAulC,UAAA,SACE5f,EACAtmB,GAEA,OAAOmmC,kBAAkBznC,KAAK8oB,IAAKlB,EAAOtmB,IAG5CgjC,EAAAriC,UAAAylC,WAAA,SACE9mC,EACAqe,GAEA,IAAIsmB,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClC,OAAO+mC,mBAAmB3nC,KAAK8oB,IAAKyc,EAAMtmB,IAG5CqlB,EAAAriC,UAAA2lC,KAAA,SACErB,EACAsB,EACAC,EACA7oB,EACAvM,EACAq1B,GAEA,YAHA,IAAAr1B,MAAA,QACA,IAAAq1B,MAAAxB,GAEOyB,cAAchoC,KAAK8oB,IAAKyd,EAAOsB,EAAS,EAAI,EAAGn1B,EAAQq1B,EAAO9oB,EAAM6oB,IAG7ExD,EAAAriC,UAAAukC,MAAA,SACED,EACAuB,EACAxmC,EACA2d,EACAvM,EACAq1B,GAEA,QAHA,IAAAr1B,MAAA,QACA,IAAAq1B,MAAAxB,GAEItnB,EAAOuQ,EAAWyY,MAAQhpB,EAAOuQ,EAAWzoB,KAAM,MAAM,IAAIqV,MAAM,SAAW6C,GACjF,OAAOipB,eAAeloC,KAAK8oB,IAAKyd,EAAO7zB,EAAQq1B,EAAOD,EAAKxmC,EAAO2d,IAGpEqlB,EAAAriC,UAAAkmC,YAAA,SACE5B,EACAuB,EACA7oB,EACAvM,GAEA,YAFA,IAAAA,MAAA,GAEO01B,oBAAoBpoC,KAAK8oB,IAAKyd,EAAO7zB,EAAQuM,EAAM6oB,IAG5DxD,EAAAriC,UAAAomC,aAAA,SACE9B,EACAuB,EACAxmC,EACA2d,EACAvM,GAEA,YAFA,IAAAA,MAAA,GAEO41B,qBAAqBtoC,KAAK8oB,IAAKyd,EAAO7zB,EAAQo1B,EAAKxmC,EAAO2d,IAGnEqlB,EAAAriC,UAAAsmC,WAAA,SACE5B,EACAJ,EACA7zB,EACAo1B,EACAxmC,EACA2d,GAEA,OAAOupB,mBAAmBxoC,KAAK8oB,IAAK6d,EAAIJ,EAAO7zB,EAAQo1B,EAAKxmC,EAAO2d,IAGrEqlB,EAAAriC,UAAAwmC,eAAA,SACElC,EACA7zB,EACAo1B,EACAY,EACAC,EACA1pB,GAEA,OAAO2pB,uBAAuB5oC,KAAK8oB,IAAKyd,EAAO7zB,EAAQo1B,EAAKY,EAAUC,EAAa1pB,IAGrFqlB,EAAAriC,UAAA4mC,YAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoBhpC,KAAK8oB,IAAKgf,EAAKY,EAAUI,EAASC,IAG/DzE,EAAAriC,UAAAgnC,cAAA,SACEnB,EACAoB,GAEA,OAAOC,sBAAsBnpC,KAAK8oB,IAAKgf,EAAKoB,IAK9C5E,EAAAriC,UAAAmnC,UAAA,SACExhB,EACAtmB,GAEA,OAAO+nC,kBAAkBrpC,KAAK8oB,IAAKlB,EAAOtmB,IAG5CgjC,EAAAriC,UAAAqnC,WAAA,SACE1oC,EACAU,GAEA,IAAIikC,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClC,OAAO2oC,mBAAmBvpC,KAAK8oB,IAAKyc,EAAMjkC,IAG5CgjC,EAAAriC,UAAAunC,MAAA,SACEC,EACAC,EACAzqB,QAAA,IAAAA,MAAmBuQ,EAAWyY,MAE9B,IAAI1C,EAAOvlC,KAAKwlC,kBAAkBiE,GAC9BzE,EAAOoC,EAAcsC,GACzB,IACE,OAAOC,eAAe3pC,KAAK8oB,IAAKyc,EAAMP,EAAM0E,EAASv9B,OAAQ8S,WAE7D2lB,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA2nC,GAAA,SACEH,EACAI,EACAvoC,QADA,IAAAuoC,MAAA,QACA,IAAAvoC,MAAA,GAEA,IAAIikC,EAAOvlC,KAAKwlC,kBAAkBiE,GAClC,OAAOK,eAAe9pC,KAAK8oB,IAAKyc,EAAMsE,EAAWvoC,IAGnDgjC,EAAAriC,UAAA8nC,KAAA,SACEC,GAEA,OAAOC,cAAcjqC,KAAK8oB,IAAKkhB,IAGjC1F,EAAAriC,UAAAioC,KAAA,SACET,EACAzhB,GAEA,IAAIud,EAAOvlC,KAAKwlC,kBAAkBiE,GAClC,OAAOU,cAAcnqC,KAAK8oB,IAAKyc,EAAMvd,IAGvCsc,EAAAriC,UAAAmoC,GAAA,SACEP,EACAQ,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOC,YAAYvqC,KAAK8oB,IAAK+gB,EAAWQ,EAAQC,IAGlDhG,EAAAriC,UAAAuoC,IAAA,WACE,OAAOC,aAAazqC,KAAK8oB,MAG3Bwb,EAAAriC,UAAAyoC,OAAA,SACEV,GAEA,YAFA,IAAAA,MAAA,GAEOW,gBAAgB3qC,KAAK8oB,IAAKkhB,IAGnC1F,EAAAriC,UAAA2oC,OAAA,SACEP,EACAC,EACAT,GAEA,OAAOgB,gBAAgB7qC,KAAK8oB,IAAK+gB,EAAWQ,EAAQC,IAGtDhG,EAAAriC,UAAA6oC,OAAA,SACEC,EACAC,EACAnB,EACAvoC,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI2pC,EAAWF,EAAM5+B,OACjB++B,EAAO,IAAIjkC,MAAagkC,GACnB5qC,EAAI,EAAGA,EAAI4qC,IAAY5qC,EAC9B6qC,EAAK7qC,GAAKL,KAAKwlC,kBAAkBuF,EAAM1qC,IAEzC,IAAI2kC,EAAOS,EAAcyF,GACrB3F,EAAOvlC,KAAKwlC,kBAAkBwF,GAClC,IACE,OAAOG,gBAAgBnrC,KAAK8oB,IAAKkc,EAAMiG,EAAU1F,EAAMsE,EAAWvoC,WAElEsjC,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAAzB,KAAA,SACE6sB,EACA8Z,EACAiE,GAEA,IAAI7F,EAAOvlC,KAAKwlC,kBAAkBnY,GAC9B2X,EAAOoC,EAAcD,GACzB,IACE,OAAOkE,cAAcrrC,KAAK8oB,IAAKyc,EAAMP,EAAMmC,GAAYA,EAASh7B,QAAU,EAAGi/B,WAE7ExG,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAAqpC,cAAA,SACE1jB,EACAuf,EACAoE,GAEA,IAAIhG,EAAOvlC,KAAKwlC,kBAAkB+F,GAC9BvG,EAAOoC,EAAcD,GACzB,IACE,OAAOqE,sBAAsBxrC,KAAK8oB,IAAKlB,EAAOod,EAAMmC,GAAYA,EAASh7B,QAAU,EAAGo5B,WAEtFX,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAAwpC,YAAA,WACE,OAAOC,qBAAqB1rC,KAAK8oB,MAKnCwb,EAAAriC,UAAA0pC,YAAA,SACE1c,EACAtjB,EACAigC,GAEA,OAAOC,oBAAoB7rC,KAAK8oB,IAAKmG,EAAMtjB,EAAQigC,IAGrDtH,EAAAriC,UAAA6pC,YAAA,SACE7c,EACA3tB,EACAsqC,GAEA,OAAOG,oBAAoB/rC,KAAK8oB,IAAKmG,EAAM3tB,EAAOsqC,IAKpDtH,EAAAriC,UAAA+pC,aAAA,SACErF,EACAsF,EACAC,GAEA,OAAOC,qBAAqBnsC,KAAK8oB,IAAK6d,EAAIsF,EAAKC,IAGjD5H,EAAAriC,UAAAmqC,aAAA,SACEzF,EACAsF,EACAC,EACA5qC,GAEA,OAAO+qC,qBAAqBrsC,KAAK8oB,IAAK6d,EAAIsF,EAAKC,EAAK5qC,IAGtDgjC,EAAAriC,UAAAqqC,aAAA,SACEC,EACAC,EACAC,GAEAriC,OAAsB,IAAfqiC,EAAKtgC,QACZ,IAAI64B,EAAOC,EAAawH,GACxB,IACE,OAAOC,qBAAqB1sC,KAAK8oB,IAAKyjB,EAAMC,EAAMxH,WAElDJ,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA0qC,eAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuB7sC,KAAK8oB,IAAKyjB,EAAMC,EAAMI,IAGtDtI,EAAAriC,UAAA6qC,WAAA,SACEnG,EACAsF,EACAc,GAEA,OAAOC,mBAAmBhtC,KAAK8oB,IAAK6d,EAAIsF,EAAKc,IAK/CzI,EAAAriC,UAAAgrC,UAAA,SACErsC,EACAqe,EACAiuB,EACA9lB,GAEA,IAAIme,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClC,OAAOusC,mBAAmBntC,KAAK8oB,IAAKyc,EAAMtmB,EAAMiuB,EAAU,EAAI,EAAG9lB,IAGnEkd,EAAAriC,UAAAmrC,aAAA,SACExsC,GAEA,IAAI2kC,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClCysC,sBAAsBrtC,KAAK8oB,IAAKyc,IAGlCjB,EAAAriC,UAAAqrC,YAAA,SACE1sC,EACAqe,EACAsuB,EACAvlB,GAEA,IAAIud,EAAOvlC,KAAKwlC,kBAAkB5kC,GAC9BokC,EAAOS,EAAc8H,GACzB,IACE,OAAOC,qBAAqBxtC,KAAK8oB,IAAKyc,EAAMtmB,EAAM+lB,EAAMuI,EAAWA,EAASphC,OAAS,EAAG6b,WAExF4c,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAAwrC,eAAA,SAAe7sC,GACb,IAAI2kC,EAAOvlC,KAAKwlC,kBAAkB5kC,GAClC8sC,wBAAwB1tC,KAAK8oB,IAAKyc,IAKpCjB,EAAAriC,UAAA0rC,qBAAA,SAAqBtI,EAAoBC,EAAiCtd,GACxEhoB,KAAKukC,qBAAuBn6B,QAAQpK,KAAKukC,sBACzC,IAAIqJ,EAAW5tC,KAAKwlC,kBAAkB,IAClCR,EAAOS,EAAcH,GACzB,IACE,IAAIuI,EAAUnI,yBAAyB1lC,KAAK8oB,IAAK8kB,EAAUvI,EAAQL,EAAMM,EAAaA,EAAWn5B,OAAS,GAC1G,OAAOqhC,qBAAqBxtC,KAAK8oB,IAAK8kB,EAAUC,EAAS,EAAG,EAAG7lB,WAE/D4c,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA6rC,wBAAA,WACE9tC,KAAKukC,sBAAwBn6B,OAAOpK,KAAKukC,sBACzC,IAAIqJ,EAAW5tC,KAAKwlC,kBAAkB,IACtCkI,wBAAwB1tC,KAAK8oB,IAAK8kB,GAClC9H,4BAA4B9lC,KAAK8oB,IAAK8kB,IAGxCtJ,EAAAriC,UAAA8rC,kBAAA,SACE37B,EACA47B,GAEA,IAAIC,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBwI,GACnC,OAAOG,2BAA2BnuC,KAAK8oB,IAAKmlB,EAAOC,IAGrD5J,EAAAriC,UAAAmsC,eAAA,SACEh8B,EACA47B,GAEA,IAAIC,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBwI,GACnC,OAAOK,wBAAwBruC,KAAK8oB,IAAKmlB,EAAOC,IAGlD5J,EAAAriC,UAAAqsC,gBAAA,SACEl8B,EACA47B,GAEA,IAAIC,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBwI,GACnC,OAAOO,yBAAyBvuC,KAAK8oB,IAAKmlB,EAAOC,IAGnD5J,EAAAriC,UAAAusC,gBAAA,SACEp8B,EACA47B,GAEA,IAAIC,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBwI,GACnC,OAAOS,yBAAyBzuC,KAAK8oB,IAAKmlB,EAAOC,IAGnD5J,EAAAriC,UAAAysC,aAAA,SAAaV,GACX,IAAIzI,EAAOvlC,KAAKwlC,kBAAkBwI,GAClCW,sBAAsB3uC,KAAK8oB,IAAKyc,IAGlCjB,EAAAriC,UAAA2sC,kBAAA,SACEx8B,EACAy8B,EACAC,EACAC,GAEA,IAAId,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBqJ,GAC/BG,EAAQhvC,KAAKwlC,kBAAkBsJ,GACnC,OAAOG,2BAA2BjvC,KAAK8oB,IAAKmlB,EAAOC,EAAOc,EAAOD,IAGnEzK,EAAAriC,UAAAitC,eAAA,SACE98B,EACAy8B,EACAC,GAEA,IAAIb,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBqJ,GAC/BG,EAAQhvC,KAAKwlC,kBAAkBsJ,GACnC,OAAOK,wBAAwBnvC,KAAK8oB,IAAKmlB,EAAOC,EAAOc,IAGzD1K,EAAAriC,UAAAmtC,gBAAA,SACEh9B,EACAy8B,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBqJ,GAC/BG,EAAQhvC,KAAKwlC,kBAAkBsJ,GACnC,OAAOQ,yBAAyBtvC,KAAK8oB,IAAKmlB,EAAOC,EAAOc,EAAOK,IAGjE/K,EAAAriC,UAAAstC,gBAAA,SACEn9B,EACAy8B,EACAC,EACAU,GAEA,IAAIvB,EAAQjuC,KAAKwlC,kBAAkBpzB,GAC/B87B,EAAQluC,KAAKwlC,kBAAkBqJ,GAC/BG,EAAQhvC,KAAKwlC,kBAAkBsJ,GACnC,OAAOW,yBAAyBzvC,KAAK8oB,IAAKmlB,EAAOC,EAAOc,EAAOQ,IAMjElL,EAAAriC,UAAAytC,UAAA,SACEC,EACAC,EACAC,EACAxiB,EACA7T,EACA61B,QADA,IAAA71B,MAAA,WACA,IAAA61B,OAAA,GAQA,IANA,IAAI9J,EAAOvlC,KAAKwlC,kBAAkBhsB,GAC9BpD,EAAIy5B,EAAS1jC,OACb2jC,EAAO,IAAI7oC,MAAamP,GACxB25B,EAAO,IAAI9oC,MAAUmP,GACrB45B,EAAO,IAAI/oC,MAAqBmP,GAChC65B,EAAO,IAAIhpC,MAAamP,GACnB/V,EAAI,EAAGA,EAAI+V,IAAK/V,EAAG,CAC1B,IAAIoS,EAASo9B,EAASxvC,GAAGoS,OACrBC,EAASm9B,EAASxvC,GAAGqS,OACzBo9B,EAAKzvC,GAAK4kC,EAAaxyB,GACvBs9B,EAAK1vC,GAAK,EACV2vC,EAAK3vC,GAAKgtB,GAAU7f,EAAApE,OAAOqM,OACvBzV,KAAKqD,IAAI6sC,QAAQx9B,GAASy9B,SAASz9B,IACnC1S,KAAKoD,IAAI8sC,QAAQx9B,IACrBu9B,EAAK5vC,GAAKoS,EAAOtG,OAEnB,IAAIikC,EAAQ3K,EAAcqK,GACtBO,EAAQpL,EAAa8K,GACrBO,EAAQ7K,EAAcuK,GACtBO,EAAQ9K,EAAcwK,GAC1B,IACEO,mBAAmBxwC,KAAK8oB,IAAK6mB,EAASC,EAASrK,EAAM6K,EAAOC,EAAOC,EAAOC,EAAOn6B,EAAGi5B,WAEpFzK,OAAOn8B,KAAK8nC,GACZ3L,OAAOn8B,KAAK6nC,GACZ1L,OAAOn8B,KAAK4nC,GACZzL,OAAOn8B,KAAK2nC,GACZ,IAAS/vC,EAAI+V,EAAI,EAAG/V,GAAK,IAAKA,EAAGukC,OAAOn8B,KAAKqnC,EAAKzvC,MAItDikC,EAAAriC,UAAAwuC,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAIzF,EAAWyF,EAAMvkC,OACjB4+B,EAAQ,IAAI9jC,MAAagkC,GACpB5qC,EAAI,EAAGA,EAAI4qC,IAAY5qC,EAC9B0qC,EAAM1qC,GAAKL,KAAKwlC,kBAAkBkL,EAAMrwC,IAE1C,IAAI2kC,EAAOS,EAAcsF,GACzB,IACE4F,0BAA0B3wC,KAAK8oB,IAAK6mB,EAASC,EAAS5K,EAAMiG,WAE5DrG,OAAOn8B,KAAKu8B,KAIhBV,EAAAriC,UAAA2uC,SAAA,SAASC,GACPC,kBAAkB9wC,KAAK8oB,IAAK+nB,IAG9BvM,EAAAriC,UAAA8uC,iBAAA,WACE,OAAOC,6BAGT1M,EAAAriC,UAAAgvC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B5M,EAAAriC,UAAAmvC,eAAA,WACE,OAAOC,2BAGT/M,EAAAriC,UAAAqvC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B5M,EAAAriC,UAAAuvC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBnN,EAAAriC,UAAA0vC,YAAA,WACE,OAAOC,2BAA2B5xC,KAAK8oB,MAGzCwb,EAAAriC,UAAA4vC,YAAA,SAAYC,GACVC,2BAA2B/xC,KAAK8oB,IAAKgpB,IAGvCxN,EAAAriC,UAAA+vC,SAAA,SAASnB,QAAA,IAAAA,MAAA,GACHA,EACFoB,0BAA0BpB,EAAM7wC,KAAK8oB,KAErCopB,wBAAwBlyC,KAAK8oB,MAIjCwb,EAAAriC,UAAAkwC,UAAA,SAAUC,EAAkBvB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAI5F,EAAWmH,EAAOjmC,OAClB4+B,EAAQ,IAAI9jC,MAAagkC,GACpB5qC,EAAI,EAAGA,EAAI4qC,IAAY5qC,EAC9B0qC,EAAM1qC,GAAKgyC,EAAYD,EAAO/xC,IAEhC,IAAI2kC,EAAOS,EAAcsF,GACzB,IACM8F,EACFyB,2BAA2BzB,EAAM7wC,KAAK8oB,IAAKkc,EAAMiG,GAEjDsH,yBAAyBvyC,KAAK8oB,IAAKkc,EAAMiG,WAG3CrG,OAAOn8B,KAAKu8B,GACZ,IAAS3kC,EAAI4qC,EAAU5qC,GAAK,IAAKA,EAAGukC,OAAOn8B,KAAKsiC,EAAM1qC,MAM1DikC,EAAAriC,UAAAuwC,qBAAA,SAAqB5L,GAEnB,IAAI6L,EAAwBzB,4BACxB0B,EAAsBrB,0BACtBsB,EAAoBC,wBACxBzB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIzyB,EAAO4zB,2BAA2BjM,GAClCiK,EAAO7wC,KAAK2tC,qBAAqB1uB,EAAM,KAAM2nB,GAC7CmE,EAAQ/qC,KAAKwkC,sBAYjB,OAXKuG,IACH/qC,KAAKwkC,sBAAwBuG,EAAQtF,EAAc,CAAEzlC,KAAKwlC,kBAAkB,iBAE9E8M,2BAA2BzB,EAAM7wC,KAAK8oB,IAAKiiB,EAAO,GAClDnE,EAAOkM,yBAAyBjC,GAChC7wC,KAAK8tC,0BAGLqD,0BAA0BsB,GAC1BlB,wBAAwBmB,GACxBhB,sBAAsBiB,GACf/L,GAGTtC,EAAAriC,UAAA8wC,SAAA,WACE,OAA4C,GAArCC,wBAAwBhzC,KAAK8oB,MAGtCwb,EAAAriC,UAAAgxC,UAAA,WACEC,yBAAyBlzC,KAAK8oB,MAGhCwb,EAAAriC,UAAAkxC,SAAA,SAASC,GACP,IAAIrN,EAAM/lC,KAAK2kC,IACfv6B,OAAO06B,0BAA4B,IACnC,IAAIS,EAAO8M,EAAYe,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCxN,EAAK/lC,KAAK8oB,IAAKyc,GAC/C8N,EAAYG,EAAQzN,GACpB,IAAI0N,EAAcD,EAAQzN,EAAM,GAChCuN,EAAeE,EAAQzN,EAAM,GAC7B,IAAI2N,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OA2jBV,SAAoB9L,EAAY37B,GAE9B,IADA,IAAIunC,EAAM,IAAI7rC,WAAWsE,GAChB9L,EAAW,EAAGA,EAAI8L,IAAU9L,EACnCqzC,EAAIrzC,GAAKunC,KAASE,EAAMznC,GAE1B,OAAOqzC,EAhkBUG,CAAWR,EAAWI,GACnCC,EAAIhpB,UAAYopB,EAAWR,GACpBI,UAEHnO,GAAMX,OAAOn8B,KAAK88B,GAClB8N,GAAWzO,OAAOn8B,KAAK4qC,GACvBC,GAAc1O,OAAOn8B,KAAK6qC,KAIlChP,EAAAriC,UAAA8xC,OAAA,WACE,MAAM,IAAI33B,MAAM,oBAGlBkoB,EAAAriC,UAAA+xC,QAAA,WACE,MAAM,IAAI53B,MAAM,oBAKVkoB,EAAAriC,UAAAujC,kBAAR,SAA0ByO,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAIxP,EAAgBzkC,KAAKykC,cACzB,GAAIA,EAAcjwB,IAAIy/B,GAAM,OAAcxP,EAAcvjC,IAAI+yC,GAC5D,IAAInM,EAAMuK,EAAY4B,GAEtB,OADAxP,EAActyB,IAAI8hC,EAAKnM,GAChBA,GAGTxD,EAAAriC,UAAAiyC,QAAA,mBACE9pC,OAAOpK,KAAK8oB,SACZ,IAAgB,IAAApC,EAAA3O,EAAA/X,KAAKykC,cAAclnB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAA,CAAtC,IAAI6vB,EAAG1pB,EAAA9c,MAAiCsjC,OAAOn8B,KAAKq/B,qGACzD9nC,KAAKykC,cAAgB,IAAIr9B,IACzBw9B,OAAOn8B,KAAKzI,KAAK2kC,KACjBC,OAAOn8B,KAAKzI,KAAKwkC,uBACjBxkC,KAAKwkC,sBAAwB,EAC7B2P,uBAAuBn0C,KAAK8oB,KAC5B9oB,KAAK8oB,IAAM,GAGbwb,EAAAriC,UAAAmyC,eAAA,WACE,OAAOC,EAAS1yC,OAAO3B,OAGzBskC,EAAAriC,UAAAqyC,gBAAA,SACE1N,EACA2N,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBpxC,IAAIqxC,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEA,OALJH,GAAY,EAKAI,yBAAyBhO,IACnC,KAAKnX,EAAaolB,MAChB,OAAQhC,2BAA2BjM,IACjC,KAAKpX,EAAWppB,IACd,OAAOpG,KAAKoD,IAAI0xC,0BAA0BlO,IAE5C,KAAKpX,EAAWnpB,IACd,OAAOrG,KAAKqD,IACV0xC,6BAA6BnO,GAC7BoO,8BAA8BpO,IAGlC,KAAKpX,EAAW3oB,IACd,OAAO7G,KAAK6D,IAAIoxC,0BAA0BrO,IAE5C,KAAKpX,EAAW1oB,IACd,OAAO9G,KAAK8D,IAAIoxC,0BAA0BtO,IAE5C,KAAKpX,EAAWzoB,KAEd,OAAO,EAET,QACE,MAAM,IAAIqV,MAAM,0BAItB,KAAKqT,EAAa0lB,SAChB,OAAO5N,kBAAkBvnC,KAAK8oB,IAC5BssB,0BAA0BxO,GAC1BiM,2BAA2BjM,IAG/B,KAAKnX,EAAa4lB,UAChB,IAAIC,EAAaC,0BAA0B3O,GAC3C,IAAK0O,EAAY,MACjB,OAAO3N,mBAAmB3nC,KAAK8oB,IAAKwsB,EAAYzC,2BAA2BjM,IAE7E,KAAKnX,EAAa+lB,KAChB,KAAMd,EAAU10C,KAAKs0C,gBAAgBmB,oBAAoB7O,GAAO2N,EAAeC,IAC7E,MAEF,OACEkB,sBAAsB9O,GAClBwB,oBAAoBpoC,KAAK8oB,IACvB6sB,sBAAsB/O,GACtBgP,uBAAuBhP,GACvBiM,2BAA2BjM,GAC3B8N,GAEF1M,cAAchoC,KAAK8oB,IACjB6sB,sBAAsB/O,GACtBiP,sBAAsBjP,GAAQ,EAAI,EAClCgP,uBAAuBhP,GACvBkP,sBAAsBlP,GACtBiM,2BAA2BjM,GAC3B8N,GAIV,KAAKjlB,EAAasmB,MAChB,KAAMrB,EAAU10C,KAAKs0C,gBAAgB0B,uBAAuBpP,GAAO2N,EAAeC,IAChF,MAEF,OAAO3N,eAAe7mC,KAAK8oB,IAAKmtB,oBAAoBrP,GAAO8N,GAE7D,KAAKjlB,EAAaymB,OAChB,KAAMxB,EAAU10C,KAAKs0C,gBAAgB6B,uBAAuBvP,GAAO2N,EAAeC,IAChF,MAEF,KAAMG,EAAU30C,KAAKs0C,gBAAgB8B,wBAAwBxP,GAAO2N,EAAeC,IACjF,MAEF,OAAOvN,gBAAgBjnC,KAAK8oB,IAAKutB,qBAAqBzP,GAAO8N,EAASC,GAG1E,OAAO,GAKTrQ,EAAAriC,UAAAq0C,iBAAA,SAAiB11C,GACf,IAAI2kC,EAAO8M,EAAYzxC,GACvB,IACE,OAAO21C,oCAAoCv2C,KAAK8oB,IAAKyc,WAErDX,OAAOn8B,KAAK88B,KAIhBjB,EAAAriC,UAAAu0C,iBAAA,SAAiB5uB,GACf,OAAOksB,EAAW2C,oCAAoCz2C,KAAK8oB,IAAKlB,KAGlE0c,EAAAriC,UAAA2oB,iBAAA,SACEimB,EACAjK,EACA8P,EACAC,EACAC,GAEAC,kCAAkChG,EAAMjK,EAAM8P,EAAWC,EAAYC,IAnUvDtS,EAAAwS,kBAAkC,EAqUpDxS,EAp4BA,GAw4BA,SAAgByS,EAAgBnQ,GAC9B,OAAOgO,yBAAyBhO,GAz4BrBlnC,EAAA4kC,SAw4Bb5kC,EAAAq3C,kBAIAr3C,EAAAs3C,kBAAA,SAAkCpQ,GAChC,OAAOiM,2BAA2BjM,IAGpClnC,EAAAu3C,iBAAA,SAAiCrQ,GAC/B,OAAOkO,0BAA0BlO,IAGnClnC,EAAAw3C,oBAAA,SAAoCtQ,GAClC,OAAOmO,6BAA6BnO,IAGtClnC,EAAAy3C,qBAAA,SAAqCvQ,GACnC,OAAOoO,8BAA8BpO,IAGvClnC,EAAA03C,iBAAA,SAAiCxQ,GAC/B,OAAOqO,0BAA0BrO,IAGnClnC,EAAA23C,iBAAA,SAAiCzQ,GAC/B,OAAOsO,0BAA0BtO,IAGnClnC,EAAA43C,iBAAA,SAAiC1Q,GAC/B,OAAOwO,0BAA0BxO,IAGnClnC,EAAA63C,iBAAA,SAAiC3Q,GAC/B,OAAO4Q,0BAA0B5Q,IAGnClnC,EAAA+3C,iBAAA,SAAiC7Q,GAC/B,OAAO8Q,0BAA0B9Q,IAGnClnC,EAAAi4C,WAAA,SAA2B/Q,GACzB,OAAOgR,uBAAuBhR,IAGhClnC,EAAAm4C,iBAAA,SAAiCjR,GAC/B,OAAOkN,EAAWyB,0BAA0B3O,KAG9ClnC,EAAAo4C,YAAA,SAA4BlR,GAC1B,OAAOyP,qBAAqBzP,IAG9BlnC,EAAAq4C,cAAA,SAA8BnR,GAC5B,OAAOuP,uBAAuBvP,IAGhClnC,EAAAs4C,eAAA,SAA+BpR,GAC7B,OAAOwP,wBAAwBxP,IAGjClnC,EAAAu4C,WAAA,SAA2BrR,GACzB,OAAOqP,oBAAoBrP,IAG7BlnC,EAAAw4C,cAAA,SAA8BtR,GAC5B,OAAOoP,uBAAuBpP,IAGhClnC,EAAAy4C,aAAA,SAA6BvR,GAC3B,OAAO+O,sBAAsB/O,IAG/BlnC,EAAA04C,cAAA,SAA8BxR,GAC5B,OAAOgP,uBAAuBhP,IAGhClnC,EAAA24C,WAAA,SAA2BzR,GACzB,OAAO6O,oBAAoB7O,IAG7BlnC,EAAA44C,aAAA,SAA6B1R,GAC3B,OAAOiP,sBAAsBjP,IAG/BlnC,EAAA64C,cAAA,SAA8B3R,GAC5B,OAAO4R,uBAAuB5R,IAGhClnC,EAAA+4C,eAAA,SAA+B7R,GAC7B,OAAO8R,wBAAwB9R,IAGjClnC,EAAAi5C,YAAA,SAA4B/R,GAC1B,OAAOgS,qBAAqBhS,IAG9BlnC,EAAAm5C,cAAA,SAA8BjS,GAC5B,OAAOkS,uBAAuBlS,IAGhClnC,EAAAq5C,aAAA,SAA6BnS,GAC3B,OAAOkN,EAAWkF,sBAAsBpS,KAG1ClnC,EAAAu5C,mBAAA,SAAmCrS,GACjC,OAAOsS,6BAA6BtS,IAGtClnC,EAAAy5C,cAAA,SAA8BvS,EAAqBhf,GACjD,OAAOwxB,uBAAuBxS,EAAMhf,IAGtCloB,EAAA25C,eAAA,SAA+BzS,GAC7B,OAAO0S,wBAAwB1S,IAGjClnC,EAAA65C,UAAA,SAA0B3S,GACxB,OAAO4S,qBAAqB5S,IAG9BlnC,EAAA+5C,WAAA,SAA2B7S,GACzB,OAAO8S,sBAAsB9S,IAG/BlnC,EAAAi6C,YAAA,SAA4B/S,GAC1B,OAAOkN,EAAW8F,qBAAqBhT,KAGzClnC,EAAAm6C,YAAA,SAA4BjT,GAC1B,OAAOkT,qBAAqBlT,IAG9BlnC,EAAAq6C,aAAA,SAA6BnT,GAC3B,OAAOkN,EAAWkG,sBAAsBpT,KAG1ClnC,EAAAu6C,kBAAA,SAAkCrT,GAChC,OAAOsT,2BAA2BtT,IAGpClnC,EAAAy6C,cAAA,SAA8BvT,GAC5B,OAAOwT,yBAAyBxT,IAGlClnC,EAAA26C,cAAA,SAA8BzT,GAC5B,OAAO0T,0BAA0B1T,IAGnClnC,EAAA66C,mBAAA,SAAmC3T,GACjC,OAAO4T,4BAA4B5T,IAGrClnC,EAAA+6C,aAAA,SAA6B7T,GAC3B,OAAO8T,sBAAsB9T,IAG/BlnC,EAAAi7C,eAAA,SAA+B/T,GAC7B,OAAOgU,wBAAwBhU,IAGjClnC,EAAAm7C,cAAA,SAA8BjU,GAC5B,OAAOkN,EAAWgH,uBAAuBlU,KAG3ClnC,EAAAq7C,oBAAA,SAAoCnU,GAClC,OAAOoU,4BAA4BpU,IAGrClnC,EAAAu7C,eAAA,SAA+BrU,EAAqBhf,GAClD,OAAOszB,wBAAwBtU,EAAMhf,IAGvCloB,EAAAy7C,UAAA,SAA0BvU,GACxB,OAAOwU,mBAAmBxU,IAG5BlnC,EAAA27C,oBAAA,SAAoCzU,GAClC,OAAO0U,4BAA4B1U,IAGrClnC,EAAA67C,eAAA,SAA+B3U,EAAqBhf,GAClD,OAAO4zB,wBAAwB5U,EAAMhf,IAGvCloB,EAAA+7C,YAAA,SAA4B7U,GAC1B,OAAOkN,EAAW4H,4BAA4B9U,KAKhDlnC,EAAAi8C,gBAAA,SAAgC9K,GAC9B,OAAOiC,yBAAyBjC,IAGlCnxC,EAAAk8C,gBAAA,SAAgC/K,GAC9B,OAAOiD,EAAW+H,yBAAyBhL,KAG7CnxC,EAAAo8C,sBAAA,SAAsCjL,GACpC,OAAOkL,8BAA8BlL,IAGvCnxC,EAAAs8C,qBAAA,SAAqCnL,EAAmBjpB,GACtD,OAAOq0B,0BAA0BpL,EAAMjpB,IAGzCloB,EAAAw8C,sBAAA,SAAsCrL,GACpC,OAAOsL,2BAA2BtL,IAGpC,IAAAwD,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAA1yC,OAAP,SAAchC,GACZ,IAAIy8C,EAAW,IAAI/H,EAGnB,OAFA+H,EAASz8C,OAASA,EAClBy8C,EAAStzB,IAAMuzB,gBAAgB18C,EAAOmpB,KAC/BszB,GAKT/H,EAAApyC,UAAAq6C,SAAA,SAASzxC,GACP,OAAO0xC,kBAAkBv8C,KAAK8oB,IAAKje,IAGrCwpC,EAAApyC,UAAAu6C,UAAA,SACEC,EACAC,EACA7S,EACAh/B,QADA,IAAAg/B,MAAA,QACA,IAAAh/B,MAAA,GAEA8xC,mBAAmBF,EAAMC,EAAI7S,EAAWh/B,IAG1CwpC,EAAApyC,UAAA26C,mBAAA,SAAmB/xC,EAAqBg/B,GACtC,OAAOgT,4BAA4B78C,KAAK8oB,IAAKje,EAAMg/B,IAGrDwK,EAAApyC,UAAA66C,mBAAA,SACEL,EACAC,EACAK,EACAlyC,QAAA,IAAAA,MAAA,GAEA,IAAIm6B,EAAOS,EAAcsX,GACzB,IACEC,4BAA4BP,EAAMC,EAAI1X,EAAM+X,EAAQ5wC,OAAQtB,WAE5D+5B,OAAOn8B,KAAKu8B,KAIhBqP,EAAApyC,UAAAg7C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bp9C,KAAK8oB,IAAKo0B,EAAOC,IAEtD9I,EAhDA,GA4FA,SAASpP,EAAaoY,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIlxC,OAChB27B,EAAMlD,OAAOC,SAASyY,GACtBpR,EAAMpE,EACDznC,EAAI,EAAGA,EAAIi9C,IAAaj9C,EAC/BmmC,MAAU0F,IAAOmR,EAAIh9C,IAEvB,OAAOynC,EAGT,SAASrC,EAAc8X,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIzV,EAAMlD,OAAOC,SAAS0Y,EAAKpxC,QAAU,GACrC+/B,EAAMpE,EACDznC,EAAI,EAAG+V,EAAImnC,EAAKpxC,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAC3C,IAAIm9C,EAAMD,EAAKl9C,GAEfmmC,MAAU0F,EAAyB,IAAdsR,GACrBhX,MAAU0F,EAAM,EAAKsR,GAAS,EAAK,KACnChX,MAAU0F,EAAM,EAAKsR,GAAQ,GAAM,KACnChX,MAAU0F,EAAM,EAAKsR,IAAQ,IAC7BtR,GAAO,EAET,OAAOpE,EAGT,SAASV,EAAcqW,GACrB,OAAOhY,EAAcgY,GA2BvB,SAASpL,EAAY4B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAInM,EAAMlD,OAAOC,SA1BnB,SAA0BoP,GAExB,IADA,IAAI/nC,EAAM,EACD7L,EAAI,EAAG+V,EAAI69B,EAAI9nC,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAC1C,IAAIq9C,EAAIzJ,EAAI1nC,WAAWlM,GACnBq9C,GAAK,OAAUA,GAAK,OAAUr9C,EAAI,EAAI+V,IACxCsnC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBzJ,EAAI1nC,aAAalM,IAEpDq9C,GAAK,MACLxxC,EAEFA,GADSwxC,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOxxC,EAKmByxC,CAAiB1J,GAAO,GAE9C/H,EAAMpE,EACDznC,EAAI,EAAG+V,EAAI69B,EAAI9nC,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAC1C,IAAIq9C,EAAIzJ,EAAI1nC,WAAWlM,GACnBq9C,GAAK,OAAUA,GAAK,OAAUr9C,EAAI,EAAI+V,IACxCsnC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBzJ,EAAI1nC,aAAalM,IAEpDq9C,GAAK,IACPlX,MAAU0F,IAAOwR,GACRA,GAAK,MACdlX,MAAU0F,IAAQ,IAASwR,IAAM,GACjClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,OACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,SACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,UACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,KAE3BlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAI/B,OADAlX,MAAU0F,EAAK,GACRpE,EAGT,SAAS0L,EAAQ1L,GACf,OACGF,KAASE,GACTF,KAASE,EAAM,IAAO,EACtBF,KAASE,EAAM,IAAM,GACrBF,KAASE,EAAM,IAAM,GAY1B,SAAgBgM,EAAWhM,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI8V,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIh3C,MAIP22C,EAAKhW,KAASE,MACR,IAAL8V,GAINC,EAAuB,GAAlBjW,KAASE,KACK,MAAT,IAAL8V,IAILE,EAAuB,GAAlBlW,KAASE,KACK,MAAT,IAAL8V,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBnW,KAASE,KACK,MAAT,IAAL8V,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBpW,KAASE,KAEZ8V,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBpW,KAASE,OAKpBmW,EAAIvxC,KAAKkxC,IApBPK,EAAIvxC,MAAY,GAALkxC,IAAY,EAAKC,IAL5BI,EAAIvxC,KAAKkxC,GAmCb,OAAO52C,OAAOk3C,eAAeD,GA1PlBv+C,EAAA20C,WA+Mb30C,EAAAo0C,aA+CA,IAAAH,EAAA,WAKA,OALA,gBAAaj0C,EAAAi0C,eAQbj0C,EAAAy+C,yBAAA,SAAgBA,EAAyBvX,GAEvC,GAAIiM,2BAA2BjM,IAASpX,EAAW4uB,YAAa,OAAO,EAEvE,OAAQxJ,yBAAyBhO,IAC/B,KAAKnX,EAAa2uB,YAClB,KAAK3uB,EAAa4uB,OAAQ,OAAO,EACjC,KAAK5uB,EAAa6uB,MAAO,OAA2C,GAApCpE,2BAA2BtT,GAC3D,KAAKnX,EAAa8uB,MAChB,IAAKvF,sBAAsBpS,GAAO,CAChC,IAAI4X,EAActF,6BAA6BtS,GAC/C,OAAO4X,EAAc,GAAKL,EAAyB/E,uBAAuBxS,EAAM4X,EAAc,KAIpG,OAAO,GAIT9+C,EAAA++C,SAAA,SAA4B7X,EAAqB8X,EAAS31C,GACxD,OAAQguC,EAAgBnQ,IACtB,KAAKnX,EAAa8uB,MAChB,IAAK,IAAIl+C,EAAI,EAAGyB,EAAIo3C,6BAA6BtS,GAAOvmC,EAAIyB,IAAKzB,EAC/D0I,EAAMqwC,uBAAuBxS,EAAMvmC,GAAIq+C,GAEzC,MAEF,KAAKjvB,EAAakvB,GAChB51C,EAAMuwC,wBAAwB1S,GAAO8X,GACrC31C,EAAMywC,qBAAqB5S,GAAO8X,GAClC,IAAIpU,EAAUoP,sBAAsB9S,GAChC0D,GAASvhC,EAAMuhC,EAASoU,GAC5B,MAEF,KAAKjvB,EAAamvB,KAChB71C,EAAM+wC,qBAAqBlT,GAAO8X,GAClC,MAEF,KAAKjvB,EAAa6uB,MAChB,IAAIzU,EAAYqQ,2BAA2BtT,GACvCiD,GAAW9gC,EAAM8gC,EAAW6U,GAChC,MAEF,KAAKjvB,EAAaovB,OAChB91C,EAAM+1C,4BAA4BlY,GAAO8X,GACzC,MAEF,KAAKjvB,EAAasvB,KAChB,IAAS1+C,EAAI,EAAGyB,EAAIk5C,4BAA4BpU,GAAOvmC,EAAIyB,IAAKzB,EAC9D0I,EAAMmyC,wBAAwBtU,EAAMvmC,GAAIq+C,GAE1C,MAEF,KAAKjvB,EAAauvB,aAChB,IAAS3+C,EAAI,EAAGyB,EAAIm9C,oCAAoCrY,GAAOvmC,EAAIyB,IAAKzB,EACtE0I,EAAMm2C,gCAAgCtY,EAAMvmC,GAAIq+C,GAElD,MAEF,KAAKjvB,EAAa0lB,SAChB,MAEF,KAAK1lB,EAAa0vB,SAChBp2C,EAAM2uC,0BAA0B9Q,GAAO8X,GACvC,MAEF,KAAKjvB,EAAa4lB,UAChB,MAEF,KAAK5lB,EAAa2vB,UAChBr2C,EAAMs2C,2BAA2BzY,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa+lB,KAChBzsC,EAAM0sC,oBAAoB7O,GAAO8X,GACjC,MAEF,KAAKjvB,EAAa6vB,MAChBv2C,EAAM6vC,qBAAqBhS,GAAO8X,GAClC31C,EAAM+vC,uBAAuBlS,GAAO8X,GACpC,MAEF,KAAKjvB,EAAa8vB,UAChBx2C,EAAMy2C,yBAAyB5Y,GAAO8X,GACtC31C,EAAM02C,2BAA2B7Y,GAAO8X,GACxC,MAEF,KAAKjvB,EAAaiwB,cAChB32C,EAAM42C,6BAA6B/Y,GAAO8X,GAC1C31C,EAAM62C,kCAAkChZ,GAAO8X,GAC/C31C,EAAM82C,qCAAqCjZ,GAAO8X,GAClD,MAEF,KAAKjvB,EAAaqwB,WAChB/2C,EAAMg3C,0BAA0BnZ,GAAO8X,GACvC31C,EAAMi3C,+BAA+BpZ,GAAO8X,GAC5C31C,EAAMk3C,8BAA8BrZ,GAAO8X,GAC3C,MAEF,KAAKjvB,EAAaywB,aAChBn3C,EAAMo3C,4BAA4BvZ,GAAO8X,GACzC,MAEF,KAAKjvB,EAAa2wB,YAChBr3C,EAAMs3C,2BAA2BzZ,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa6wB,YAChBv3C,EAAMw3C,2BAA2B3Z,GAAO8X,GACxC31C,EAAMy3C,6BAA6B5Z,GAAO8X,GAC1C,MAEF,KAAKjvB,EAAagxB,YAChB13C,EAAM23C,4BAA4B9Z,GAAO8X,GACzC31C,EAAM43C,6BAA6B/Z,GAAO8X,GAC1C,MAEF,KAAKjvB,EAAamxB,cAChB73C,EAAM83C,8BAA8Bja,GAAO8X,GAC3C31C,EAAM+3C,+BAA+Bla,GAAO8X,GAC5C31C,EAAMg4C,8BAA8Bna,GAAO8X,GAC3C,MAEF,KAAKjvB,EAAauxB,UAChBj4C,EAAMk4C,yBAAyBra,GAAO8X,GACtC31C,EAAMm4C,2BAA2Bta,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa0xB,WAChBp4C,EAAMq4C,2BAA2Bxa,GAAO8X,GACxC31C,EAAMs4C,6BAA6Bza,GAAO8X,GAC1C31C,EAAMu4C,2BAA2B1a,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa8xB,SAChB,MAEF,KAAK9xB,EAAa+xB,WAChBz4C,EAAM04C,2BAA2B7a,GAAO8X,GACxC31C,EAAM24C,6BAA6B9a,GAAO8X,GAC1C31C,EAAM44C,2BAA2B/a,GAAO8X,GACxC,MAEF,KAAKjvB,EAAamyB,WAChB74C,EAAM84C,2BAA2Bjb,GAAO8X,GACxC31C,EAAM+4C,4BAA4Blb,GAAO8X,GACzC31C,EAAMg5C,2BAA2Bnb,GAAO8X,GACxC,MAEF,KAAKjvB,EAAaolB,MAChB,MAEF,KAAKplB,EAAasmB,MAChBhtC,EAAMitC,uBAAuBpP,GAAO8X,GACpC,MAEF,KAAKjvB,EAAaymB,OAChBntC,EAAMotC,uBAAuBvP,GAAO8X,GACpC31C,EAAMqtC,wBAAwBxP,GAAO8X,GACrC,MAEF,KAAKjvB,EAAauyB,OAChBj5C,EAAMqxC,yBAAyBxT,GAAO8X,GACtC31C,EAAMuxC,0BAA0B1T,GAAO8X,GACvC31C,EAAMyxC,4BAA4B5T,GAAO8X,GACzC,MAEF,KAAKjvB,EAAawyB,KAChBl5C,EAAM2xC,sBAAsB9T,GAAO8X,GACnC,MAEF,KAAKjvB,EAAa4uB,OAChBt1C,EAAM6xC,wBAAwBhU,GAAO8X,GACrC,MAEF,KAAKjvB,EAAayyB,KAChB,IAAS7hD,EAAI,EAAGyB,EAAIw5C,4BAA4B1U,GAAOvmC,EAAIyB,IAAKzB,EAC9D0I,EAAMyyC,wBAAwB5U,EAAMvmC,GAAIq+C,GAE1C,MAEF,KAAKjvB,EAAa0yB,IAGlB,KAAK1yB,EAAa2uB,YAChB,MAEF,QAASh0C,QAAO,GAElB,OAAO,kaCv6DT,IAAAoD,EAAArN,EAAA,GAOAiiD,EAAAjiD,EAAA,GAYST,EAAA2iD,MAXPD,EAAAC,MAWc3iD,EAAAic,MATdymC,EAAAzmC,MAGF,IASYjF,EATZ7M,EAAA1J,EAAA,IASA,SAAYuW,GAEVA,IAAA,mBAGAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBA1EF,CAAYA,EAAAhX,EAAAgX,WAAAhX,EAAAgX,SAAQ,KA8EpBhX,EAAA4iD,oBAAA,SAAoC7rC,GAClC,OAAQA,GACN,KAAKC,EAASwM,QACd,KAAKxM,EAAS6rC,KACd,KAAK7rC,EAAS8rC,KACd,KAAK9rC,EAAS+rC,MAAO,OAAO,EAE9B,OAAO,GAIT/iD,EAAAgjD,eAAA,SAA+BjsC,GAC7B,OAAQA,GACN,KAAKC,EAASisC,WACd,KAAKjsC,EAASksC,UACd,KAAKlsC,EAASmsC,KACd,KAAKnsC,EAASosC,cACd,KAAKpsC,EAASqsC,cACd,KAAKrsC,EAASssC,eACd,KAAKtsC,EAASusC,MAAO,OAAO,EAE9B,OAAO,GAITvjD,EAAAwjD,sBAAA,SAAsCzsC,GACpC,OAAQA,GACN,KAAKC,EAASisC,WACd,KAAKjsC,EAASssC,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAA9vC,EAAA,oBAAAA,KA66BA,OAp6BSA,EAAAiwC,eAAP,SACEviD,EACAmK,GAEA,IAAIwgC,EAAW,IAAI6X,EAInB,OAHA7X,EAASxgC,MAAQA,EACjBwgC,EAASj4B,WAAa1S,EACtB2qC,EAAStzB,KAAO,KACTszB,GAGFr4B,EAAAW,qBAAP,SACEjT,EACAmK,GAEA,OAAOmI,EAAKiwC,eAAejwC,EAAKE,2BAA2BxS,EAAMmK,GAAQA,IAGpEmI,EAAAU,gBAAP,SACEhT,EACAqrB,EACAo3B,EACAt4C,GAEA,IAAIkU,EAAO,IAAIqkC,EAKf,OAJArkC,EAAKlU,MAAQA,EACbkU,EAAKre,KAAOA,EACZqe,EAAKgN,cAAgBA,EACrBhN,EAAKokC,WAAaA,EACXpkC,GAGF/L,EAAAS,mBAAP,SACE4vC,EACAnY,EACAoY,EACAH,EACAt4C,GAEA,IAAIkU,EAAO,IAAIwkC,EAMf,OALAxkC,EAAKlU,MAAQA,EACbkU,EAAKskC,WAAaA,EAClBtkC,EAAKmsB,WAAaA,EAClBnsB,EAAKukC,iBAAmBA,EACxBvkC,EAAKokC,WAAaA,EACXpkC,GAGF/L,EAAAM,kBAAP,SACEzI,GAEA,OAAOmI,EAAKU,gBACVV,EAAKW,qBAAqB,GAAI9I,GAC9B,MACA,EACAA,IAIGmI,EAAAwwC,oBAAP,SACE9iD,EACA0gB,EACAqiC,EACA54C,GAEA,IAAI64C,EAAO,IAAIC,EAKf,OAJAD,EAAK74C,MAAQA,EACb64C,EAAKhjD,KAAOA,EACZgjD,EAAKtiC,YAAcA,EACnBsiC,EAAKD,YAAcA,EACZC,GAGF1wC,EAAA4wC,gBAAP,SACEljD,EACAqe,EACAmI,EACA3Q,EACA1L,GAEA,IAAI64C,EAAO,IAAIG,EAMf,OALAH,EAAK74C,MAAQA,EACb64C,EAAKhjD,KAAOA,EACZgjD,EAAK3kC,KAAOA,EACZ2kC,EAAKx8B,YAAcA,EACnBw8B,EAAKI,cAAgBvtC,EACdmtC,GAKF1wC,EAAA+wC,gBAAP,SACErjD,EACAsjD,EACAn5C,GAEA,IAAIo5C,EAAO,IAAIC,EAKf,OAJAD,EAAKp5C,MAAQA,EACbo5C,EAAKvjD,KAAOA,EACZujD,EAAKnhC,UAAYkhC,EACjBC,EAAK31C,cAAgBoS,EAAoBhgB,GAClCujD,GAGFjxC,EAAAmxC,cAAP,SACEp4C,EACAwK,EACA1L,GAEA,IAAIu5C,EAAO,IAAIC,EAIf,OAHAD,EAAKv5C,MAAQA,EACbu5C,EAAKE,YAAc/tC,EACnB6tC,EAAKr4C,KAAOA,EACLq4C,GAKFpxC,EAAAE,2BAAP,SACExS,EACAmK,EACA05C,QAAA,IAAAA,OAAA,GAEA,IAAI7d,EAAO,IAAI8d,EAKf,OAJA9d,EAAK77B,MAAQA,EACb67B,EAAK36B,KAAOrL,EACZgmC,EAAK+d,OAAS/jD,EACdgmC,EAAK6d,SAAWA,EACT7d,GAGF1zB,EAAA0xC,gCAAP,SACE75C,GAEA,IAAI67B,EAAO,IAAI8d,EAGf,OAFA9d,EAAK77B,MAAQA,EACb67B,EAAK36B,KAAO,GACL26B,GAGF1zB,EAAA2xC,6BAAP,SACE5kC,EACAlV,GAEA,IAAI67B,EAAO,IAAIke,EAGf,OAFAle,EAAK77B,MAAQA,EACb67B,EAAKme,mBAAqB9kC,EACnB2mB,GAGF1zB,EAAA8xC,0BAAP,SACEC,EACAjb,EACAkb,EACAn6C,GAEA,IAAI67B,EAAO,IAAIue,EAKf,OAJAve,EAAK77B,MAAQA,EACb67B,EAAKqe,cAAgBA,EACrBre,EAAKoD,WAAaA,EAClBpD,EAAKse,OAASA,EACPte,GAGF1zB,EAAAkyC,uBAAP,SACEC,EACAte,EACAC,EACAj8B,GAEA,IAAI67B,EAAO,IAAI0e,EAKf,OAJA1e,EAAK77B,MAAQA,EACb67B,EAAKye,SAAWA,EAChBze,EAAKG,KAAOA,EACZH,EAAKI,MAAQA,EACNJ,GAGF1zB,EAAAqyC,qBAAP,SACEvb,EACAwb,EACAtB,EACAn5C,GAEA,IAAI67B,EAAO,IAAI6e,EAKf,OAJA7e,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EAClBpD,EAAK3a,cAAgBu5B,EACrB5e,EAAK5jB,UAAYkhC,EACVtd,GAGF1zB,EAAAwyC,sBAAP,SACEnxC,GAEA,IAAIqyB,EAAO,IAAI+e,EAGf,OAFA/e,EAAK77B,MAAQwJ,EAAYxJ,MACzB67B,EAAKryB,YAAcA,EACZqyB,GAGF1zB,EAAA0yC,sBAAP,SACEC,EACA96C,GAEA,IAAI67B,EAAO,IAAIkf,EAGf,OAFAlf,EAAK77B,MAAQA,EACb67B,EAAKif,YAAcA,EACZjf,GAGF1zB,EAAA6yC,4BAAP,SACEh7C,GAEA,IAAI67B,EAAO,IAAIof,EAEf,OADApf,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAA+yC,8BAAP,SACEjc,EACApxB,EACA7N,GAEA,IAAI67B,EAAO,IAAIsf,EAIf,OAHAtf,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EAClBpD,EAAKuf,kBAAoBvtC,EAClBguB,GAGF1zB,EAAAkzC,sBAAP,SACEr7C,GAEA,IAAI67B,EAAO,IAAIyf,EAEf,OADAzf,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAAozC,6BAAP,SACEhlD,EACAyJ,GAEA,IAAI67B,EAAO,IAAI2f,EAGf,OAFA3f,EAAK77B,MAAQA,EACb67B,EAAKtlC,MAAQA,EACNslC,GAGF1zB,EAAAszC,yBAAP,SACEjyC,GAEA,IAAIqyB,EAAO,IAAI6f,EAGf,OAFA7f,EAAK77B,MAAQwJ,EAAYxJ,MACzB67B,EAAKryB,YAAcA,EACZqyB,GAGF1zB,EAAAwzC,2BAAP,SACE1c,EACA2c,EACA57C,GAEA,IAAI67B,EAAO,IAAIggB,EAIf,OAHAhgB,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EAClBpD,EAAK+f,OAASA,EACP/f,GAGF1zB,EAAA2zC,+BAAP,SACEvlD,EACAyJ,GAEA,IAAI67B,EAAO,IAAIkgB,EAGf,OAFAlgB,EAAK77B,MAAQA,EACb67B,EAAKtlC,MAAQA,EACNslC,GAGF1zB,EAAA6zC,oBAAP,SACE/c,EACAwb,EACAtB,EACAn5C,GAEA,IAAI67B,EAAO,IAAIogB,EAKf,OAJApgB,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EAClBpD,EAAK3a,cAAgBu5B,EACrB5e,EAAK5jB,UAAYkhC,EACVtd,GAGF1zB,EAAA+zC,qBAAP,SACEl8C,GAEA,IAAI67B,EAAO,IAAIsgB,EAEf,OADAtgB,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAAi0C,8BAAP,SACEpc,EACAxtB,EACAxS,GAEA,IAAI67B,EAAO,IAAIwgB,EAIf,OAHAxgB,EAAK77B,MAAQA,EACb67B,EAAKmE,MAAQA,EACbnE,EAAKrpB,OAASA,EACPqpB,GAGF1zB,EAAAm0C,8BAAP,SACErd,EACAj/B,GAEA,IAAI67B,EAAO,IAAI0gB,EAGf,OAFA1gB,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EACXpD,GAGF1zB,EAAAq0C,+BAAP,SACEvd,EACAhoC,EACA+I,GAEA,IAAI67B,EAAO,IAAI4gB,EAIf,OAHA5gB,EAAK77B,MAAQA,EACb67B,EAAKoD,WAAaA,EAClBpD,EAAK5kC,SAAWA,EACT4kC,GAGF1zB,EAAAu0C,8BAAP,SACEC,EACA10C,EACAjI,GAEA,IAAI67B,EAAO,IAAI+gB,EAIf,OAHA/gB,EAAK77B,MAAQA,EACb67B,EAAK8gB,QAAUA,EACf9gB,EAAKghB,aAAe50C,EACb4zB,GAGF1zB,EAAA20C,wBAAP,SACEhe,EACAie,EACAC,EACAh9C,GAEA,IAAI67B,EAAO,IAAIohB,EAKf,OAJAphB,EAAK77B,MAAQA,EACb67B,EAAKiD,UAAYA,EACjBjD,EAAKkhB,OAASA,EACdlhB,EAAKmhB,OAASA,EACPnhB,GAGF1zB,EAAA+0C,8BAAP,SACE3mD,EACAyJ,GAEA,IAAI67B,EAAO,IAAIshB,EAGf,OAFAthB,EAAK77B,MAAQA,EACb67B,EAAKtlC,MAAQA,EACNslC,GAGF1zB,EAAAi1C,sBAAP,SACEp9C,GAEA,IAAI67B,EAAO,IAAIwhB,EAEf,OADAxhB,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAAm1C,qBAAP,SACEt9C,GAEA,IAAI67B,EAAO,IAAI0hB,EAEf,OADA1hB,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAAq1C,qBAAP,SACEx9C,GAEA,IAAI67B,EAAO,IAAI4hB,EAEf,OADA5hB,EAAK77B,MAAQA,EACN67B,GAGF1zB,EAAAu1C,6BAAP,SACEpD,EACAqD,EACA39C,GAEA,IAAI67B,EAAO,IAAI+hB,EAIf,OAHA/hB,EAAK77B,MAAQA,EACb67B,EAAKye,SAAWA,EAChBze,EAAK8hB,QAAUA,EACR9hB,GAGF1zB,EAAA01C,4BAAP,SACEvD,EACAqD,EACA39C,GAEA,IAAI67B,EAAO,IAAIiiB,EAIf,OAHAjiB,EAAK77B,MAAQA,EACb67B,EAAKye,SAAWA,EAChBze,EAAK8hB,QAAUA,EACR9hB,GAKF1zB,EAAA41C,qBAAP,SACExyC,EACAvL,GAEA,IAAIo5C,EAAO,IAAI4E,GAGf,OAFA5E,EAAKp5C,MAAQA,EACbo5C,EAAK7tC,WAAaA,EACX6tC,GAGFjxC,EAAA81C,qBAAP,SACEvf,EACA1+B,GAEA,IAAIo5C,EAAO,IAAI8E,GAGf,OAFA9E,EAAKp5C,MAAQA,EACbo5C,EAAK1a,MAAQA,EACN0a,GAGFjxC,EAAAg2C,uBAAP,SACE51C,EACAwT,EACAxF,EACAJ,EACApC,EACAyB,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAIgF,GASf,OARAhF,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAO0S,EACZ6wC,EAAKr9B,eAAiBA,EACtBq9B,EAAK7iC,YAAcA,EACnB6iC,EAAKjjC,gBAAkBA,EACvBijC,EAAKrlC,QAAUA,EACfqlC,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAk2C,wBAAP,SACE3f,EACA1+B,GAEA,IAAIo5C,EAAO,IAAIkF,GAGf,OAFAlF,EAAKp5C,MAAQA,EACbo5C,EAAK1a,MAAQA,EACN0a,GAGFjxC,EAAAo2C,kBAAP,SACE9yC,EACAqzB,EACA9+B,GAEA,IAAIo5C,EAAO,IAAIoF,GAIf,OAHApF,EAAKp5C,MAAQA,EACbo5C,EAAK3tC,UAAYA,EACjB2tC,EAAKta,UAAYA,EACVsa,GAGFjxC,EAAAs2C,qBAAP,SACEz+C,GAEA,IAAIo5C,EAAO,IAAIsF,GAEf,OADAtF,EAAKp5C,MAAQA,EACNo5C,GAGFjxC,EAAAw2C,sBAAP,SACE9oD,EACAke,EACAyB,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAIwF,GAMf,OALAxF,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAK5mC,OAASuB,EACdqlC,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAA02C,2BAAP,SACEhpD,EACAU,EACA0R,EACAjI,GAEA,IAAIo5C,EAAO,IAAI0F,GAKf,OAJA1F,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAK7iD,MAAQA,EACN6iD,GAGFjxC,EAAA42C,sBAAP,SACEhrC,EACA0F,EACAulC,EACAh/C,GAEA,IAAIo5C,EAAO,IAAI6F,GAIf,GAHA7F,EAAKp5C,MAAQA,EACbo5C,EAAKrlC,QAAUA,EACfqlC,EAAK3/B,KAAOA,EACRA,EAAM,CACR,IAAI5Y,EAAiB/B,EAAAogD,cAAczlC,EAAKljB,OACpCkjB,EAAKljB,MAAM4oD,WAAW,KACxB/F,EAAKv4C,eAAiB/B,EAAAsgD,YACpBv+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAes+C,WAAW18C,EAAA1K,kBAC7B8I,EAAiB4B,EAAA1K,eAAiB8I,GAEpCu4C,EAAKv4C,eAAiBA,GAExBu4C,EAAK9/B,aAAe+lC,GAAmBjG,EAAKv4C,qBAE5Cu4C,EAAKv4C,eAAiB,KACtBu4C,EAAK9/B,aAAe,KAGtB,OADA8/B,EAAK4F,UAAYA,EACV5F,GAGFjxC,EAAAm3C,6BAAP,SACE91C,EACAxJ,GAEA,IAAIo5C,EAAO,IAAImG,GAGf,OAFAnG,EAAK5vC,YAAcA,EACnB4vC,EAAKp5C,MAAQA,EACNo5C,GAGFjxC,EAAAq3C,4BAAP,SACE3pD,EACAotC,EACAjjC,GAEA,IAAIo5C,EAAO,IAAIqG,GAIf,OAHArG,EAAKp5C,MAAQA,EACbo5C,EAAKvjD,KAAOA,EACZujD,EAAKnW,aAAeA,EACbmW,GAGFjxC,EAAAu3C,mBAAP,SACE7pD,EACAotC,EACAjjC,GAEA,IAAI64C,EAAO,IAAI8G,GAKf,OAJA9G,EAAK74C,MAAQA,EACb64C,EAAK7qC,UAAYnY,EACZotC,IAAcA,EAAeptC,GAClCgjD,EAAKn/B,aAAeupB,EACb4V,GAGF1wC,EAAAy3C,0BAAP,SACE3gB,GAEA,IAAIma,EAAO,IAAIyG,GAGf,OAFAzG,EAAKp5C,MAAQi/B,EAAWj/B,MACxBo5C,EAAKna,WAAaA,EACXma,GAGFjxC,EAAA23C,kBAAP,SACEhhB,EACAQ,EACAC,EACAv/B,GAEA,IAAIo5C,EAAO,IAAI2G,GAKf,OAJA3G,EAAKp5C,MAAQA,EACbo5C,EAAKta,UAAYA,EACjBsa,EAAK9Z,OAASA,EACd8Z,EAAK7Z,QAAUA,EACR6Z,GAGFjxC,EAAA63C,sBAAP,SACEC,EACAxmC,EACAzZ,GAEA,IAAIo5C,EAAO,IAAI8G,GACf9G,EAAKp5C,MAAQA,EACbo5C,EAAKx/B,aAAeqmC,EACpB7G,EAAKt/B,cAAgB,KACrBs/B,EAAK3/B,KAAOA,EACZ,IAAI5Y,EAAiB/B,EAAAogD,cAAczlC,EAAKljB,OAaxC,OAZIkjB,EAAKljB,MAAM4oD,WAAW,KACxB/F,EAAKv4C,eAAiB/B,EAAAsgD,YACpBv+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAes+C,WAAW18C,EAAA1K,kBAC7B8I,EAAiB4B,EAAA1K,eAAiB8I,GAEpCu4C,EAAKv4C,eAAiBA,GAExBu4C,EAAK9/B,aAAe+lC,GAAmBjG,EAAKv4C,gBACrCu4C,GAGFjxC,EAAAg4C,kCAAP,SACE53C,EACAkR,EACAzZ,GAEA,IAAIo5C,EAAO,IAAI8G,GACf9G,EAAKp5C,MAAQA,EACbo5C,EAAKx/B,aAAe,KACpBw/B,EAAKt/B,cAAgBvR,EACrB6wC,EAAK3/B,KAAOA,EACZ,IAAI5Y,EAAiB/B,EAAAogD,cAAczlC,EAAKljB,OAaxC,OAZIkjB,EAAKljB,MAAM4oD,WAAW,KACxB/F,EAAKv4C,eAAiB/B,EAAAsgD,YACpBv+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAes+C,WAAW18C,EAAA1K,kBAC7B8I,EAAiB4B,EAAA1K,eAAiB8I,GAEpCu4C,EAAKv4C,eAAiBA,GAExBu4C,EAAK9/B,aAAe+lC,GAAmBjG,EAAKv4C,gBACrCu4C,GAGFjxC,EAAAi4C,wBAAP,SACEhrC,EACAvf,EACAmK,GAEA,IAAI64C,EAAO,IAAIwH,GAKf,OAJAxH,EAAK74C,MAAQA,EACb64C,EAAKzjC,YAAcA,EACdvf,IAAMA,EAAOuf,GAClByjC,EAAKhjD,KAAOA,EACLgjD,GAGF1wC,EAAAm4C,2BAAP,SACEzqD,EACAkmB,EACAxF,EACAxC,EACAyB,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAImH,GAQf,OAPAnH,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKr9B,eAAiBA,EACtBq9B,EAAK7iC,YAAcA,EACnB6iC,EAAKrlC,QAAUA,EACfqlC,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAq4C,uBAAP,SACE3qD,EACAqe,EACAmI,EACA7G,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAIqH,GAOf,OANArH,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKllC,KAAOA,EACZklC,EAAK/8B,YAAcA,EACnB+8B,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAu4C,mBAAP,SACErkC,EACAyiB,EACA6hB,EACAl1C,EACAzL,GAEA,IAAIo5C,EAAO,IAAIwH,GAMf,OALAxH,EAAKp5C,MAAQA,EACbo5C,EAAK/8B,YAAcA,EACnB+8B,EAAKta,UAAYA,EACjBsa,EAAKuH,YAAcA,EACnBvH,EAAK3tC,UAAYA,EACV2tC,GAGFjxC,EAAAQ,0BAAP,SACE9S,EACAkmB,EACA7S,EACA+T,EACAzH,EACAvN,EACAiV,EACAld,GAEA,IAAIo5C,EAAO,IAAIyH,GASf,OARAzH,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKr9B,eAAiBA,EACtBq9B,EAAKlwC,UAAYA,EACjBkwC,EAAKn8B,KAAOA,EACZm8B,EAAK5jC,WAAaA,EAClB4jC,EAAKl8B,UAAYA,EACVk8B,GAGFjxC,EAAA24C,gCAAP,SACEC,EACAC,EACAhhD,GAEA,IAAI64C,EAAO,IAAIoI,GAIf,OAHApI,EAAK74C,MAAQA,EACb64C,EAAKkI,QAAUA,EACflI,EAAKmI,UAAYA,EACVnI,GAGF1wC,EAAA+4C,wBAAP,SACErrD,EACAkmB,EACA7S,EACA+T,EACAzH,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAI+H,GAQf,OAPA/H,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKr9B,eAAiBA,EACtBq9B,EAAKlwC,UAAYA,EACjBkwC,EAAKn8B,KAAOA,EACZm8B,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAa,2BAAP,SACEnT,EACAke,EACAyB,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAIgI,GAMf,OALAhI,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKrlC,QAAUA,EACfqlC,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAk5C,sBAAP,SACE9qD,EACAyJ,GAEA,IAAIo5C,EAAO,IAAIkI,GAGf,OAFAlI,EAAKp5C,MAAQA,EACbo5C,EAAK7iD,MAAQA,EACN6iD,GAGFjxC,EAAAo5C,sBAAP,SACEziB,EACA0iB,EACAxhD,GAEA,IAAIo5C,EAAO,IAAIqI,GAIf,OAHArI,EAAKp5C,MAAQA,EACbo5C,EAAKta,UAAYA,EACjBsa,EAAKoI,MAAQA,EACNpI,GAGFjxC,EAAAu5C,iBAAP,SACEhjB,EACAnzB,EACAvL,GAEA,IAAI64C,EAAO,IAAI8I,GAIf,OAHA9I,EAAK74C,MAAQA,EACb64C,EAAKna,MAAQA,EACbma,EAAKttC,WAAaA,EACXstC,GAGF1wC,EAAAy5C,qBAAP,SACErrD,EACAyJ,GAEA,IAAIo5C,EAAO,IAAIyI,GAGf,OAFAzI,EAAKp5C,MAAQA,EACbo5C,EAAK7iD,MAAQA,EACN6iD,GAGFjxC,EAAA25C,mBAAP,SACEv2C,EACAw2C,EACAC,EACAC,EACAjiD,GAEA,IAAIo5C,EAAO,IAAI8I,GAMf,OALA9I,EAAKp5C,MAAQA,EACbo5C,EAAK7tC,WAAaA,EAClB6tC,EAAK2I,cAAgBA,EACrB3I,EAAK4I,gBAAkBA,EACvB5I,EAAK6I,kBAAoBA,EAClB7I,GAGFjxC,EAAAK,sBAAP,SACE3S,EACAkmB,EACA7K,EACAsE,EACAvN,EACAjI,GAEA,IAAIo5C,EAAO,IAAI+I,GAOf,OANA/I,EAAKp5C,MAAQA,EACbo5C,EAAKnxC,MAAQA,EACbmxC,EAAKvjD,KAAOA,EACZujD,EAAKr9B,eAAiBA,EACtBq9B,EAAKllC,KAAOhD,EACZkoC,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAi6C,wBAAP,SACExoC,EACApE,EACAxV,GAEA,IAAIo5C,EAAO,IAAIiJ,GAIf,OAHAjJ,EAAKp5C,MAAQA,EACbo5C,EAAKx/B,aAAeA,EACpBw/B,EAAK5jC,WAAaA,EACX4jC,GAGFjxC,EAAAC,0BAAP,SACEvS,EACAqe,EACAmI,EACA7G,EACAvN,EACAjI,GAEA,IAAI64C,EAAO,IAAIyJ,GAOf,OANAzJ,EAAK74C,MAAQA,EACb64C,EAAK5wC,MAAQA,EACb4wC,EAAKhjD,KAAOA,EACZgjD,EAAK3kC,KAAOA,EACZ2kC,EAAKx8B,YAAcA,EACnBw8B,EAAKrjC,WAAaA,EACXqjC,GAGF1wC,EAAAo6C,oBAAP,SACEtjB,EACAj/B,GAEA,IAAIo5C,EAAO,IAAIoJ,GAGf,OAFApJ,EAAKp5C,MAAQA,EACbo5C,EAAKna,WAAaA,EACXma,GAGFjxC,EAAAs6C,qBAAP,SACE3jB,EACArzB,EACAzL,GAEA,IAAIo5C,EAAO,IAAIsJ,GAIf,OAHAtJ,EAAKp5C,MAAQA,EACbo5C,EAAKta,UAAYA,EACjBsa,EAAK3tC,UAAYA,EACV2tC,GAEXjxC,EA76BA,GAAsBxT,EAAAwT,OAi7BtB,IAAAw6C,EAAA,SAAAz8C,GAAA,SAAAy8C,mDAKA,OALuCn7C,EAAAm7C,EAAAz8C,GAKvCy8C,EALA,CAAuCx6C,GAAjBxT,EAAAguD,WAQtB,IAAAtK,EAAA,SAAAnyC,GAAA,SAAAmyC,IAAA,IAAAlyC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASi3C,WAMlB,OAP8Bp7C,EAAA6wC,EAAAnyC,GAO9BmyC,EAPA,CAA8BlwC,GAAjBxT,EAAA0jD,WAUb,IAAAE,EAAA,SAAAryC,GAAA,SAAAqyC,IAAA,IAAApyC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASk3C,YAMlB,OAPmCr7C,EAAA+wC,EAAAryC,GAOnCqyC,EAPA,CAAmCoK,GAAtBhuD,EAAA4jD,gBAUb,IAAAG,EAAA,SAAAxyC,GAAA,SAAAwyC,IAAA,IAAAvyC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASm3C,eAQlB,OATsCt7C,EAAAkxC,EAAAxyC,GAStCwyC,EATA,CAAsCiK,GAAzBhuD,EAAA+jD,mBAYb,IAAAI,EAAA,SAAA5yC,GAAA,SAAA4yC,IAAA,IAAA3yC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASo3C,gBAQlB,OATuCv7C,EAAAsxC,EAAA5yC,GASvC4yC,EATA,CAAuC3wC,GAA1BxT,EAAAmkD,oBAYb,SAAYkK,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYruD,EAAAquD,gBAAAruD,EAAAquD,cAAa,KAUzB,IA2BYr/C,EA3BZq1C,EAAA,SAAA9yC,GAAA,SAAA8yC,IAAA,IAAA7yC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASs3C,UAWhB98C,EAAA+8C,yBAAoD,KAEpD/8C,EAAA8B,MAAqBxF,EAAAnL,YAAY4Q,OAQnC,OAtBmCV,EAAAwxC,EAAA9yC,GAiBjC8yC,EAAA9hD,UAAAqd,GAAA,SAAGoB,GAA2B,OAAQ1gB,KAAKgT,MAAQ0N,IAASA,GAE5DqjC,EAAA9hD,UAAA2f,MAAA,SAAMlB,GAA2B,OAA8B,IAAtB1gB,KAAKgT,MAAQ0N,IAEtDqjC,EAAA9hD,UAAAkQ,IAAA,SAAIuO,GAA2B1gB,KAAKgT,OAAS0N,GAC/CqjC,EAtBA,CAAmC7wC,GA4CnC,SAAgB0N,EAAoBhgB,GAElC,GAAIA,EAAK6V,MAAQC,EAASisC,WAAY,CACpC,IAAIuL,EAAiCttD,EAAMqL,KAE3C,OADA7B,OAAO8jD,EAAQ/hD,QACP+hD,EAAQ3hD,WAAW,IACzB,QACE,GAAe,WAAX2hD,EAAsB,OAAOx/C,EAAc0G,QAC/C,MAEF,SACE,GAAe,YAAX84C,EAAuB,OAAOx/C,EAAcsW,SAChD,MAEF,SACE,GAAe,UAAXkpC,EAAqB,OAAOx/C,EAAcuS,OAC9C,MAEF,SACE,GAAe,UAAXitC,EAAqB,OAAOx/C,EAAc2T,OAC9C,MAEF,SACE,GAAe,QAAX6rC,EAAmB,OAAOx/C,EAAc4T,KAC5C,MAEF,SACE,GAAe,YAAX4rC,EAAuB,OAAOx/C,EAAcC,SAChD,MAEF,SACE,GAAe,UAAXu/C,EAAqB,OAAOx/C,EAAc4M,OAC9C,MAEF,SACE,GAAe,aAAX4yC,EAAwB,OAAOx/C,EAAc+M,UACjD,GAAe,UAAXyyC,EAAqB,OAAOx/C,EAAc6T,aAI7C,GACL3hB,EAAK6V,MAAQC,EAASssC,gBACKpiD,EAAMopC,WAAWvzB,MAAQC,EAASisC,WAC7D,CACIuL,EAA4DttD,EAAMopC,WAAY/9B,KAClF7B,OAAO8jD,EAAQ/hD,QACf,IAAIgiD,EAAqCvtD,EAAMoB,SAASiK,KAGxD,GAFA7B,OAAO+jD,EAAQhiD,QAEA,YAAX+hD,EACF,OAAQC,EAAQ5hD,WAAW,IACzB,QACE,GAAe,UAAX4hD,EAAqB,OAAOz/C,EAAcE,gBAC9C,MAEF,SACE,OAAQu/C,GACN,IAAK,SAAU,OAAOz/C,EAAcyB,gBACpC,IAAK,UAAW,OAAOzB,EAAcgC,mBAO/C,OAAOhC,EAAc0/C,OA7GV1uD,EAAAqkD,gBA2Bb,SAAYr1C,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,oBAbF,CAAYA,EAAAhP,EAAAgP,gBAAAhP,EAAAgP,cAAa,KAiBzBhP,EAAAkhB,sBAqEA,IAAAwjC,EAAA,SAAAnzC,GAAA,SAAAmzC,IAAA,IAAAlzC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS23C,YAQlB,OATmC97C,EAAA6xC,EAAAnzC,GASnCmzC,EATA,CAAmClxC,GAAtBxT,EAAA0kD,gBAYb,SAAYkK,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAY5uD,EAAA4uD,cAAA5uD,EAAA4uD,YAAW,KAUvB,IAAA/J,EAAA,SAAAtzC,GAAA,SAAAszC,IAAA,IAAArzC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS63C,UAMlB,OAPiCh8C,EAAAgyC,EAAAtzC,GAOjCszC,EAPA,CAAiCrxC,GAApBxT,EAAA6kD,cAYb,IAAAiK,EAAA,SAAAv9C,GAAA,SAAAu9C,mDAAgD,OAAPj8C,EAAAi8C,EAAAv9C,GAAOu9C,EAAhD,CAAyCt7C,GAAnBxT,EAAA8uD,aAGtB,IAYYprC,EAZZshC,EAAA,SAAAzzC,GAAA,SAAAyzC,IAAA,IAAAxzC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASisC,aAQlB,OAT0CpwC,EAAAmyC,EAAAzzC,GAS1CyzC,EATA,CAA0C8J,GAA7B9uD,EAAAglD,uBAYb,SAAYthC,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA1jB,EAAA0jB,cAAA1jB,EAAA0jB,YAAW,KAUvB,IAAAqrC,EAAA,SAAAx9C,GAAA,SAAAw9C,IAAA,IAAAv9C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASwM,UAIlB,OALgD3Q,EAAAk8C,EAAAx9C,GAKhDw9C,EALA,CAAgDD,GAA1B9uD,EAAA+uD,oBAQtB,IAAA3J,EAAA,SAAA7zC,GAAA,SAAA6zC,IAAA,IAAA5zC,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAYsrC,QAI5B,OAL4Cn8C,EAAAuyC,EAAA7zC,GAK5C6zC,EALA,CAA4C2J,GAA/B/uD,EAAAolD,yBAQb,SAAY6J,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYjvD,EAAAivD,gBAAAjvD,EAAAivD,cAAa,KAOzB,IAAAxJ,EAAA,SAAAl0C,GAAA,SAAAk0C,IAAA,IAAAj0C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASksC,YAQlB,OATyCrwC,EAAA4yC,EAAAl0C,GASzCk0C,EATA,CAAyCqJ,GAA5B9uD,EAAAylD,sBAYb,IAAAG,EAAA,SAAAr0C,GAAA,SAAAq0C,IAAA,IAAAp0C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASk4C,SAQlB,OATsCr8C,EAAA+yC,EAAAr0C,GAStCq0C,EATA,CAAsCkJ,GAAzB9uD,EAAA4lD,mBAYb,IAAAG,EAAA,SAAAx0C,GAAA,SAAAw0C,IAAA,IAAAv0C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASmsC,OA4BlB,OA7BoCtwC,EAAAkzC,EAAAx0C,GAWlClQ,OAAAC,eAAIykD,EAAAxjD,UAAA,qBAAkB,KAAtB,WACE,IACI+qB,EADAf,EAAgBjsB,KAAKisB,cAEzB,OAAIA,IAAkBe,EAAmBf,EAAc9f,QAC9Ci2C,EAAAzmC,MAAMhP,KAAKsf,EAAc,GAAGlhB,MAAOkhB,EAAce,EAAmB,GAAGjiB,OAEzE/K,KAAKgqC,WAAWj/B,uCAIzBhK,OAAAC,eAAIykD,EAAAxjD,UAAA,iBAAc,KAAlB,WACE,IAAIiiD,EAAOlkD,KAAKgjB,UACZ6rC,EAAe3K,EAAK/3C,OACxB,OAAI0iD,EACKzM,EAAAzmC,MAAMhP,KAAKu3C,EAAK,GAAGn5C,MAAOm5C,EAAK2K,EAAe,GAAG9jD,OAEnD/K,KAAKgqC,WAAWj/B,uCAE3B06C,EA7BA,CAAoC+I,GAAvB9uD,EAAA+lD,iBAgCb,IAAAE,EAAA,SAAA10C,GAAA,SAAA00C,IAAA,IAAAz0C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASmI,QAIlB,OALqCtM,EAAAozC,EAAA10C,GAKrC00C,EALA,CAAqC6I,GAAxB9uD,EAAAimD,kBAQb,IAAAG,EAAA,SAAA70C,GAAA,SAAA60C,IAAA,IAAA50C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASo4C,QAIlB,OALqCv8C,EAAAuzC,EAAA70C,GAKrC60C,EALA,CAAqC0I,GAAxB9uD,EAAAomD,kBAQb,IAAAE,EAAA,SAAA/0C,GAAA,SAAA+0C,IAAA,IAAA90C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASkM,YAChB1R,EAAAjF,KAAO,cACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAcsC,cACzB,OAJ2CiN,EAAAyzC,EAAA/0C,GAI3C+0C,EAJA,CAA2CtB,GAA9BhlD,EAAAsmD,wBAOb,IAAAE,EAAA,SAAAj1C,GAAA,SAAAi1C,IAAA,IAAAh1C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASosC,gBAMlB,OAP6CvwC,EAAA2zC,EAAAj1C,GAO7Ci1C,EAPA,CAA6CsI,GAAhC9uD,EAAAwmD,0BAUb,IAAAK,EAAA,SAAAt1C,GAAA,SAAAs1C,IAAA,IAAAr1C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAY2rC,QAI5B,OAL4Cx8C,EAAAg0C,EAAAt1C,GAK5Cs1C,EALA,CAA4CkI,GAA/B/uD,EAAA6mD,yBAQb,IAAAE,EAAA,SAAAx1C,GAAA,SAAAw1C,IAAA,IAAAv1C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASiI,WAIlB,OALwCpM,EAAAk0C,EAAAx1C,GAKxCw1C,EALA,CAAwC+H,GAA3B9uD,EAAA+mD,qBAQb,IAAAG,EAAA,SAAA31C,GAAA,SAAA21C,IAAA,IAAA11C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASs4C,aAMlB,OAP0Cz8C,EAAAq0C,EAAA31C,GAO1C21C,EAPA,CAA0C4H,GAA7B9uD,EAAAknD,uBAUb,IAAAE,EAAA,SAAA71C,GAAA,SAAA61C,IAAA,IAAA51C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAY6rC,UAI5B,OAL8C18C,EAAAu0C,EAAA71C,GAK9C61C,EALA,CAA8C2H,GAAjC/uD,EAAAonD,2BAQb,IAAAE,EAAA,SAAA/1C,GAAA,SAAA+1C,IAAA,IAAA91C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASw4C,MAClB,OAFmC38C,EAAAy0C,EAAA/1C,GAEnC+1C,EAFA,CAAmCvB,GAAtB/lD,EAAAsnD,gBAKb,IAAAE,EAAA,SAAAj2C,GAAA,SAAAi2C,IAAA,IAAAh2C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS6rC,KAChBrxC,EAAAjF,KAAO,OACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAciC,QACzB,OAJoCsN,EAAA20C,EAAAj2C,GAIpCi2C,EAJA,CAAoCxC,GAAvBhlD,EAAAwnD,iBAOb,IAAAE,EAAA,SAAAn2C,GAAA,SAAAm2C,IAAA,IAAAl2C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAY+rC,SAM5B,OAP6C58C,EAAA60C,EAAAn2C,GAO7Cm2C,EAPA,CAA6CqH,GAAhC/uD,EAAA0nD,0BAUb,IAAAE,EAAA,SAAAr2C,GAAA,SAAAq2C,IAAA,IAAAp2C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASqsC,gBAIlB,OAL6CxwC,EAAA+0C,EAAAr2C,GAK7Cq2C,EALA,CAA6CkH,GAAhC9uD,EAAA4nD,0BAQb,IAAAE,EAAA,SAAAv2C,GAAA,SAAAu2C,IAAA,IAAAt2C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASssC,iBAMlB,OAP8CzwC,EAAAi1C,EAAAv2C,GAO9Cu2C,EAPA,CAA8CgH,GAAjC9uD,EAAA8nD,2BAUb,IAAAG,EAAA,SAAA12C,GAAA,SAAA02C,IAAA,IAAAz2C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAYgsC,SAM5B,OAP6C78C,EAAAo1C,EAAA12C,GAO7C02C,EAPA,CAA6C8G,GAAhC/uD,EAAAioD,0BAUb,IAAAK,EAAA,SAAA/2C,GAAA,SAAA+2C,IAAA,IAAA92C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS24C,UAQlB,OATuC98C,EAAAy1C,EAAA/2C,GASvC+2C,EATA,CAAuCwG,GAA1B9uD,EAAAsoD,oBAYb,IAAAE,EAAA,SAAAj3C,GAAA,SAAAi3C,IAAA,IAAAh3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAiS,YAAcC,EAAYC,SAI5B,OAL6C9Q,EAAA21C,EAAAj3C,GAK7Ci3C,EALA,CAA6CuG,GAAhC/uD,EAAAwoD,0BAQb,IAAAE,EAAA,SAAAn3C,GAAA,SAAAm3C,IAAA,IAAAl3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASusC,MAChB/xC,EAAAjF,KAAO,QACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAcqC,SACzB,OAJqCkN,EAAA61C,EAAAn3C,GAIrCm3C,EAJA,CAAqC1D,GAAxBhlD,EAAA0oD,kBAOb,IAAAE,EAAA,SAAAr3C,GAAA,SAAAq3C,IAAA,IAAAp3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS44C,KAChBp+C,EAAAjF,KAAO,OACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAcoC,QACzB,OAJoCmN,EAAA+1C,EAAAr3C,GAIpCq3C,EAJA,CAAoC5D,GAAvBhlD,EAAA4oD,iBAOb,IAAAE,EAAA,SAAAv3C,GAAA,SAAAu3C,IAAA,IAAAt3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS8rC,KAChBtxC,EAAAjF,KAAO,OACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAckC,QACzB,OAJoCqN,EAAAi2C,EAAAv3C,GAIpCu3C,EAJA,CAAoC9D,GAAvBhlD,EAAA8oD,iBAOb,IAAAnC,EAAA,SAAAp1C,GAAA,SAAAo1C,IAAA,IAAAn1C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS+rC,MAChBvxC,EAAAjF,KAAO,QACPiF,EAAAyzC,OAASn3C,EAAAxK,cAAcmC,SACzB,OAJqCoN,EAAA8zC,EAAAp1C,GAIrCo1C,EAJA,CAAqC3B,GAAxBhlD,EAAA2mD,kBAOb,IAAAkJ,EAAA,SAAAt+C,GAAA,SAAAs+C,mDAMA,OAN8Ch9C,EAAAg9C,EAAAt+C,GAM9Cs+C,EANA,CAA8Cf,GAAxB9uD,EAAA6vD,kBAStB,IAAA5G,EAAA,SAAA13C,GAAA,SAAA03C,IAAA,IAAAz3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS84C,eAClB,OAF4Cj9C,EAAAo2C,EAAA13C,GAE5C03C,EAFA,CAA4C4G,GAA/B7vD,EAAAipD,yBAKb,IAAAE,EAAA,SAAA53C,GAAA,SAAA43C,IAAA,IAAA33C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS+4C,cAClB,OAF2Cl9C,EAAAs2C,EAAA53C,GAE3C43C,EAFA,CAA2C0G,GAA9B7vD,EAAAmpD,wBAOb,IAGY92C,EAHZ29C,EAAA,SAAAz+C,GAAA,SAAAy+C,mDAA+C,OAAPn9C,EAAAm9C,EAAAz+C,GAAOy+C,EAA/C,CAAwCx8C,GAAlBxT,EAAAgwD,YAGtB,SAAY39C,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAArS,EAAAqS,aAAArS,EAAAqS,WAAU,KAUtB,IAAAD,EAAA,SAAAb,GAwBE,SAAAa,EAAYlG,EAAwBK,EAAcwK,GAAlD,IAAAvF,EACED,EAAAzQ,KAAAR,OAAOA,KAxBTkR,EAAAuF,KAAOC,EAASi5C,OAChBz+C,EAAAgD,OAAS,KAeThD,EAAA0+C,UAA8B,KAE9B1+C,EAAA4Z,gBAAuB,EAEvB5Z,EAAA2+C,YAAkC,KAKhC3+C,EAAK4+C,WAAar5C,EAClBvF,EAAKtF,eAAiBA,EACtB,IAAIyY,EAAe+lC,GAAmBl5C,EAAKtF,gBAC3CsF,EAAKmT,aAAeA,EACpB,IAAI0rC,EAAM1rC,EAAa2rC,YAAYxiD,EAAAlL,uBACnC4O,EAAK++C,WAAaF,GAAO,EAAI1rC,EAAa5X,UAAUsjD,EAAM,GAAK1rC,EAC/DnT,EAAKoF,WAAa,IAAIrP,MACtBiK,EAAKnG,MAAQ,IAAIq3C,EAAAzmC,MAAMzK,EAAM,EAAGjF,EAAKE,QACrC+E,EAAKjF,KAAOA,IAOhB,OAzC4BsG,EAAAT,EAAAb,GAsC1BlQ,OAAAC,eAAI8Q,EAAA7P,UAAA,UAAO,KAAX,WAAsB,OAAOjC,KAAK8vD,YAAc/9C,EAAWm+C,uCAE3DnvD,OAAAC,eAAI8Q,EAAA7P,UAAA,YAAS,KAAb,WAAwB,OAAOjC,KAAK8vD,YAAc/9C,EAAWC,yCAC/DF,EAzCA,CAA4BoB,GAAfxT,EAAAoS,SA4Cb,IAAAq+C,GAAA,SAAAl/C,GAAA,SAAAk/C,IAAA,IAAAj/C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YAIEkR,EAAAqP,WAAqC,KAErCrP,EAAA8B,MAAqBxF,EAAAnL,YAAY4Q,OAQnC,OAdmDV,EAAA49C,EAAAl/C,GASjDk/C,EAAAluD,UAAAqd,GAAA,SAAGoB,GAA2B,OAAQ1gB,KAAKgT,MAAQ0N,IAASA,GAE5DyvC,EAAAluD,UAAA2f,MAAA,SAAMlB,GAA2B,OAA8B,IAAtB1gB,KAAKgT,MAAQ0N,IAEtDyvC,EAAAluD,UAAAkQ,IAAA,SAAIuO,GAA2B1gB,KAAKgT,OAAS0N,GAC/CyvC,EAdA,CAAmDT,GAA7BhwD,EAAAywD,wBAiBtB,IAAAnE,GAAA,SAAA/6C,GAAA,SAAA+6C,IAAA,IAAA96C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASuL,4BAMlB,OAP+C1P,EAAAy5C,EAAA/6C,GAO/C+6C,EAPA,CAA+CmE,IAAlCzwD,EAAAssD,6BAUb,IAAAoE,GAAA,SAAAn/C,GAAA,SAAAm/C,mDAMA,OAN+D79C,EAAA69C,EAAAn/C,GAM/Dm/C,EANA,CAA+DD,IAAzCzwD,EAAA0wD,oCAStB,IAAArH,GAAA,SAAA93C,GAAA,SAAA83C,IAAA,IAAA73C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS25C,QAIlB,OALoC99C,EAAAw2C,EAAA93C,GAKpC83C,EALA,CAAoC2G,GAAvBhwD,EAAAqpD,kBAQb,IAAAE,GAAA,SAAAh4C,GAAA,SAAAg4C,IAAA,IAAA/3C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS45C,QAIlB,OALoC/9C,EAAA02C,EAAAh4C,GAKpCg4C,EALA,CAAoCyG,GAAvBhwD,EAAAupD,kBAQb,IAAAE,GAAA,SAAAl4C,GAAA,SAAAk4C,IAAA,IAAAj4C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASQ,mBAelB,OAhBsC3E,EAAA42C,EAAAl4C,GAYpClQ,OAAAC,eAAImoD,EAAAlnD,UAAA,YAAS,KAAb,WACE,IAAI6kB,EAAiB9mB,KAAK8mB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe3a,OAAS,mCAE7Dg9C,EAhBA,CAAsCgH,IAAzBzwD,EAAAypD,oBAmBb,IAAAE,GAAA,SAAAp4C,GAAA,SAAAo4C,IAAA,IAAAn4C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS65C,WAIlB,OALuCh+C,EAAA82C,EAAAp4C,GAKvCo4C,EALA,CAAuCqG,GAA1BhwD,EAAA2pD,qBAQb,IAAAE,GAAA,SAAAt4C,GAAA,SAAAs4C,IAAA,IAAAr4C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS85C,KAMlB,OAPiCj+C,EAAAg3C,EAAAt4C,GAOjCs4C,EAPA,CAAiCmG,GAApBhwD,EAAA6pD,eAUb,IAAAE,GAAA,SAAAx4C,GAAA,SAAAw4C,IAAA,IAAAv4C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASzT,QAClB,OAFoCsP,EAAAk3C,EAAAx4C,GAEpCw4C,EAFA,CAAoCiG,GAAvBhwD,EAAA+pD,kBAKb,IAAAE,GAAA,SAAA14C,GAAA,SAAA04C,IAAA,IAAAz4C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASU,kBAIlB,OALqC7E,EAAAo3C,EAAA14C,GAKrC04C,EALA,CAAqCwG,IAAxBzwD,EAAAiqD,mBAQb,IAAAE,GAAA,SAAA54C,GAAA,SAAA44C,IAAA,IAAA34C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS+5C,uBAKlB,OAN0Cl+C,EAAAs3C,EAAA54C,GAM1C44C,EANA,CAA0CuG,IAA7B1wD,EAAAmqD,wBASb,IAAAW,GAAA,SAAAv5C,GAAA,SAAAu5C,IAAA,IAAAt5C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASg6C,eAMlB,OAP2Cn+C,EAAAi4C,EAAAv5C,GAO3Cu5C,EAPA,CAA2Ct3C,GAA9BxT,EAAA8qD,yBAUb,IAAAE,GAAA,SAAAz5C,GAAA,SAAAy5C,IAAA,IAAAx5C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASi6C,eAMlB,OAPkCp+C,EAAAm4C,EAAAz5C,GAOlCy5C,EAPA,CAAkCx3C,GAArBxT,EAAAgrD,gBAUb,IAAAV,GAAA,SAAA/4C,GAAA,SAAA+4C,IAAA,IAAA94C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASxB,SAYlB,OAbqC3C,EAAAy3C,EAAA/4C,GAarC+4C,EAbA,CAAqC0F,GAAxBhwD,EAAAsqD,mBAgBb,IAAAM,GAAA,SAAAr5C,GAAA,SAAAq5C,IAAA,IAAAp5C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASE,gBAIlB,OAL4CrE,EAAA+3C,EAAAr5C,GAK5Cq5C,EALA,CAA4CoF,GAA/BhwD,EAAA4qD,0BAQb,IAAAM,GAAA,SAAA35C,GAAA,SAAA25C,IAAA,IAAA15C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASk6C,aAIlB,OALyCr+C,EAAAq4C,EAAA35C,GAKzC25C,EALA,CAAyC8E,GAA5BhwD,EAAAkrD,uBAQb,IAAAY,GAAA,SAAAv6C,GAAA,SAAAu6C,IAAA,IAAAt6C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS+K,iBAGhBvQ,EAAAka,gBAAuB,IACzB,OALsC7Y,EAAAi5C,EAAAv6C,GAKtCu6C,EALA,CAAsC4E,IAAzB1wD,EAAA8rD,oBAQb,IAAAG,GAAA,SAAA16C,GAAA,SAAA06C,IAAA,IAAAz6C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASm6C,MAalB,OAdkCt+C,EAAAo5C,EAAA16C,GAclC06C,EAdA,CAAkC+D,GAArBhwD,EAAAisD,gBAiBb,SAAkBmF,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkBpxD,EAAAoxD,YAAApxD,EAAAoxD,UAAS,KAU3B,IAAAlF,GAAA,SAAA36C,GAAA,SAAA26C,IAAA,IAAA16C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASY,sBA6BlB,OA9ByC/E,EAAAq5C,EAAA36C,GAYvClQ,OAAAC,eAAI4qD,EAAA3pD,UAAA,YAAS,KAAb,WACE,IAAI6kB,EAAiB9mB,KAAK8mB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe3a,OAAS,mCAI3Dy/C,EAAA3pD,UAAA8uD,MAAA,WACE,OAAO79C,EAAKQ,0BACV1T,KAAKY,KACLZ,KAAK8mB,eACL9mB,KAAKiU,UACLjU,KAAKgoB,KACLhoB,KAAKugB,WACLvgB,KAAKgT,MACLhT,KAAKioB,UACLjoB,KAAK+K,QAGX6gD,EA9BA,CAAyCuE,IAA5BzwD,EAAAksD,uBAiCb,IAAAd,GAAA,SAAA75C,GAAA,SAAA65C,IAAA,IAAA55C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASs6C,KAQlB,OATiCz+C,EAAAu4C,EAAA75C,GASjC65C,EATA,CAAiC4E,GAApBhwD,EAAAorD,eAYb,IAAAM,GAAA,SAAAn6C,GAAA,SAAAm6C,IAAA,IAAAl6C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASu6C,oBAIlB,OALuC1+C,EAAA64C,EAAAn6C,GAKvCm6C,EALA,CAAuC+E,IAA1BzwD,EAAA0rD,qBAQb,IAAAH,GAAA,SAAAh6C,GAAA,SAAAg6C,IAAA,IAAA/5C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASI,SAYlB,OAbqCvE,EAAA04C,EAAAh6C,GAarCg6C,EAbA,CAAqCyE,GAAxBhwD,EAAAurD,mBAgBb,IAAAK,GAAA,SAAAr6C,GAAA,SAAAq6C,IAAA,IAAAp6C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASc,uBAClB,OAF0CjF,EAAA+4C,EAAAr6C,GAE1Cq6C,EAFA,CAA0CnC,IAA7BzpD,EAAA4rD,wBAKb,IAAAY,GAAA,SAAAj7C,GAAA,SAAAi7C,IAAA,IAAAh7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASiL,oBAClB,OAFuCpP,EAAA25C,EAAAj7C,GAEvCi7C,EAFA,CAAuCN,IAA1BlsD,EAAAwsD,qBAKb,IAAAC,GAAA,SAAAl7C,GAAA,SAAAk7C,IAAA,IAAAj7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASgB,uBAIlB,OAL0CnF,EAAA45C,EAAAl7C,GAK1Ck7C,EALA,CAA0CgE,IAA7BzwD,EAAAysD,wBAQb,IAAAE,GAAA,SAAAp7C,GAAA,SAAAo7C,IAAA,IAAAn7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASw6C,SAIlB,OALqC3+C,EAAA85C,EAAAp7C,GAKrCo7C,EALA,CAAqCqD,GAAxBhwD,EAAA2sD,mBAQb,IAAAK,GAAA,SAAAz7C,GAAA,SAAAy7C,IAAA,IAAAx7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASy6C,aAMlB,OAPgC5+C,EAAAm6C,EAAAz7C,GAOhCy7C,EAPA,CAAgCx5C,GAAnBxT,EAAAgtD,cAUb,IAAAF,GAAA,SAAAv7C,GAAA,SAAAu7C,IAAA,IAAAt7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS06C,SAMlB,OAPqC7+C,EAAAi6C,EAAAv7C,GAOrCu7C,EAPA,CAAqCkD,GAAxBhwD,EAAA8sD,mBAUb,IAAAI,GAAA,SAAA37C,GAAA,SAAA27C,IAAA,IAAA17C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS26C,QAIlB,OALoC9+C,EAAAq6C,EAAA37C,GAKpC27C,EALA,CAAoC8C,GAAvBhwD,EAAAktD,kBAQb,IAAAK,GAAA,SAAAh8C,GAAA,SAAAg8C,IAAA,IAAA/7C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS46C,MAUlB,OAXkC/+C,EAAA06C,EAAAh8C,GAWlCg8C,EAXA,CAAkCyC,GAArBhwD,EAAAutD,gBAcb,IAAAC,GAAA,SAAAj8C,GAAA,SAAAi8C,IAAA,IAAAh8C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASkB,kBAMlB,OAPqCrF,EAAA26C,EAAAj8C,GAOrCi8C,EAPA,CAAqCiD,IAAxBzwD,EAAAwtD,mBAUb,IAAAG,GAAA,SAAAp8C,GAAA,SAAAo8C,IAAA,IAAAn8C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS66C,sBAClB,OAFyCh/C,EAAA86C,EAAAp8C,GAEzCo8C,EAFA,CAAyC+C,IAA5B1wD,EAAA2tD,uBAKb,IAAAD,GAAA,SAAAn8C,GAAA,SAAAm8C,IAAA,IAAAl8C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAASM,WAMlB,OAPuCzE,EAAA66C,EAAAn8C,GAOvCm8C,EAPA,CAAuCsC,GAA1BhwD,EAAA0tD,qBAUb,IAAAG,GAAA,SAAAt8C,GAAA,SAAAs8C,IAAA,IAAAr8C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS86C,OAIlB,OALmCj/C,EAAAg7C,EAAAt8C,GAKnCs8C,EALA,CAAmCmC,GAAtBhwD,EAAA6tD,iBAQb,IAAAE,GAAA,SAAAx8C,GAAA,SAAAw8C,IAAA,IAAAv8C,EAAA,OAAAD,KAAAgV,MAAAjmB,KAAAgjB,YAAAhjB,YACEkR,EAAAuF,KAAOC,EAAS+6C,QAMlB,OAPoCl/C,EAAAk7C,EAAAx8C,GAOpCw8C,EAPA,CAAoCiC,GAqBpC,SAAgBtF,GAAmB5lC,GAEjC,OADIA,EAAKD,SAAS,SAAQC,EAAOA,EAAK/X,UAAU,EAAG+X,EAAKrY,OAAS,IAC1DqY,EAvBI9kB,EAAA+tD,kBAUb/tD,EAAAgyD,cAAA,SAA8Bj7C,EAAqB8J,GACjD,GAAIA,EACF,IAAK,IAAIlgB,EAAI,EAAG+V,EAAImK,EAAWpU,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACjD,IAAIogB,EAAYF,EAAWlgB,GAC3B,GAAIogB,EAAUjS,eAAiBiI,EAAM,OAAOgK,EAGhD,OAAO,MAIT/gB,EAAA0qD,sBAMA1qD,EAAAiyD,cAAA,SAA8B1yC,GAC5B,GAAIA,EAAKxI,MAAQC,EAASk3C,UAAW,CACnC,IAAIhtD,EAAuBqe,EAAMre,KACjC,QAASA,EAAKqX,MAAQrX,EAAK0S,WAAWrH,KAAKE,QAE7C,OAAO,kFCn/DT,IAAAylD,EAAAzxD,EAAA,GAOA0xD,EAAA1xD,EAAA,IAOA,SAAkB2xD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkBpyD,EAAAoyD,WAAApyD,EAAAoyD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkBryD,EAAAqyD,YAAAryD,EAAAqyD,UAAS,KA0B3B,IAAMC,EAAY,IAAInqD,WAAW,IAGjC+M,EAAA,WAoBE,SAAAA,EAAY6B,EAAgBzD,EAAkB44B,GAHtC5rC,KAAAiyD,mBAAkC,KAIxCjyD,KAAKyW,KAAOA,EACZzW,KAAKgT,MAAQA,EACbhT,KAAK4rC,KAAOA,EACZ5rC,KAAKkyD,SAAgBC,KAAevmB,EAAO,GAC3C5rC,KAAK2uB,eAAiB,KACtB3uB,KAAKoyD,mBAAqB,KAC1BpyD,KAAKqyD,gBAAkBryD,KA6Z3B,OAzZEe,OAAAC,eAAI4T,EAAA3S,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAKyW,MACX,OAAkB,OAAO7B,EAAK1R,GAC9B,OAAmB,OAAO0R,EAAKzR,IAC/B,QACA,OAAmB,OAAOyR,EAAKxR,IAC/B,QACA,OAAmB,OAAOwR,EAAKvR,IAC/B,OAAqB,OAAoB,IAAbrD,KAAK4rC,KAAah3B,EAAK09C,QAAU19C,EAAK29C,QAClE,OAAkB,OAAO39C,EAAKrR,GAC9B,OAAmB,OAAOqR,EAAKpR,IAC/B,OAAmB,OAAOoR,EAAKnR,IAC/B,OAAmB,OAAOmR,EAAKlR,IAC/B,OAAqB,OAAoB,IAAb1D,KAAK4rC,KAAah3B,EAAK49C,QAAU59C,EAAK69C,QAClE,QACA,QAAS,OAAO79C,EAAKxR,sCAKzBrC,OAAAC,eAAI4T,EAAA3S,UAAA,aAAU,KAAd,WACE,OAAa,IAATjC,KAAKyW,KAA8B7B,EAAK89C,KACrC1yD,sCAITe,OAAAC,eAAI4T,EAAA3S,UAAA,YAAS,KAAb,WACE,OAAO,GAAK0wD,IAAS3yD,KAAKkyD,2CAI5BnxD,OAAAC,eAAI4T,EAAA3S,UAAA,YAAS,KAAb,WACE,IAAI0sB,EAAiB3uB,KAAK2uB,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAetT,aAAau2C,EAAA7gD,eAAe0K,4CAIhF1a,OAAAC,eAAI4T,EAAA3S,UAAA,cAAW,KAAf,WACE,IAAI0sB,EAAiB3uB,KAAK2uB,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAetT,aAAau2C,EAAA7gD,eAAe0K,4CAI/E7G,EAAA3S,UAAA2wD,yBAAA,SAAyBC,GACvB,OAAOA,EAAWjnB,KAAO5rC,KAAK4rC,MAIhCh3B,EAAA3S,UAAA6wD,wBAAA,SAAwBD,GACtB,IAAIjnB,EAAO5rC,KAAKsf,GAAE,GAAuBtf,KAAK4rC,KAAO5rC,KAAK4rC,KAAO,EACjE,OAAO,IAAQinB,EAAWjnB,KAAOA,GAInCh3B,EAAA3S,UAAAqd,GAAA,SAAGtM,GAA0B,OAAQhT,KAAKgT,MAAQA,IAAUA,GAE5D4B,EAAA3S,UAAA2f,MAAA,SAAM5O,GAA0B,OAA+B,IAAvBhT,KAAKgT,MAAQA,IAGrD4B,EAAA3S,UAAAwqB,QAAA,SAAQsmC,GACN3oD,OAAgB,GAATpK,KAAKyW,OAA2BzW,KAAK2uB,gBAC5C,IAAI+kB,EAAM,IAAI9+B,EAAK5U,KAAKyW,MAAmB,IAAbzW,KAAKgT,MAAwB,IAAwBhT,KAAK4rC,MAExF,OADA8H,EAAI/kB,eAAiBokC,EACdrf,GAIT9+B,EAAA3S,UAAA2nB,WAAA,SAAW3V,GACT7J,OAAgB,GAATpK,KAAKyW,OAAyBzW,KAAKoyD,oBAC1C,IAAI1e,EAAM,IAAI9+B,EAAK5U,KAAKyW,MAAmB,IAAbzW,KAAKgT,MAAwB,IAAwBhT,KAAK4rC,MAExF,OADA8H,EAAI0e,mBAAqBn+C,EAClBy/B,GAIT9+B,EAAA3S,UAAA+wD,WAAA,WASE,OARA5oD,OAAOpK,KAAKsf,GAAE,MACTtf,KAAKiyD,qBACR7nD,QAAQpK,KAAKsf,GAAE,MACftf,KAAKiyD,mBAAqB,IAAIr9C,EAAK5U,KAAKyW,KAAgB,IAAVzW,KAAKgT,MAA4BhT,KAAK4rC,MACpF5rC,KAAKiyD,mBAAmBI,gBAAkBryD,KAC1CA,KAAKiyD,mBAAmBtjC,eAAiB3uB,KAAK2uB,eAC9C3uB,KAAKiyD,mBAAmBG,mBAAqBpyD,KAAKoyD,oBAE7CpyD,KAAKiyD,oBAIdr9C,EAAA3S,UAAAmrB,eAAA,SAAeC,EAAc4lC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvBjzD,KAAKsf,GAAE,MACT,GAAI+N,EAAO/N,GAAE,QACNtf,KAAKsf,GAAE,MAAwB+N,EAAO/N,GAAE,MAC3C,GAAI4zC,EAAelzD,KAAK2uB,gBACtB,GAAIwkC,EAAc9lC,EAAOsB,eACvB,OAAOukC,EAAa9lC,eAAe+lC,QAEhC,IAAIC,EAAkBpzD,KAAKoyD,sBAC5BiB,EAAiBhmC,EAAO+kC,oBAC1B,OAAOgB,EAAgBhmC,eAAeimC,QAKzC,IAAKhmC,EAAO/N,GAAE,KACnB,GAAItf,KAAKsf,GAAE,GACT,GAAI+N,EAAO/N,GAAE,IACX,IACG2zC,GACDjzD,MAAQ4U,EAAKhR,MACb5D,KAAKsf,GAAE,IAAsB+N,EAAO/N,GAAE,GAEtC,OAAOtf,KAAK4rC,MAAQve,EAAOue,SAExB,IAAe,IAAXve,EAAO5W,KAChB,OAAOzW,KAAK4rC,MAAQ,GACf,GAAe,IAAXve,EAAO5W,KAChB,OAAOzW,KAAK4rC,MAAQ,QAEjB,GAAI5rC,KAAKsf,GAAE,IAChB,GAAI+N,EAAO/N,GAAE,GACX,OAAOtf,KAAK4rC,MAAQve,EAAOue,UAExB,GAAI5rC,KAAKsf,GAAE,OACZ+N,EAAO/N,GAAE,MACX,OAAOtf,KAAK4rC,MAAQve,EAAOue,KAIjC,OAAO,GAITh3B,EAAA3S,UAAAqxD,uBAAA,SAAuBjmC,EAAc4lC,GACnC,YADmC,IAAAA,OAAA,GAC/BjzD,KAAKsf,GAAE,KAA8Btf,KAAKotB,eAAeC,IACpDA,EAAO/N,GAAE,OACdtf,KAAKsf,GAAE,GACF+N,EAAO/N,GAAE,IAAuB+N,EAAOue,MAAQ5rC,KAAK4rC,QACxDqnB,GAAwBjzD,KAAKsf,GAAE,IAAsB+N,EAAO/N,GAAE,IAG5Dtf,KAAKyW,MAAQ4W,EAAO5W,OAItB7B,EAAA2+C,kBAAP,SAAyBxsB,EAAYC,EAAawsB,GAChD,OAAIxsB,EAAM5Z,eAAe2Z,EAAMysB,GAA+BzsB,EACrDA,EAAK3Z,eAAe4Z,EAAOwsB,GAA+BxsB,EAC5D,MAITpyB,EAAA3S,UAAAyJ,SAAA,WACE,GAAI1L,KAAKsf,GAAE,KAAuB,CAChC,IAAIqP,EAAiB3uB,KAAK2uB,eAC1B,GAAIA,EACF,OAAO3uB,KAAKsf,GAAE,KACVqP,EAAevc,aAAe,UAC9Buc,EAAevc,aAErB,IAAIggD,EAAqBpyD,KAAKoyD,mBAC9B,GAAIA,EACF,OAAOpyD,KAAKsf,GAAE,KACV,IAAM8yC,EAAmB1mD,WAAa,WACtC0mD,EAAmB1mD,WAEzBtB,QAAO,GAET,OAAQpK,KAAKyW,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAASrM,QAAO,GAChB,QAAoB,MAAO,SAO/BwK,EAAA3S,UAAAwxD,aAAA,WACE,OAAQzzD,KAAKyW,MACX,QAAS,OAAOo7C,EAAAriC,WAAWppB,IAC3B,OACA,OAAmB,OAAOyrD,EAAAriC,WAAWnpB,IACrC,OACA,OAAqB,OAAoB,IAAbrG,KAAK4rC,KAAaimB,EAAAriC,WAAWnpB,IAAMwrD,EAAAriC,WAAWppB,IAC1E,QAAmB,OAAOyrD,EAAAriC,WAAW3oB,IACrC,QAAmB,OAAOgrD,EAAAriC,WAAW1oB,IACrC,QAAoB,OAAO+qD,EAAAriC,WAAWzoB,KACtC,QAAqB,OAAO8qD,EAAAriC,WAAWyY,OAK3CrzB,EAAA3S,UAAAyxD,aAAA,SAAa/zD,GACX,OAAQK,KAAKyW,MACX,QAAoBrM,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK4rC,KAAY,OAAOjsC,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,GACrC,QAAoB,OAAOnE,EAAOoE,KAAKiuD,KAK3Cp9C,EAAA3S,UAAA0xD,YAAA,SAAYh0D,GACV,OAAQK,KAAKyW,MACX,QACA,QAAoBrM,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK4rC,KAAY,OAAOjsC,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,KAKzC8Q,EAAA3S,UAAA2xD,eAAA,SAAej0D,GACb,OAAQK,KAAKyW,MACX,QACA,QAAoBrM,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,KAAK,GAC5B,OACA,OAAqB,GAAiB,IAAbpD,KAAK4rC,KAAY,OAAOjsC,EAAOyD,KAAK,GAC7D,OACA,OAAmB,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,QAAmB,OAAO1D,EAAOkE,KAAK,GACtC,QAAmB,OAAOlE,EAAOmE,KAAK,KAK1C8Q,EAAA3S,UAAAipB,kBAAA,WACE,OAAQlrB,KAAKyW,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbzW,KAAK4rC,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAASxhC,QAAO,GAElB,MAAO,KAMOwK,EAAA1R,GAAY,IAAI0R,EAAI,EAClC,IAGmB,GAILA,EAAAzR,IAAY,IAAIyR,EAAI,EAClC,IAGkB,IAIJA,EAAAxR,IAAY,IAAIwR,EAAI,EAClC,IAEkB,IAIJA,EAAAvR,IAAY,IAAIuR,EAAI,EAClC,IAGkB,IAIJA,EAAA29C,QAAgB,IAAI39C,EAAI,EACtC,IAGkB,IAIJA,EAAA09C,QAAgB,IAAI19C,EAAI,EACtC,IAIkB,IAIJA,EAAArR,GAAW,IAAIqR,EAAI,EACjC,IAGmB,GAILA,EAAApR,IAAY,IAAIoR,EAAI,EAClC,IAGkB,IAIJA,EAAAnR,IAAY,IAAImR,EAAI,EAClC,IAEkB,IAIJA,EAAAlR,IAAY,IAAIkR,EAAI,EAClC,IAGkB,IAIJA,EAAA69C,QAAgB,IAAI79C,EAAI,EACtC,IAGkB,IAIJA,EAAA49C,QAAgB,IAAI59C,EAAI,EACtC,IAIkB,IAIJA,EAAAhR,KAAa,IAAIgR,EAAI,GACnC,IAGmB,GAILA,EAAA/Q,IAAY,IAAI+Q,EAAI,GAClC,IAEkB,IAIJA,EAAA9Q,IAAY,IAAI8Q,EAAI,GAClC,IAGkB,IAIJA,EAAA7Q,KAAa,IAAI6Q,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GAGrDA,EAAA89C,KAAa,IAAI99C,EAAKA,EAAKxR,IAAIqT,KAAM7B,EAAKxR,IAAI4P,MAAO4B,EAAKxR,IAAIwoC,MAChFh3B,EAxbA,GAAalV,EAAAkV,OA2bblV,EAAAm0D,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAM3nD,OACjBunC,EAAM,IAAIzsC,MAAkB8sD,GACvB1zD,EAAI,EAAGA,EAAI0zD,IAAY1zD,EAAGqzC,EAAIrzC,GAAKyzD,EAAMzzD,GAAGozD,eACrD,OAAO/f,GAITh0C,EAAAs0D,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAM3nD,OACrB,IAAK4nD,EAAU,MAAO,GAEtB,IADA,IAAIvnD,EAAK,IAAIvF,MAAc8sD,GAClB1zD,EAAI,EAAGA,EAAI0zD,IAAY1zD,EAAGmM,EAAGnM,GAAKyzD,EAAMzzD,GAAGqL,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAAyZ,EAAA,WAoBE,SAAAA,EACE4D,EACAohB,EACArhB,QAFA,IAAAC,MAAA,WACA,IAAAohB,MAAA,WACA,IAAArhB,MAAA,MARF/pB,KAAAi0D,qBAA8C,KAU5Cj0D,KAAKgqB,eAAiBA,GAAkC,GACxDhqB,KAAKk0D,eAAiB,KACtBl0D,KAAKm0D,mBAAqB,EAC1Bn0D,KAAKorC,WAAaA,GAA0Bx2B,EAAKG,KACjD/U,KAAK+pB,SAAWA,EAChB/pB,KAAKo0D,SAAU,EACfp0D,KAAKif,KAAOrK,EAAKnR,IAAImmB,WAAW5pB,MAoGpC,OAjGEomB,EAAAnkB,UAAAoyD,iBAAA,SAAiB7uC,GACf,IAAI6H,EAASrtB,KAAKi0D,qBAGlB,OAFK5mC,EACAjjB,OAAOijB,EAAO7H,SAAWA,GADjBxlB,KAAKi0D,qBAAuB5mC,EAAS,IAAIukC,EAAA7mC,eAAe/qB,KAAMwlB,GAEpE6H,GAITjH,EAAAnkB,UAAAkoB,iBAAA,SAAiBvC,GACf,IAAIssC,EAAiBl0D,KAAKk0D,eAC1B,OAAOA,GAAkBA,EAAe/nD,OAASyb,EAC7CssC,EAAetsC,GACf0sC,EAAwB1sC,IAI9BxB,EAAAnkB,UAAAmrB,eAAA,SAAeC,GAIb,IAAIknC,EAAev0D,KAAK+pB,SACpByqC,EAAiBnnC,EAAOtD,SAC5B,GAAIwqC,GACF,IAAMC,IAAkBD,EAAannC,eAAeonC,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIx0D,KAAKo0D,SAAW/mC,EAAO+mC,QAAS,OAAO,EAG3C,IAAIK,EAAqBz0D,KAAKgqB,eAC1B0qC,EAAuBrnC,EAAOrD,eAC9B2qC,EAAgBF,EAAmBtoD,OACvC,GAAIwoD,GAAiBD,EAAqBvoD,OAAQ,OAAO,EACzD,IAAK,IAAI9L,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EAAG,CACtC,IAAIu0D,EAAoBH,EAAmBp0D,GACvCw0D,EAAsBH,EAAqBr0D,GAC/C,IAAKu0D,EAAkBxnC,eAAeynC,GAAsB,OAAO,EAIrE,IAAIC,EAAiB90D,KAAKorC,WACtB2pB,EAAmB1nC,EAAO+d,WAC9B,OAAO0pB,GAAkBC,GAAoBD,EAAe1nC,eAAe2nC,IAItE3uC,EAAA4uC,oBAAP,SAA2BhrC,EAA+BohB,EAAkBrhB,QAAA,IAAAA,MAAA,MAC1E,IAAIvd,EAAK,GAGT,GAFAA,EAAGE,KAAK0+B,EAAWlgB,qBACfnB,GAAUvd,EAAGE,KAAKqd,EAASmB,qBAC3BlB,EACF,IAAK,IAAI3pB,EAAI,EAAG+V,EAAI4T,EAAe7d,OAAQ9L,EAAI+V,IAAK/V,EAAGmM,EAAGE,KAAKsd,EAAe3pB,GAAG6qB,qBAEnF,MAAO,WAAa1e,EAAGG,KAAK,KAI9ByZ,EAAAnkB,UAAAipB,kBAAA,WACE,OAAO9E,EAAU4uC,oBAAoBh1D,KAAKgqB,eAAgBhqB,KAAKorC,WAAYprC,KAAK+pB,WAIlF3D,EAAAnkB,UAAAyJ,SAAA,WACE,IAAIc,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,KACR,IAAIkb,EAAQ,EACRmC,EAAW/pB,KAAK+pB,SAChBA,IACFvd,EAAGE,KAAK,UACRtC,QAAQ2f,EAASqoC,oBACjB5lD,EAAGE,KAAKqd,EAASre,YACjBkc,EAAQ,GAEV,IAAI27B,EAAavjD,KAAKgqB,eAClB2qC,EAAgBpR,EAAWp3C,OAC/B,GAAIwoD,EAKF,IAJA,IAAI5pB,EAAQ/qC,KAAKk0D,eACbjpB,EAAWF,EAAQA,EAAM5+B,OAAS,EAClC8oD,EAAgBj1D,KAAKm0D,mBACrBe,EAAYl1D,KAAKo0D,QAAUO,EAAgB,GAAK,EAC3Ct0D,EAAI,EAAGA,EAAIs0D,IAAiBt0D,IAAKunB,EACpCA,GAAOpb,EAAGE,KAAK,MACfrM,GAAK60D,GAAW1oD,EAAGE,KAAK,OACxBrM,EAAI4qC,EAAUz+B,EAAGE,KAAgBq+B,EAAO1qC,IACvCmM,EAAGE,KAAK4nD,EAAwBj0D,IACjCA,GAAK40D,GAAiB50D,GAAK60D,EAAW1oD,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAK62C,EAAWljD,GAAGqL,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAK1M,KAAKorC,WAAW1/B,YACjBc,EAAGG,KAAK,KAEnByZ,EAnIA,GAAa1mB,EAAA0mB,YAwIb,IAAI+uC,EAA+C,KAGnD,SAAgBb,EAAwB1sC,GACjCutC,IAA6BA,EAA8B,IAChE,IAAK,IAAI90D,EAAI80D,EAA4BhpD,OAAQ9L,GAAKunB,IAASvnB,EAC7D80D,EAA4BzoD,KAAK,OAASrM,EAAEqL,SAAS,KAEvD,OAAOypD,EAA4BvtC,EAAQ,GAL7CloB,EAAA40D,ybC/qBA,IAuBYjS,EAwIA+S,EA/JZ3nD,EAAAtN,EAAA,GAMAwN,EAAAxN,EAAA,GAKA0J,EAAA1J,EAAA,GA0JA,SAAgBk1D,EAAiBppD,GAE/B,OADA7B,OAAO6B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAOo2C,EAAM7/B,SAC9B,IAAK,KAAM,OAAO6/B,EAAMiT,GACxB,IAAK,QAAS,OAAOjT,EAAMkT,MAC3B,IAAK,QAAS,OAAOlT,EAAMmT,MAE7B,MAEF,QACE,OAAQvpD,GACN,IAAK,QAAS,OAAOo2C,EAAMiO,MAE7B,MAEF,QACE,OAAQrkD,GACN,IAAK,OAAQ,OAAOo2C,EAAMoT,KAC1B,IAAK,QAAS,OAAOpT,EAAMqT,MAC3B,IAAK,QAAS,OAAOrT,EAAMxjC,MAC3B,IAAK,WAAY,OAAOwjC,EAAMkO,SAC9B,IAAK,QAAS,OAAOlO,EAAM5iC,MAC3B,IAAK,cAAe,OAAO4iC,EAAMz/B,YAEnC,MAEF,SACE,OAAQ3W,GACN,IAAK,WAAY,OAAOo2C,EAAMsT,SAC9B,IAAK,UAAW,OAAOtT,EAAM/8B,QAC7B,IAAK,UAAW,OAAO+8B,EAAMuT,QAC7B,IAAK,SAAU,OAAOvT,EAAMwT,OAC5B,IAAK,KAAM,OAAOxT,EAAMmO,GAE1B,MAEF,SACE,OAAQvkD,GACN,IAAK,OAAQ,OAAOo2C,EAAMyT,KAC1B,IAAK,OAAQ,OAAOzT,EAAMr7B,KAC1B,IAAK,SAAU,OAAOq7B,EAAMntC,OAC5B,IAAK,UAAW,OAAOmtC,EAAM0T,QAE/B,MAEF,SACE,OAAQ9pD,GACN,IAAK,QAAS,OAAOo2C,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAM2T,QAC7B,IAAK,MAAO,OAAO3T,EAAMwO,IACzB,IAAK,OAAQ,OAAOxO,EAAM4T,KAC1B,IAAK,WAAY,OAAO5T,EAAM1jC,SAEhC,MAEF,SACE,OAAQ1S,GACN,IAAK,MAAO,OAAOo2C,EAAMxgC,IAE3B,MAEF,SACE,OAAQ5V,GACN,IAAK,KAAM,OAAOo2C,EAAM2O,GACxB,IAAK,aAAc,OAAO3O,EAAM6T,WAChC,IAAK,SAAU,OAAO7T,EAAMvrC,OAC5B,IAAK,KAAM,OAAOurC,EAAM8T,GACxB,IAAK,aAAc,OAAO9T,EAAM2M,WAChC,IAAK,YAAa,OAAO3M,EAAMl2B,UAC/B,IAAK,KAAM,OAAOk2B,EAAM+T,GAE1B,MAEF,SACE,OAAQnqD,GACN,IAAK,QAAS,OAAOo2C,EAAMgU,MAE7B,MAEF,SACE,OAAQpqD,GACN,IAAK,MAAO,OAAOo2C,EAAMiU,IAE3B,MAEF,SACE,OAAQrqD,GACN,IAAK,SAAU,OAAOo2C,EAAMkU,OAE9B,MAEF,SACE,OAAQtqD,GACN,IAAK,YAAa,OAAOo2C,EAAMt7B,UAC/B,IAAK,MAAO,OAAOs7B,EAAM6M,IACzB,IAAK,OAAQ,OAAO7M,EAAME,KAE5B,MAEF,SACE,OAAQt2C,GACN,IAAK,KAAM,OAAOo2C,EAAMmU,GAE1B,MAEF,SACE,OAAQvqD,GACN,IAAK,UAAW,OAAOo2C,EAAMoU,QAC7B,IAAK,UAAW,OAAOpU,EAAMqU,QAC7B,IAAK,YAAa,OAAOrU,EAAMsU,UAC/B,IAAK,SAAU,OAAOtU,EAAMuU,OAE9B,MAEF,SACE,OAAQ3qD,GACN,IAAK,WAAY,OAAOo2C,EAAMjgC,SAC9B,IAAK,SAAU,OAAOigC,EAAM6O,OAE9B,MAEF,SACE,OAAQjlD,GACN,IAAK,MAAO,OAAOo2C,EAAMvgC,IACzB,IAAK,SAAU,OAAOugC,EAAMngC,OAC5B,IAAK,QAAS,OAAOmgC,EAAMY,MAC3B,IAAK,SAAU,OAAOZ,EAAM+O,OAE9B,MAEF,SACE,OAAQnlD,GACN,IAAK,OAAQ,OAAOo2C,EAAMiN,KAC1B,IAAK,QAAS,OAAOjN,EAAMgP,MAC3B,IAAK,OAAQ,OAAOhP,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAMiP,IACzB,IAAK,OAAQ,OAAOjP,EAAMwU,KAC1B,IAAK,SAAU,OAAOxU,EAAMyU,OAE9B,MAEF,SACE,OAAQ7qD,GACN,IAAK,MAAO,OAAOo2C,EAAM0U,IACzB,IAAK,OAAQ,OAAO1U,EAAMmP,KAE5B,MAEF,SACE,OAAQvlD,GACN,IAAK,QAAS,OAAOo2C,EAAMoP,MAC3B,IAAK,OAAQ,OAAOpP,EAAM2U,KAE5B,MAEF,SACE,OAAQ/qD,GACN,IAAK,QAAS,OAAOo2C,EAAM4U,OAKjC,OAAO5U,EAAMxxC,QAGf,SAAgBqmD,EAAsBC,GACpC,OAAQA,GACN,KAAK9U,EAAM7/B,SACX,KAAK6/B,EAAMiT,GACX,KAAKjT,EAAMz/B,YACX,KAAKy/B,EAAM/8B,QACX,KAAK+8B,EAAMwT,OACX,KAAKxT,EAAM4T,KACX,KAAK5T,EAAMwO,IACX,KAAKxO,EAAMxgC,IACX,KAAKwgC,EAAM2M,WACX,KAAK3M,EAAM+T,GACX,KAAK/T,EAAMgU,MACX,KAAKhU,EAAMkU,OACX,KAAKlU,EAAMt7B,UACX,KAAKs7B,EAAME,KACX,KAAKF,EAAMjgC,SACX,KAAKigC,EAAMvgC,IACX,KAAKugC,EAAMwU,KACX,KAAKxU,EAAMmP,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYnP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA3iD,EAAA2iD,QAAA3iD,EAAA2iD,MAAK,KAwIjB,SAAY+S,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA11D,EAAA01D,qBAAA11D,EAAA01D,mBAAkB,KAM9B11D,EAAA21D,mBAwKA31D,EAAAw3D,wBAwBAx3D,EAAA03D,4BAAA,SAA4Cx2D,GAE1C,OADAwJ,OAAOxJ,EAAKuL,QACJvL,EAAK2L,WAAW,IACtB,SAAiB,MAAe,UAAR3L,EACxB,SAAiB,MAAe,OAARA,EACxB,SAAiB,MAAe,cAARA,EACxB,SAAiB,MAAe,QAARA,EACxB,SAAiB,MAAe,QAARA,EAE1B,OAAO,GAGTlB,EAAA23D,sBAAA,SAAsCF,GACpC,OAAQA,GACN,KAAK9U,EAAMwT,OAAQ,MAAO,SAC1B,KAAKxT,EAAM8T,GAAI,MAAO,KACtB,KAAK9T,EAAM2M,WAAY,MAAO,aAC9B,KAAK3M,EAAM6M,IAAK,MAAO,MACvB,KAAK7M,EAAMyU,OAAQ,MAAO,SAC1B,KAAKzU,EAAMmP,KAAM,MAAO,OACxB,KAAKnP,EAAM4U,MAAO,MAAO,QACzB,KAAK5U,EAAMiV,YAAa,MAAO,MAC/B,KAAKjV,EAAMyM,MAAO,MAAO,IACzB,KAAKzM,EAAMkV,SAAU,MAAO,IAC5B,KAAKlV,EAAMmV,YAAa,MAAO,IAC/B,KAAKnV,EAAMoV,gBAAiB,MAAO,KACnC,KAAKpV,EAAMqV,mBAAoB,MAAO,KACtC,KAAKrV,EAAMsV,cAAe,MAAO,KACjC,KAAKtV,EAAMuV,mBAAoB,MAAO,KACtC,KAAKvV,EAAMwV,qBAAsB,MAAO,MACxC,KAAKxV,EAAMyV,0BAA2B,MAAO,MAC7C,KAAKzV,EAAMjyC,KAAM,MAAO,IACxB,KAAKiyC,EAAM/xC,MAAO,MAAO,IACzB,KAAK+xC,EAAM0V,kBAAmB,MAAO,KACrC,KAAK1V,EAAM2V,SAAU,MAAO,IAC5B,KAAK3V,EAAM4V,MAAO,MAAO,IACzB,KAAK5V,EAAM6V,QAAS,MAAO,IAC3B,KAAK7V,EAAM8V,UAAW,MAAO,KAC7B,KAAK9V,EAAM+V,YAAa,MAAO,KAC/B,KAAK/V,EAAMgW,kBAAmB,MAAO,KACrC,KAAKhW,EAAMiW,wBAAyB,MAAO,KAC3C,KAAKjW,EAAMkW,oCAAqC,MAAO,MACvD,KAAKlW,EAAMmW,UAAW,MAAO,IAC7B,KAAKnW,EAAMoW,IAAK,MAAO,IACvB,KAAKpW,EAAMqW,MAAO,MAAO,IACzB,KAAKrW,EAAMsW,YAAa,MAAO,IAC/B,KAAKtW,EAAMuW,MAAO,MAAO,IACzB,KAAKvW,EAAMwW,oBAAqB,MAAO,KACvC,KAAKxW,EAAMyW,QAAS,MAAO,KAC3B,KAAKzW,EAAM0W,OAAQ,MAAO,IAC1B,KAAK1W,EAAM2W,YAAa,MAAO,KAC/B,KAAK3W,EAAM4W,aAAc,MAAO,KAChC,KAAK5W,EAAM6W,gBAAiB,MAAO,KACnC,KAAK7W,EAAM8W,yBAA0B,MAAO,MAC5C,KAAK9W,EAAM+W,aAAc,MAAO,KAChC,KAAK/W,EAAMgX,eAAgB,MAAO,KAClC,KAAKhX,EAAMiX,yBAA0B,MAAO,MAC5C,KAAKjX,EAAMkX,+BAAgC,MAAO,MAClD,KAAKlX,EAAMmX,2CAA4C,MAAO,OAC9D,KAAKnX,EAAMoX,iBAAkB,MAAO,KACpC,KAAKpX,EAAMqX,WAAY,MAAO,KAC9B,KAAKrX,EAAMsX,aAAc,MAAO,KAChC,QAEE,OADAvvD,QAAO,GACA,KAKb,IAAAuR,EAAA,WAUE,SAAAA,EAAYhQ,EAAgBS,EAAYC,GA6CxCrM,KAAA6qB,aAAsB,EA5CpB7qB,KAAK2L,OAASA,EACd3L,KAAKoM,MAAQA,EACbpM,KAAKqM,IAAMA,EA2Cf,OAxCSsP,EAAAhP,KAAP,SAAYitD,EAAUC,GACpB,GAAID,EAAEjuD,QAAUkuD,EAAEluD,OAAQ,MAAM,IAAIyQ,MAAM,mBAC1C,OAAO,IAAIT,EAAMi+C,EAAEjuD,OACjBiuD,EAAExtD,MAAQytD,EAAEztD,MAAQwtD,EAAExtD,MAAQytD,EAAEztD,MAChCwtD,EAAEvtD,IAAMwtD,EAAExtD,IAAMutD,EAAEvtD,IAAMwtD,EAAExtD,MAI9BtL,OAAAC,eAAI2a,EAAA1Z,UAAA,UAAO,KAAX,WACE,OAAO,IAAI0Z,EAAM3b,KAAK2L,OAAQ3L,KAAKoM,MAAOpM,KAAKoM,wCAGjDrL,OAAAC,eAAI2a,EAAA1Z,UAAA,QAAK,KAAT,WACE,OAAO,IAAI0Z,EAAM3b,KAAK2L,OAAQ3L,KAAKqM,IAAKrM,KAAKqM,sCAG/CtL,OAAAC,eAAI2a,EAAA1Z,UAAA,OAAI,KAAR,WAGE,IAFA,IAAIgK,EAAOjM,KAAK2L,OAAOM,KACnBJ,EAAO,EACFkkD,EAAM/vD,KAAKoM,MAAO2jD,GAAO,IAAKA,EACb,IAApB9jD,EAAKM,WAAWwjD,IAA2BlkD,IAEjD,OAAOA,mCAGT9K,OAAAC,eAAI2a,EAAA1Z,UAAA,SAAM,KAAV,WAGE,IAFA,IAAIgK,EAAOjM,KAAK2L,OAAOM,KACnBH,EAAS,EACJikD,EAAM/vD,KAAKoM,MAAQ,EAAG2jD,GAAO,GACZ,IAApB9jD,EAAKM,WAAWwjD,KADqBA,IAEvCjkD,EAEJ,OAAOA,mCAGT6P,EAAA1Z,UAAAyJ,SAAA,WACE,OAAO1L,KAAK2L,OAAOM,KAAKQ,UAAUzM,KAAKoM,MAAOpM,KAAKqM,MAIvDsP,EAxDA,GAAajc,EAAAic,QAgEb,IAAAm+C,EAAA,SAAA7oD,GAgBE,SAAA6oD,EAAYnuD,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAAmE,EACED,EAAAzQ,KAAAR,KAAM+M,IAAY/M,KAdpBkR,EAAA7E,IAAW,EAEX6E,EAAA6+C,IAAW,EACX7+C,EAAAimD,OAAgB,EAChBjmD,EAAA6oD,SAAgB,EAEhB7oD,EAAA8oD,WAAoB,EACpB9oD,EAAA+oD,aAAoB,EACpB/oD,EAAAgpD,oBAA2B,EAE3BhpD,EAAAipD,UAAmC,KAMjCjpD,EAAKvF,OAASA,EACduF,EAAK6+C,IAAM,EACX7+C,EAAK7E,IAAMV,EAAOM,KAAKE,OACvB+E,EAAKnE,YAAcA,GAAe,IAAI9F,MAEtC,IAAIoF,EAAM6E,EAAK7E,IACXJ,EAAON,EAAOM,KAWlB,GAPEiF,EAAK6+C,IAAM1jD,GACc,OAAzBJ,EAAKM,WAAW2E,EAAK6+C,QAEnB7+C,EAAK6+C,IAKP7+C,EAAK6+C,IAAM,EAAI1jD,GACU,IAAzBJ,EAAKM,WAAW2E,EAAK6+C,MACQ,IAA7B9jD,EAAKM,WAAW2E,EAAK6+C,IAAM,GAG3B,IADA7+C,EAAK6+C,KAAO,EAEV7+C,EAAK6+C,IAAM1jD,GACc,IAAzBJ,EAAKM,WAAW2E,EAAK6+C,QAEnB7+C,EAAK6+C,aA8iCf,OA5lC+Bx9C,EAAAunD,EAAA7oD,GAoD7B6oD,EAAA73D,UAAAgW,KAAA,SAAKmiD,GAEH,YAFG,IAAAA,MAAyChF,EAAmBQ,SAC/D51D,KAAKg6D,WAAa,EACXh6D,KAAKm3D,MAAQn3D,KAAKq6D,WAAWD,IAG9BN,EAAA73D,UAAAo4D,WAAR,SACED,EACAE,QADA,IAAAF,MAAyChF,EAAmBQ,cAC5D,IAAA0E,MAAsBl3D,IAAIqxC,WAI1B,IAFA,IAAIpoC,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK+vD,IAAM1jD,GAAK,CACrBrM,KAAK+5D,SAAW/5D,KAAK+vD,IACrB,IAAIrvD,EAAIuL,EAAKM,WAAWvM,KAAK+vD,KAC7B,OAAQrvD,GACN,QACE,OACIV,KAAK+vD,IAAM1jD,GACY,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI/vD,KAAK+vD,IACP,MAEF,QAEE,QADE/vD,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMyV,2BAERzV,EAAMuV,oBAERvV,EAAMsW,YAEf,QACA,QACA,QACE,OAAOtW,EAAMkY,cAEf,QAEE,QADEv6D,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMgX,gBAERhX,EAAM6V,QAEf,QAEE,KADEl4D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA1N,EAAMwW,oBAEf,GAAO,IAAH2B,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMoX,iBAGjB,OAAOpX,EAAMmW,UAEf,QAEE,QADEx4D,KAAK+vD,IACA1N,EAAMoY,UAEf,QAEE,QADEz6D,KAAK+vD,IACA1N,EAAMqY,WAEf,QAEE,KADE16D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA1N,EAAM6W,gBAEf,GAAO,IAAHsB,EAEF,QADEx6D,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAM8W,0BAER9W,EAAM0V,kBAGjB,OAAO1V,EAAM2V,SAEf,QAEE,KADEh4D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA1N,EAAM8V,UAEf,GAAO,IAAHqC,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAM2W,YAGjB,OAAO3W,EAAMjyC,KAEf,QAEE,QADEpQ,KAAK+vD,IACA1N,EAAMyM,MAEf,QAEE,KADE9uD,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA1N,EAAM+V,YAEf,GAAO,IAAHoC,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAM4W,aAGjB,OAAO5W,EAAM/xC,MAEf,QAEE,KADEtQ,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CACxC,IAAImuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,KAC/B,GAAIlmD,EAAA8wD,eAAeH,GAEjB,QADEx6D,KAAK+vD,IACA1N,EAAMuY,aAEf,GACEN,EAAiB,GAAKt6D,KAAK+vD,IAAM,EAAI1jD,GAClC,IAAHmuD,GAC6B,IAA7BvuD,EAAKM,WAAWvM,KAAK+vD,IAAM,GAG3B,OADA/vD,KAAK+vD,KAAO,EACL1N,EAAMiV,YAGjB,OAAOjV,EAAMwY,IAEf,QACE,IAAIC,EAAkB96D,KAAK+vD,IAE3B,KADE/vD,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MACJ,CACzB,IAAIvL,EAAc72C,EAAA2gD,YAAYyM,KAQ9B,IANE/6D,KAAK+vD,IAAM,EAAI1jD,GACc,IAA7BJ,EAAKM,WAAWvM,KAAK+vD,IAAM,OAEzB/vD,KAAK+vD,IACPvL,EAAc72C,EAAA2gD,YAAY0M,UAEnBh7D,KAAK+vD,IAAM1jD,GAClB,GAA6B,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,KAA2B,GAChD/vD,KAAK+vD,IACP,MAGA/vD,KAAKm6D,WACPn6D,KAAKm6D,UACH3V,EACAv4C,EAAKQ,UAAUquD,EAAiB96D,KAAK+vD,KACrC/vD,KAAK+K,MAAM+vD,EAAiB96D,KAAK+vD,MAGrC,MAEF,GAAO,IAAHyK,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJj7D,KAAK+vD,IAAM1jD,GAElB,GACG,KAFH3L,EAAIuL,EAAKM,WAAWvM,KAAK+vD,OAGvB/vD,KAAK+vD,IAAM,EAAI1jD,GACc,IAA7BJ,EAAKM,WAAWvM,KAAK+vD,IAAM,GAC3B,CACA/vD,KAAK+vD,KAAO,EACZkL,GAAS,EACT,MAGCA,EAKMj7D,KAAKm6D,WACdn6D,KAAKm6D,UACHxsD,EAAA2gD,YAAY+B,MACZpkD,EAAKQ,UAAUquD,EAAiB96D,KAAK+vD,KACrC/vD,KAAK+K,MAAM+vD,EAAiB96D,KAAK+vD,MARnC/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfl7D,KAAK+K,MAAM/K,KAAK+vD,KAAM,MAS1B,MAEF,GAAO,IAAHyK,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAM+W,aAGjB,OAAO/W,EAAM4V,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOj4D,KAAKm7D,cACR9Y,EAAM+Y,eACN/Y,EAAMuY,aAEZ,QAEE,QADE56D,KAAK+vD,IACA1N,EAAMgZ,MAEf,QAEE,QADEr7D,KAAK+vD,IACA1N,EAAMiZ,UAEf,QAEE,KADEt7D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IAELuK,EAAiB,GACjBt6D,KAAK+vD,IAAM1jD,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMiX,0BAERjX,EAAMgW,kBAEf,GAAO,IAAHmC,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMoV,gBAGjB,OAAOpV,EAAMkV,SAEf,QAEE,KADEv3D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IAELuK,EAAiB,GACjBt6D,KAAK+vD,IAAM1jD,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMwV,sBAERxV,EAAMsV,cAEf,GAAO,IAAH6C,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMkZ,mBAGjB,OAAOlZ,EAAM0W,OAEf,QAEE,KADE/4D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MACE,CAE/B,KADE/vD,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,KADPmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAGzB,QADE/vD,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMmX,4CAERnX,EAAMkW,oCAEf,GAAO,IAAHiC,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMkX,+BAGjB,OAAOlX,EAAMiW,wBAEf,GAAO,IAAHkC,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMqV,mBAGjB,OAAOrV,EAAMmV,YAEf,QAEE,QADEx3D,KAAK+vD,IACA1N,EAAMmZ,SAEf,QAEE,QADEx7D,KAAK+vD,IACA1N,EAAMoZ,YAEf,QAEE,QADEz7D,KAAK+vD,IACA1N,EAAMqZ,aAEf,QAEE,QADE17D,KAAK+vD,IAELuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA1N,EAAMsX,cAERtX,EAAMqW,MAEf,SAEE,QADE14D,KAAK+vD,IACA1N,EAAMsZ,UAEf,SAEE,KADE37D,KAAK+vD,IACHuK,EAAiB,GAAKt6D,KAAK+vD,IAAM1jD,EAAK,CAExC,GAAO,MADHmuD,EAAMvuD,EAAKM,WAAWvM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA1N,EAAMyW,QAEf,GAAO,IAAH0B,EAEF,QADEx6D,KAAK+vD,IACA1N,EAAMqX,WAGjB,OAAOrX,EAAMoW,IAEf,SAEE,QADEz4D,KAAK+vD,IACA1N,EAAMuZ,WAEf,SAEE,QADE57D,KAAK+vD,IACA1N,EAAMuW,MAEf,QAEE,QADE54D,KAAK+vD,IACA1N,EAAMwZ,GAEf,QACE,GAAIhyD,EAAAiyD,kBAAkBp7D,GAAI,CACxB,GAAImJ,EAAAkyD,mBAAmBr7D,GAAI,CAEzB,IADA,IAAIs7D,EAAYh8D,KAAK+vD,MAEjB/vD,KAAK+vD,IAAM1jD,GACbxC,EAAAoyD,iBAAiBv7D,EAAIuL,EAAKM,WAAWvM,KAAK+vD,OAE1C,IAAKlmD,EAAAkyD,mBAAmBr7D,GAEtB,OADAV,KAAK+vD,IAAMiM,EACJ3Z,EAAMM,WAGjB,IACIuZ,EAAe7G,EADDppD,EAAKQ,UAAUuvD,EAAWh8D,KAAK+vD,MAEjD,GACEmM,IAAiB7Z,EAAMxxC,SACvBupD,IAAuBhF,EAAmB+G,SAExC/B,IAAuBhF,EAAmBgH,SAC1ClF,EAAsBgF,IAGxB,OAAOA,EAETl8D,KAAK+vD,IAAMiM,EAEb,OAAO3Z,EAAMM,WACR,GAAI94C,EAAAwyD,aAAa37D,GAAI,GACxBV,KAAK+vD,IACP,MAOF,OALA/vD,KAAKqN,MACHI,EAAAhD,eAAe6xD,kBACft8D,KAAK+K,MAAM/K,KAAK+vD,IAAK/vD,KAAK+vD,IAAM,MAEhC/vD,KAAK+vD,IACA1N,EAAMxxC,SAInB,OAAOwxC,EAAMka,WAGfzC,EAAA73D,UAAAu6D,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyChF,EAAmBQ,cAC5D,IAAA8G,MAAyBt5D,IAAIqxC,WAE7B,IAAIxoC,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAKg6D,UAAY,EAAG,CACtB,IAAIgC,EAAYh8D,KAAK+vD,IACjB4M,EAAc38D,KAAKm3D,MACnByF,EAAiB58D,KAAK+5D,SAG1B,GAFA/5D,KAAKg6D,UAAYh6D,KAAKq6D,WAAWD,EAAoBsC,GACrD18D,KAAKi6D,aAAej6D,KAAK+5D,SACrB0C,EAAgB,CAClBz8D,KAAKk6D,oBAAqB,EAC1B,IAAK,IAAInK,EAAMiM,EAAW3vD,EAAMrM,KAAKi6D,aAAclK,EAAM1jD,IAAO0jD,EAC9D,GAAIlmD,EAAAyC,YAAYL,EAAKM,WAAWwjD,IAAO,CACrC/vD,KAAKk6D,oBAAqB,EAC1B,OAINl6D,KAAK+vD,IAAMiM,EACXh8D,KAAKm3D,MAAQwF,EACb38D,KAAK+5D,SAAW6C,EAElB,OAAO58D,KAAKg6D,WAGdF,EAAA73D,UAAA46D,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyChF,EAAmBgH,QAClEp8D,KAAK88D,KAAKza,EAAMM,WAAYyX,IAGrCN,EAAA73D,UAAA66D,KAAA,SAAK3F,EAAciD,QAAA,IAAAA,MAAyChF,EAAmBQ,SAC7E,IAAIoG,EAAYh8D,KAAK+vD,IACjB4M,EAAc38D,KAAKm3D,MACnByF,EAAiB58D,KAAK+5D,SACtB2C,EAAoBt5D,IAAIqxC,UAC5B,OAAQ0iB,GACN,KAAK9U,EAAMmV,YACTkF,EAAoB,EAKxB,OADA18D,KAAKm3D,MAAQn3D,KAAKq6D,WAAWD,EAAoBsC,GAC7C18D,KAAKm3D,OAASA,GAChBn3D,KAAKg6D,WAAa,GACX,IAEPh6D,KAAK+vD,IAAMiM,EACXh8D,KAAKm3D,MAAQwF,EACb38D,KAAK+5D,SAAW6C,GACT,IAIX9C,EAAA73D,UAAA86D,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMjN,IAAM/vD,KAAK+vD,IACjBiN,EAAM7F,MAAQn3D,KAAKm3D,MACnB6F,EAAMjD,SAAW/5D,KAAK+5D,SACfiD,GAGTlD,EAAA73D,UAAAk7D,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAA73D,UAAAm7D,MAAA,SAAMJ,GACJh9D,KAAK+vD,IAAMiN,EAAMjN,IACjB/vD,KAAKm3D,MAAQ6F,EAAM7F,MACnBn3D,KAAK+5D,SAAWiD,EAAMjD,SACtB/5D,KAAKg6D,WAAa,GAGpBF,EAAA73D,UAAA8I,MAAA,SAAMqB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQpM,KAAK+5D,SACb1tD,EAAMrM,KAAK+vD,KACF1jD,EAAM,IACfA,EAAMD,GAED,IAAIuP,EAAM3b,KAAK2L,OAAQS,EAAOC,IAGvCytD,EAAA73D,UAAAo7D,eAAA,WAIE,IAHA,IAAIpxD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,MAEXrM,KAAK+vD,IAAM1jD,GACbxC,EAAAoyD,iBAAiBhwD,EAAKM,WAAWvM,KAAK+vD,QAExC,OAAO9jD,EAAKQ,UAAUL,EAAOpM,KAAK+vD,MAGpC+J,EAAA73D,UAAA6xC,WAAA,WAME,IALA,IAAI7nC,EAAOjM,KAAK2L,OAAOM,KACnBqxD,EAAQrxD,EAAKM,WAAWvM,KAAK+vD,OAC7B3jD,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,IACXg5B,EAAS,KACA,CACX,GAAIrlC,KAAK+vD,KAAO1jD,EAAK,CACnBg5B,GAAUp5B,EAAKQ,UAAUL,EAAOpM,KAAK+vD,KACrC/vD,KAAKqN,MACHI,EAAAhD,eAAe8yD,4BACfv9D,KAAK+K,MAAMqB,EAAQ,EAAGC,IAExB,MAEF,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK+vD,KAC7B,GAAIrvD,GAAK48D,EAAO,CACdj4B,GAAUp5B,EAAKQ,UAAUL,EAAOpM,KAAK+vD,OACrC,MAEF,GAAK,IAADrvD,EAAJ,CAMA,GAAImJ,EAAAyC,YAAY5L,GAAI,CAClB2kC,GAAUp5B,EAAKQ,UAAUL,EAAOpM,KAAK+vD,KACrC/vD,KAAKqN,MACHI,EAAAhD,eAAe8yD,4BACfv9D,KAAK+K,MAAMqB,EAAQ,EAAGpM,KAAK+vD,MAE7B,QAEA/vD,KAAK+vD,SAbL1qB,GAAUp5B,EAAKQ,UAAUL,EAAOpM,KAAK+vD,KACrC1qB,GAAUrlC,KAAKw9D,qBACfpxD,EAAQpM,KAAK+vD,IAajB,OAAO1qB,GAGTy0B,EAAA73D,UAAAu7D,mBAAA,WACE,IAAInxD,EAAMrM,KAAKqM,IACf,KAAMrM,KAAK+vD,KAAO1jD,EAKhB,OAJArM,KAAKqN,MACHI,EAAAhD,eAAegzD,uBACfz9D,KAAK+K,MAAMsB,IAEN,GAGT,IAAIJ,EAAOjM,KAAK2L,OAAOM,KACnBvL,EAAIuL,EAAKM,WAAWvM,KAAK+vD,OAC7B,OAAQrvD,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK+vD,IAAM1jD,GACc,KAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA/vD,KAAK09D,6BAEP19D,KAAK29D,oBAEd,QAEI39D,KAAK+vD,IAAM1jD,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,QAEnB/vD,KAAK+vD,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAO/oD,OAAO42D,aAAal9D,KAIxCo5D,EAAA73D,UAAA47D,kBAAA,WAKE,IAJA,IAAI5xD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,IACXyxD,GAAU,IACD,CACX,GAAI99D,KAAK+vD,KAAO1jD,EAAK,CACnBrM,KAAKqN,MACHI,EAAAhD,eAAeszD,wCACf/9D,KAAK+K,MAAMqB,EAAOC,IAEpB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,KAAzB,CAKA,IAAIrvD,EAAIuL,EAAKM,WAAWvM,KAAK+vD,KAC7B,IAAK+N,GAAY,IAADp9D,EAAqB,MACrC,GAAImJ,EAAAyC,YAAY5L,GAAI,CAClBV,KAAKqN,MACHI,EAAAhD,eAAeszD,wCACf/9D,KAAK+K,MAAMqB,EAAOpM,KAAK+vD,MAEzB,QAEA/vD,KAAK+vD,IACP+N,GAAU,QAdN99D,KAAK+vD,IACP+N,GAAU,EAed,OAAO7xD,EAAKQ,UAAUL,EAAOpM,KAAK+vD,MAGpC+J,EAAA73D,UAAA+7D,gBAAA,WAKE,IAJA,IAAI/xD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,IACX2G,EAAQ,EACLhT,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI3L,EAASuL,EAAKM,WAAWvM,KAAK+vD,KAClC,IAAKlmD,EAAAoyD,iBAAiBv7D,GAAI,MAI1B,SAHEV,KAAK+vD,IAGCrvD,GACN,SACEsS,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFhT,KAAKqN,MACHI,EAAAhD,eAAewzD,iCACfj+D,KAAK+K,MAAMqB,EAAOpM,KAAK+vD,MAGpB9jD,EAAKQ,UAAUL,EAAOpM,KAAK+vD,MAGpC+J,EAAA73D,UAAAk5D,YAAA,WACE,IAAI9uD,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAK+vD,IAAM,EAAI1jD,GAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,KAC7C,OAAQ9jD,EAAKM,WAAWvM,KAAK+vD,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM/vD,KAAK+vD,IACRA,EAAM1jD,GAAK,CAChB,IAAI3L,EAAIuL,EAAKM,WAAWwjD,GACxB,GAAK,IAADrvD,GAAsB,KAADA,GAAoB,IAADA,EAAiB,OAAO,EACpE,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DqvD,IAEF,OAAO,GAGT+J,EAAA73D,UAAAi8D,YAAA,WACE,IAAIjyD,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAK+vD,IAAM,EAAI/vD,KAAKqM,KAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,KAAqB,CACvE,OAAQ9jD,EAAKM,WAAWvM,KAAK+vD,IAAM,IACjC,SACA,QAEE,OADA/vD,KAAK+vD,KAAO,EACL/vD,KAAKm+D,iBAEd,QACA,QAEE,OADAn+D,KAAK+vD,KAAO,EACL/vD,KAAKo+D,oBAEd,SACA,QAEE,OADAp+D,KAAK+vD,KAAO,EACL/vD,KAAKq+D,mBAGhB,GAAIx0D,EAAAy0D,aAAaryD,EAAKM,WAAWvM,KAAK+vD,IAAM,IAAK,CAC/C,IAAI3jD,EAAQpM,KAAK+vD,MACf/vD,KAAK+vD,IACP,IAAIzuD,EAAQtB,KAAKq+D,mBAKjB,OAJAr+D,KAAKqN,MACHI,EAAAhD,eAAe8zD,8CACfv+D,KAAK+K,MAAMqB,EAAOpM,KAAK+vD,MAElBzuD,GAGX,OAAOtB,KAAKw+D,sBAGd1E,EAAA73D,UAAAk8D,eAAA,WAOE,IANA,IAAIlyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACbzuD,EAAQiU,QAAQ,GAChBkpD,EAAQlpD,QAAQ,GAChBmpD,EAAStyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI0jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIuL,EAAKM,WAAWwjD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQq9D,QACNC,QAAQt9D,EAAOm9D,GACflpD,QAAQ7U,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQq9D,QACNC,QAAQt9D,EAAOm9D,GACflpD,QAAQ,GAAK7U,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQq9D,QACNC,QAAQt9D,EAAOm9D,GACflpD,QAAQ,GAAK7U,EAAC,SAEX,IAAK,IAADA,EAWT,MAVIg+D,GAAU3O,GACZ/vD,KAAKqN,MACHqxD,GAAUtyD,EACNqB,EAAAhD,eAAeo0D,wCACfpxD,EAAAhD,eAAeq0D,0DACnB9+D,KAAK+K,MAAMglD,IAGf2O,EAAS3O,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO3jD,EACdpM,KAAKqN,MACHI,EAAAhD,eAAes0D,2BACf/+D,KAAK+K,MAAMqB,IAEJsyD,GAAU1+D,KAAK+vD,KACxB/vD,KAAKqN,MACHI,EAAAhD,eAAeo0D,wCACf7+D,KAAK+K,MAAM2zD,EAAS,IAGjBp9D,GAGTw4D,EAAA73D,UAAAu8D,mBAAA,WAOE,IANA,IAAIvyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,IACX/K,EAAQiU,QAAQ,GAChBypD,EAASzpD,QAAQ,IACjBmpD,EAAStyD,EACNpM,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI0jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIuL,EAAKM,WAAWwjD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQq9D,QACNM,QAAQ39D,EAAO09D,GACfzpD,QAAQ7U,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIg+D,GAAU3O,GACZ/vD,KAAKqN,MACHqxD,GAAUtyD,EACNqB,EAAAhD,eAAeo0D,wCACfpxD,EAAAhD,eAAeq0D,0DACnB9+D,KAAK+K,MAAMglD,IAGf2O,EAAS3O,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO3jD,EACdpM,KAAKqN,MACHI,EAAAhD,eAAey0D,eACfl/D,KAAK+K,MAAMqB,IAEJsyD,GAAU1+D,KAAK+vD,KACxB/vD,KAAKqN,MACHI,EAAAhD,eAAeo0D,wCACf7+D,KAAK+K,MAAM2zD,EAAS,IAGjBp9D,GAGTw4D,EAAA73D,UAAAo8D,iBAAA,WAOE,IANA,IAAIpyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACbzuD,EAAQiU,QAAQ,GAChB4pD,EAAQ5pD,QAAQ,GAChBmpD,EAAStyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI0jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIuL,EAAKM,WAAWwjD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQq9D,QACNC,QAAQt9D,EAAO69D,GACf5pD,QAAQ7U,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIg+D,GAAU3O,GACZ/vD,KAAKqN,MACHqxD,GAAUtyD,EACNqB,EAAAhD,eAAeo0D,wCACfpxD,EAAAhD,eAAeq0D,0DACnB9+D,KAAK+K,MAAMglD,IAGf2O,EAAS3O,EAAM,IAIf/vD,KAAK+vD,IAaT,OAXI/vD,KAAK+vD,KAAO3jD,EACdpM,KAAKqN,MACHI,EAAAhD,eAAe20D,qBACfp/D,KAAK+K,MAAMqB,IAEJsyD,GAAU1+D,KAAK+vD,KACxB/vD,KAAKqN,MACHI,EAAAhD,eAAeo0D,wCACf7+D,KAAK+K,MAAM2zD,EAAS,IAGjBp9D,GAGTw4D,EAAA73D,UAAAm8D,kBAAA,WAOE,IANA,IAAInyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK+vD,IACbzuD,EAAQiU,QAAQ,GAChB8pD,EAAQ9pD,QAAQ,GAChBmpD,EAAStyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI0jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIuL,EAAKM,WAAWwjD,GACxB,GAAK,IAADrvD,EAEFY,EAAQs9D,QAAQt9D,EAAO+9D,QAClB,GAAK,IAAD3+D,EAETY,EAAQq9D,QACNC,QAAQt9D,EAAO+9D,GACfA,OAEG,IAAK,IAAD3+D,EAWT,MAVIg+D,GAAU3O,GACZ/vD,KAAKqN,MACHqxD,GAAUtyD,EACNqB,EAAAhD,eAAeo0D,wCACfpxD,EAAAhD,eAAeq0D,0DACnB9+D,KAAK+K,MAAMglD,IAGf2O,EAAS3O,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO3jD,EACdpM,KAAKqN,MACHI,EAAAhD,eAAe60D,sBACft/D,KAAK+K,MAAMqB,IAEJsyD,GAAU1+D,KAAK+vD,KACxB/vD,KAAKqN,MACHI,EAAAhD,eAAeo0D,wCACf7+D,KAAK+K,MAAM2zD,EAAS,IAGjBp9D,GAGTw4D,EAAA73D,UAAAs9D,UAAA,WAWE,OAAOv/D,KAAKw/D,oBAGd1F,EAAA73D,UAAAu9D,iBAAA,WAKE,IAHA,IAAIpzD,EAAQpM,KAAK+vD,IACb1jD,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK+vD,IAAM1jD,GAAOxC,EAAA8wD,eAAe1uD,EAAKM,WAAWvM,KAAK+vD,SACzD/vD,KAAK+vD,IAET,GAAI/vD,KAAK+vD,IAAM1jD,GAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK+vD,KAEzC,MADE/vD,KAAK+vD,IACA/vD,KAAK+vD,IAAM1jD,GAAOxC,EAAA8wD,eAAe1uD,EAAKM,WAAWvM,KAAK+vD,SACzD/vD,KAAK+vD,IAGX,GAAI/vD,KAAK+vD,IAAM1jD,EAAK,CAClB,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK+vD,KAC7B,GAAK,KAADrvD,GAAoB,IAADA,EAQrB,OANIV,KAAK+vD,IAAM1jD,GACkB,KAA9B3L,EAAIuL,EAAKM,WAAWvM,KAAK+vD,OAA4B,IAADrvD,GACrDmJ,EAAA8wD,eAAe1uD,EAAKM,WAAWvM,KAAK+vD,IAAM,QAExC/vD,KAAK+vD,IAEF/vD,KAAK+vD,IAAM1jD,GAAOxC,EAAA8wD,eAAe1uD,EAAKM,WAAWvM,KAAK+vD,SACzD/vD,KAAK+vD,IAIb,OAAO0P,WAAWxzD,EAAKQ,UAAUL,EAAOpM,KAAK+vD,OAG/C+J,EAAA73D,UAAAy9D,aAAA,WACE,MAAM,IAAItjD,MAAM,oBAGlB09C,EAAA73D,UAAA07D,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACTr+D,EAAQ,EACR+K,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK+vD,IAAM1jD,GAAK,CACrB,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK+vD,OAC7B,GAAIrvD,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKqN,MACHI,EAAAhD,eAAes0D,2BACf/+D,KAAK+K,MAAM/K,KAAK+vD,IAAM,EAAG/vD,KAAK+vD,MAEzB,GANPzuD,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVi/D,EAAa,MAErB,OAAIA,GACF3/D,KAAKqN,MACHI,EAAAhD,eAAegzD,uBACfz9D,KAAK+K,MAAM/K,KAAK+vD,MAEX,IAEF/oD,OAAO42D,aAAat8D,IAGrBw4D,EAAA73D,UAAAy7D,0BAAR,WACE,IAAItxD,EAAQpM,KAAK+vD,IACbzuD,EAAQtB,KAAKm+D,iBACbyB,EAAU1vB,QAAQ5uC,GAClBu+D,GAAU,EAEdz1D,QAAQ+lC,SAAS7uC,IACbs+D,EAAU,UACZ5/D,KAAKqN,MACHI,EAAAhD,eAAeq1D,4EACf9/D,KAAK+K,MAAMqB,EAAOpM,KAAK+vD,MAEzB8P,GAAU,GAGZ,IAAIxzD,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAiBvB,OAhBIjM,KAAK+vD,KAAO1jD,GACdrM,KAAKqN,MACHI,EAAAhD,eAAegzD,uBACfz9D,KAAK+K,MAAMqB,EAAOC,IAEpBwzD,GAAU,GACwB,KAAzB5zD,EAAKM,WAAWvM,KAAK+vD,OAC5B/vD,KAAK+vD,KAEP/vD,KAAKqN,MACHI,EAAAhD,eAAes1D,qCACf//D,KAAK+K,MAAMqB,EAAOpM,KAAK+vD,MAEzB8P,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb54D,OAAO42D,aAAagC,GACpB54D,OAAO42D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAA73D,UAAA+9D,OAAA,aAEFlG,EA5lCA,CAA+BrsD,EAAAX,mBAAlBpN,EAAAo6D,YA+lCb,IAAAoD,EAAA,WAOA,OAPA,gBAAax9D,EAAAw9D,QAUb,IAAID,EAA8B,oBC5lDlC,IAAAgD,EAGAA,EAAA,WACA,OAAAjgE,KADA,GAIA,IAEAigE,KAAA,IAAA7rD,SAAA,iBACC,MAAA8rD,GAED,iBAAAC,SAAAF,EAAAE,QAOAxgE,EAAAD,QAAAugE,44BCdA,IAoFYG,EApFZ3yD,EAAAtN,EAAA,GAKAyxD,EAAAzxD,EAAA,GAuBAwN,EAAAxN,EAAA,GA6BAuN,EAAAvN,EAAA,GAQAqN,EAAArN,EAAA,GAKA0J,EAAA1J,EAAA,GAKAiiD,EAAAjiD,EAAA,GAIAkgE,EAAAlgE,EAAA,KAKA,SAAYigE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA1gE,EAAA0gE,aAAA1gE,EAAA0gE,WAAU,KAQtB,IAAA9tD,EAAA,SAAArB,GAWE,SAAAqB,EAEEkT,GAFF,IAAAtU,EAIED,EAAAzQ,KAAAR,KAAMwlB,EAAQzY,cAAY/M,YAT5BkR,EAAAovD,sBAA2C,KAE3CpvD,EAAAqvD,yBAA+C,KAQ7CrvD,EAAKsU,QAAUA,IAkvDnB,OAlwD8BjT,EAAAD,EAAArB,GAoB5BqB,EAAArQ,UAAAu+D,YAAA,SAEElc,EAEAmc,EAEAh4C,EAEAi4C,GAIA,QANA,IAAAj4C,MAAA,WAEA,IAAAi4C,MAAyBN,EAAWO,QAIhCrc,EAAK7tC,MAAQ9I,EAAA+I,SAASm3C,aAAc,CACtC,IAAIrK,EAAsCc,EAAMd,iBAC5Cz5B,EAAwB,KAC5B,GAAIy5B,KACFz5B,EAAW/pB,KAAKwgE,YACdhd,EACAid,EACAh4C,EACAi4C,IAEa,OAAO,KAQxB,IANA,IAAIE,EAAoCtc,EAAMf,WAC1CoR,EAAgBiM,EAAez0D,OAC/B6d,EAAiB,IAAI/iB,MAAY0tD,GACjCT,EAAiB,IAAIjtD,MAAc0tD,GACnCR,EAAqB,EACrBC,GAAU,EACL/zD,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EAAG,CACtC,IAAIwgE,EAAgBD,EAAevgE,GACnC,OAAQwgE,EAAc7c,eACpB,KAAKr2C,EAAAogD,cAAc6H,QACjBzB,EAAqB9zD,EAAI,EACzB,MAEF,KAAKsN,EAAAogD,cAAc+S,KACjB12D,OAAO/J,GAAKs0D,GACZP,GAAU,EAId,IAAI2M,EAAoBF,EAAc5hD,KACtC,GAAItR,EAAAgkD,cAAcoP,GAOhB,OANIL,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfD,EAAkBh2D,OAGf,KAET,IAAIkf,EAAgBjqB,KAAKwgE,YACvBO,EACAN,EACAh4C,EACAi4C,GAEF,IAAKz2C,EAAe,OAAO,KAC3BD,EAAe3pB,GAAK4pB,EACpBiqC,EAAe7zD,GAAKwgE,EAAcjgE,KAAKqL,KAEzC,IAAIg1D,EAAoC3c,EAAMlZ,WAC9C,GAAIz9B,EAAAgkD,cAAcsP,GAOhB,OANIP,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfC,EAAel2D,OAGZ,KAET,IAAIqgC,OAAU,EACd,GAAI61B,GAOF,KANA71B,EAAaprC,KAAKwgE,YAChBS,EACAR,EACAh4C,EACAi4C,IAEe,OAAO,UAExBt1B,EAAa19B,EAAAkH,KAAKG,KAEpB,IAAId,EAAY,IAAIvG,EAAA0Y,UAAU4D,EAAgBohB,EAAYrhB,GAI1D,OAHA9V,EAAUigD,eAAiBA,EAC3BjgD,EAAUkgD,mBAAqBA,EAC/BlgD,EAAUmgD,QAAUA,EACb9P,EAAKjB,WAAapvC,EAAUgL,KAAK+zC,aAAe/+C,EAAUgL,KAInE7U,OAAOk6C,EAAK7tC,MAAQ9I,EAAA+I,SAASk3C,WAC7B,IAAIsT,EAA0B5c,EAC1B/Y,EAAW21B,EAAStgE,KACpBugE,EAAoBD,EAASj1C,cAC7Bm1C,GAAgB71B,EAAStzB,KAG7B,GAAImpD,GACE34C,GAA2BA,EAAwBjU,IAAI+2B,EAASj4B,WAAWrH,MAAO,CACpF,IAAIgT,EAAOwJ,EAAwBvnB,IAAIqqC,EAASj4B,WAAWrH,MAS3D,OAR0B,OAAtBk1D,GAA8BA,EAAkBh1D,QAC9Cu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACf/c,EAAKv5C,MAAOkU,EAAKvT,YAInB44C,EAAKjB,YACFpkC,EAAKK,GAAE,MACNohD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe62D,gCACfhd,EAAKv5C,MAAOkU,EAAKvT,YAIhBuT,EAAK+zC,cAEP/zC,EAKX,IAAIrG,EAAU5Y,KAAKmb,gBAAgBowB,EAAUk1B,EAASC,GACtD,IAAK9nD,EAAS,OAAO,KAGrB,GAAIA,EAAQ6M,WACV7M,EAAUA,EAAQ6M,eAEb,CAEL,GAAI7M,EAAQnC,MAAQm7C,EAAA9gD,YAAYkW,KAiB9B,OAhB0B,OAAtBm6C,GAA8BA,EAAkBh1D,QAC9Cu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACf/c,EAAKv5C,MAAO6N,EAAQxG,cAItBkyC,EAAKjB,YACHqd,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe62D,gCACfhd,EAAKv5C,MAAO6N,EAAQhY,MAInB8M,EAAAkH,KAAKxR,IAId,GAAIwV,EAAQnC,MAAQm7C,EAAA9gD,YAAYuJ,gBAAiB,CAC/C,IAAIkO,EAAWvoB,KAAKuhE,8BACF3oD,EAChBuoD,EACAV,EACA52D,EAAA23D,QAAqB/4C,GACrB67B,GAEF,OAAK/7B,EACE+7B,EAAKjB,WAAa96B,EAAStJ,KAAK+zC,aAAezqC,EAAStJ,KADzC,MAM1B,GAAIrG,EAAQnC,MAAQm7C,EAAA9gD,YAAY8V,eAAgB,CAG9C,GAAIhO,EAAQ0G,GAAG9R,EAAAnL,YAAY6jB,UAAW,CACV,OAAtBi7C,GAA8BA,EAAkBh1D,QAC9Cu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACf/c,EAAKv5C,MAAO6N,EAAQxG,cAI1B,IAAIqvD,EAAwB7oD,EAASqG,KACrC,GAAIqlC,EAAKjB,WAAY,CACnB,GAAKoe,EAAKniD,GAAE,KAQV,OAAOmiD,EAAKzO,aAPR0N,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe62D,gCACfJ,EAAStgE,KAAKmK,MAAOwgC,EAASj4B,WAAWrH,MAOjD,OAAOw1D,EAIT,GAAIL,EACF,OAAQ71B,EAASj4B,WAAWqxC,QAC1B,KAAKn3C,EAAAxK,cAAc8B,OAAQ,OAAO9E,KAAK0hE,yBAAyBR,EAAUT,EAASh4C,EAAyBi4C,GAC5G,KAAKlzD,EAAAxK,cAAc+B,QAAS,OAAO/E,KAAK2hE,0BAA0BT,EAAUT,EAASh4C,EAAyBi4C,GAC9G,KAAKlzD,EAAAxK,cAAcgC,QAAS,OAAOhF,KAAK4hE,0BAA0BV,EAAUT,EAASh4C,EAAyBi4C,GAKlH,IAAI3zC,EAAsCnU,EAASmU,mBAEnD,GAAIA,GASF,IARgB/sB,KAAK6hE,qBACnB90C,EACAo0C,EACAV,EACAh4C,EAA0B5e,EAAA23D,QAAQ/4C,GAClC67B,EACAoc,GAEkB,OAAO,UAClBS,GAAqBA,EAAkBh1D,QAChDnM,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACfH,EAASn2D,MAAOwgC,EAASj4B,WAAWrH,MAUxC,KANIgT,EAAOjf,KAAKwgE,YACG5nD,EAASsoD,SAC1BtoD,EACA6P,EACAi4C,IAES,OAAO,KAClB,GAAIpc,EAAKjB,WAAY,CACnB,GAAKpkC,EAAKK,GAAE,KAQV,OAAOL,EAAK+zC,aAPR0N,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe62D,gCACfJ,EAAStgE,KAAKmK,MAAOwgC,EAASj4B,WAAWrH,MAOjD,OAAOgT,EAQT,OANIyhD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACfZ,EAAStgE,KAAKmK,MAAOwgC,EAASj4B,WAAWrH,MAGtC,MAGDqG,EAAArQ,UAAAy/D,yBAAR,SAEER,EAEAT,EAEAh4C,EAEAi4C,QAFA,IAAAj4C,MAAA,WAEA,IAAAi4C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASj1C,cACjC,IAAMk1C,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANIu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAes3D,oCACfb,EAASn2D,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG9E,KAET,IAAIs2D,EAAehiE,KAAKwgE,YAAYW,EAAkB,GAAIV,EAASh4C,EAAyBi4C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,OAAQA,EAAavrD,MACnB,OACA,OACA,OAAmB,OAAO/I,EAAAkH,KAAKxR,IAC/B,OAAqB,IAAKpD,KAAKwlB,QAAQ9Q,QAAQc,SAAU,OAAO9H,EAAAkH,KAAKxR,IACrE,OAAmB,OAAOsK,EAAAkH,KAAKvR,IAC/B,OACA,OACA,OACA,QAAoB,OAAOqK,EAAAkH,KAAKnR,IAChC,OAAqB,IAAKzD,KAAKwlB,QAAQ9Q,QAAQc,SAAU,OAAO9H,EAAAkH,KAAKnR,IACrE,OAAmB,OAAOiK,EAAAkH,KAAKlR,IAC/B,QAAmB,OAAOgK,EAAAkH,KAAK/Q,IAC/B,QAAmB,OAAO6J,EAAAkH,KAAK9Q,IAC/B,QAAoB,OAAO4J,EAAAkH,KAAK7Q,KAChC,QAAoB,OAAO2J,EAAAkH,KAAKG,KAChC,QAAS3K,QAAO,GAElB,OAAO,MAGDkI,EAAArQ,UAAA0/D,0BAAR,SAEET,EAEAT,EAEAh4C,EAEAi4C,QAFA,IAAAj4C,MAAA,WAEA,IAAAi4C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASj1C,cACjC,IAAMk1C,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANIu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAes3D,oCACfb,EAASn2D,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG9E,KAET,IAAIs2D,EAAehiE,KAAKwgE,YAAYW,EAAkB,GAAIV,EAASh4C,EAAyBi4C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIrzC,EAAiBqzC,EAAarzC,eAClC,IAAKA,EAOH,OANI+xC,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfd,EAAkB,GAAGp2D,MAAOi3D,EAAat2D,YAGtC,KAET,IAAI8hB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAasB,aAC1D,OAAI2e,EACEA,EAASlO,GAAG9R,EAAAnL,YAAY6f,SAC1B9X,OAAmD,GAA5CojB,EAASvZ,UAAU+V,eAAe7d,QAClCqhB,EAASvZ,UAAU+V,eAAe,KAEzC5f,OAAmD,GAA5CojB,EAASvZ,UAAU+V,eAAe7d,QAClCqhB,EAASvZ,UAAU+V,eAAe,KAGzC02C,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfd,EAAkB,GAAGp2D,MAAOi3D,EAAat2D,YAGtC,OAGD4G,EAAArQ,UAAA2/D,0BAAR,SAEEV,EAEAT,EAEAh4C,EAEAi4C,QAFA,IAAAj4C,MAAA,WAEA,IAAAi4C,MAAyBN,EAAWO,QAEpC,IAAIQ,EAAoBD,EAASj1C,cACjC,IAAMk1C,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANIu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAes3D,oCACfb,EAASn2D,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG9E,KAET,IAAIs2D,EAAehiE,KAAKwgE,YAAYW,EAAkB,GAAIV,EAASh4C,EAAyBi4C,GAC5F,IAAKsB,EAAc,OAAO,KAC1B,IAAIrzC,EAAiBqzC,EAAarzC,eAClC,IAAKA,EAOH,OANI+xC,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfd,EAAkB,GAAGp2D,MAAOi3D,EAAat2D,YAGtC,KAGT,IAAI8hB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAasB,aAC1D,OAAI2e,EAAiBA,EAASvZ,UAAUm3B,YACpCs1B,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfd,EAAkB,GAAGp2D,MAAOi3D,EAAat2D,YAGtC,OAIT4G,EAAArQ,UAAAkZ,gBAAA,SAEEowB,EAEAk1B,EAEAC,QAAA,IAAAA,MAAaN,EAAWO,QAExB,IAAI/nD,EAAU6nD,EAAQn6C,OAAOilB,EAASj4B,WAAWrH,MACjD,IAAK2M,EAOH,OANI8nD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACfv2B,EAASxgC,MAAOwgC,EAASj4B,WAAWrH,MAGjC,KAIT,IAFA,IAAIi2D,EAAO32B,EACPtzB,EAAOszB,EAAStzB,KACbA,GAAM,CACX,KAAMW,EAAUA,EAAQe,aAAa1B,EAAK3E,WAAWrH,OAOnD,OANIy0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACflqD,EAAKlN,MAAOkN,EAAK3E,WAAWrH,KAAMi2D,EAAK5uD,WAAWrH,MAG/C,KAETi2D,EAAOjqD,EACPA,EAAOA,EAAKA,KAEd,OAAOW,GAITtG,EAAArQ,UAAA4/D,qBAAA,SAEE/6C,EAEAq6C,EAEAV,EAEAh4C,EAEA25C,EAEA1B,QAJA,IAAAj4C,MAA4C5e,EAAA23D,gBAE5C,IAAAY,MAAA,WAEA,IAAA1B,MAAyBN,EAAWO,QAIpC,IAFA,IAAI0B,EAAoB,EACpBC,EAAoB,EACfjiE,EAAI,EAAG+V,EAAI0Q,EAAe3a,OAAQ9L,EAAI+V,IAAK/V,EAC7CymB,EAAezmB,GAAGsjD,eAAe0e,IACpCC,EAEJ,IAAIC,EAAgBpB,EAAoBA,EAAkBh1D,OAAS,EACnE,GAAIo2D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXAtiE,KAAKqN,MACHI,EAAAhD,eAAes3D,oCACfQ,EACI50D,EAAAgO,MAAMhP,KACcw0D,EAAmB,GAAGp2D,MACtBo2D,EAAmBoB,EAAgB,GAAGx3D,OAE1DX,OAAOg4D,GAAuBr3D,OACjCw3D,EAAgBF,EAAoBA,EAAoBC,GAAmB52D,SAAS,IACrF62D,EAAc72D,SAAS,KAElB,KAET,IAAIugB,EAAgB,IAAIhlB,MAAYq7D,GACpC,IAASjiE,EAAI,EAAGA,EAAIiiE,IAAqBjiE,EAAG,CAC1C,IAAI4e,EAAO5e,EAAIkiE,EACXviE,KAAKwgE,YACeW,EAAmB9gE,GACrCogE,EACAh4C,EACAi4C,GAEF1gE,KAAKwgE,YACHp2D,OAAO0c,EAAezmB,GAAGsjD,aACzB8c,EACAh4C,EACAi4C,GAEN,IAAKzhD,EAAM,OAAO,KAElBwJ,EAAwBtW,IAAI2U,EAAezmB,GAAGO,KAAKqL,KAAMgT,GACzDgN,EAAc5rB,GAAK4e,EAErB,OAAOgN,GAIT3Z,EAAArQ,UAAAugE,kBAAA,SAEElvD,EAEA8W,EAEAq2C,EAEAC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IACI/nD,EADAhY,EAAO0S,EAAWrH,KAEtB,OAAIme,IACExR,EAAUwR,EAAK9D,OAAO1lB,KACxBZ,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzB3nD,GAGP6nD,IACE7nD,EAAU6nD,EAAQn6C,OAAO1lB,KAC3BZ,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzB3nD,IAGPA,EAAU5Y,KAAKwlB,QAAQ3L,aAAajZ,KACtCZ,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzB3nD,IAEL8nD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACfxuD,EAAWvI,MAAOnK,GAGf,OAIT0R,EAAArQ,UAAAwgE,yBAAA,SAAyBljD,EAAgBmhD,GACvC,QADuC,IAAAA,MAAyBN,EAAWO,QACvEphD,EAAOD,GAAG9R,EAAAnL,YAAY6jB,UAAW,OAAO,EAC5C,IAAIg7C,EAAW3hD,EAAO2hD,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIjiD,EAAOjf,KAAKwgE,YACdU,EACA3hD,EAAOrL,OACP,KACAwsD,GAEF,QAAKzhD,IACLM,EAAOL,QAAQD,IACR,IAIT3M,EAAArQ,UAAAygE,gCAAA,SAEEC,EAEAv4C,EAEAw4C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBF,EAAe34B,WAClC3c,EAASrtB,KAAK8iE,kBAAkBD,EAAkBz4C,EAAMw4C,EAAgBlC,GAC5E,IAAKrzC,EAAQ,OAAO,KACpB,IAAI01C,EAAeJ,EAAe3gE,SAASiK,KAG3C,OAAQohB,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAYmQ,OAAQ,IAAKjhB,KAAKyiE,yBAAiCp1C,EAAQqzC,GAAa,OAAO,KAChG,KAAK9O,EAAA9gD,YAAY+W,MACjB,KAAK+pC,EAAA9gD,YAAY8N,MACf,IAAIK,EAA6BoO,EAAQpO,KAEzC,GAF+C7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,QAC/D4Z,EAAiB1P,EAAK0P,gBACL,CACnB,IAAIld,EAAczR,KAAKwlB,QAAQ/T,YAC/B,GAAKwN,EAAKK,GAAE,OAAyB7N,EAAY+C,IAAIyK,EAAKxI,MAOxD,OAJAzW,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACfQ,EAAe3gE,SAAS+I,MAAOg4D,EAAoC11C,EAAQpO,KAAKvT,YAE3E,KANPijB,EAAiBld,EAAYvQ,IAAI+d,EAAKxI,MAS1C4W,EAASsB,EACT,MAEF,KAAKijC,EAAA9gD,YAAYyN,mBAOf,KANIkN,EAAiBzrB,KAAKie,gBACxB7T,OAA2BijB,EAAQ7O,iBACnC,KACA3U,EAAA23D,UACAd,IAEmB,OAAO,KAE5B,KADI/xC,EAAiBlD,EAAexX,UAAUm3B,WAAWzc,gBAMvD,OAJA3uB,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACfQ,EAAe3gE,SAAS+I,MAAOg4D,EAAct3C,EAAexX,UAAUm3B,WAAW1/B,YAE5E,KAET2hB,EAASsB,EACT,MAEF,KAAKijC,EAAA9gD,YAAY4N,SACf,IAAI+M,EAEJ,KADIkD,GADAlD,EAAiBrhB,OAAkBijB,EAAQ5B,iBACXxX,UAAUm3B,WAAWzc,gBAMvD,OAJA3uB,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACfQ,EAAe3gE,SAAS+I,MAAOg4D,EAAct3C,EAAexX,UAAUm3B,WAAW1/B,YAE5E,KAET2hB,EAASsB,EACT,MAEF,KAAKijC,EAAA9gD,YAAY+N,MACf,IAAIsnC,EAAoBnmD,KAAKugE,yBAC7B,GAAIpa,EAAmB,CAGnB,IAAI6c,EAAqB31C,EAAQF,eAAeykC,EAAArkD,aAAasB,aAC7D,IAAKm0D,EAKH,OAJAhjE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACf9b,EAAkBp7C,MAAesiB,EAAQjb,cAEpC,KAET,IAAI6wD,EAAYD,EAAW/uD,UAAUm3B,WAIvC,KADIzc,EAAiBs0C,EAAUt0C,gBACV,CACfld,EAAczR,KAAKwlB,QAAQ/T,YAC/B,GAAKwxD,EAAU3jD,GAAE,OAAyB7N,EAAY+C,IAAIyuD,EAAUxsD,MAOlE,OAJAzW,KAAKqN,MACDI,EAAAhD,eAAe03D,oCACfQ,EAAe3gE,SAAS+I,MAAOg4D,EAAcE,EAAUv3D,YAEpD,KANPijB,EAAiBld,EAAYvQ,IAAI+hE,EAAUxsD,MAS/C4W,EAASsB,EAEX,MAEF,KAAKijC,EAAA9gD,YAAYkN,mBACf,IAAIyH,EAAa4H,EAAO5H,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWnG,GAAG9R,EAAAnL,YAAY6jB,UAAW,CACxC,IAAIg9C,EAAeljE,KAAKwgE,YAAY/6C,EAAWy7C,SAAUz7C,EAAWvR,OAAQ,KAAMwsD,GAC9EwC,GAAcz9C,EAAWvG,QAAQgkD,GAEvC,IAAIv0C,KAAiBlJ,EAAWxG,KAAK0P,kBACjBtB,EAASsB,EAAe1sB,WAC5C,OAMN,OAAQorB,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAYuJ,gBACjB,KAAKu3C,EAAA9gD,YAAY+N,MACf,OAAG,CAED,IADIC,EAAUuO,EAAOvO,UACNA,EAAQtK,IAAIuuD,GAGzB,OAFA/iE,KAAKsgE,sBAAwBuC,EAC7B7iE,KAAKugE,yBAA2B,KACzBzhD,EAAQ5d,IAAI6hE,GAGrB,GAAI11C,EAAO5W,MAAQm7C,EAAA9gD,YAAYuJ,gBAAiB,CAC9C,IAAqBgT,EAAQjS,cAG3B,MAFAiS,EAA0CA,EAAQjS,kBAK/C,IAAIiS,EAAO5W,MAAQm7C,EAAA9gD,YAAY+N,MAOpC,MANA,IAAYwO,EAAQnB,KAGlB,MAFAmB,EAAwBA,EAAQnB,MAQtC,MAEF,QACE,IAAIpN,EACJ,IADIA,EAAUuO,EAAOvO,UACNA,EAAQtK,IAAIuuD,GAGzB,OAFA/iE,KAAKsgE,sBAAwBuC,EAC7B7iE,KAAKugE,yBAA2B,KACzBzhD,EAAQ5d,IAAI6hE,GAUzB,OAJA/iE,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACfQ,EAAe3gE,SAAS+I,MAAOg4D,EAAc11C,EAAOjb,cAE/C,MAITE,EAAArQ,UAAAkhE,+BAAA,SAEEC,EAEAh5C,EAEAw4C,EAEAlC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmBO,EAAcp5B,WACjC3c,EAASrtB,KAAK8iE,kBAAkBD,EAAkBz4C,EAAMw4C,EAAgBlC,GAC5E,IAAKrzC,EAAQ,OAAO,KACpB,OAAQA,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAYmQ,OAAQ,IAAKjhB,KAAKyiE,yBAAiCp1C,EAAQqzC,GAAa,OAAO,KAChG,KAAK9O,EAAA9gD,YAAY+W,MACjB,KAAK+pC,EAAA9gD,YAAY8N,MAEf,GAAIyO,EAD6BA,EAAQpO,KACvB0P,eAGhB,OAFA3uB,KAAKsgE,sBAAwBuC,EAC7B7iE,KAAKugE,yBAA2B6C,EAAcjd,kBACvC94B,EAET,MAEF,KAAKukC,EAAA9gD,YAAY+N,MAGb,IAAImkD,EAAqB31C,EAAQF,eAAeykC,EAAArkD,aAAasB,aAC7D,IAAKm0D,EAOH,OANItC,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfmB,EAAcr4D,MAAesiB,EAAQjb,cAGlC,KAET,IAAI6wD,EAAYD,EAAW/uD,UAAUm3B,WAEvC,OAAIy3B,EAAiBpsD,MAAQ9I,EAAA+I,SAASosC,eAChCz1B,EAAS41C,EAAUt0C,iBACrB3uB,KAAKsgE,sBAAwBuC,EAC7B7iE,KAAKugE,yBAA2B6C,EAAcjd,kBACvC94B,GAEF,MAETrtB,KAAKsgE,sBAAwBuC,EAC7B7iE,KAAKugE,yBAA2B6C,EAAcjd,kBACvC94B,GASX,OANIqzC,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfwhD,EAAiB93D,OAGd,MAITuH,EAAArQ,UAAAohE,4BAAA,SAEEC,EAEAV,GAEA,IAAKA,EAAetjD,GAAE,KAEpB,OAAQsjD,EAAensD,MACrB,OACE,GAAI8sD,UAAUD,GAAW,OAAO51D,EAAAkH,KAAK1R,GACrC,MAEF,OACE,GAAIsgE,UAAUF,GAAW,OAAO51D,EAAAkH,KAAKrR,GACrC,MAEF,OACE,GAAIkgE,WAAWH,GAAW,OAAO51D,EAAAkH,KAAKzR,IACtC,MAEF,OACE,GAAIugE,WAAWJ,GAAW,OAAO51D,EAAAkH,KAAKpR,IACtC,MAEF,OACE,GAAImgE,WAAWL,GAAW,OAAO51D,EAAAkH,KAAKxR,IACtC,MAEF,OACE,GAAIwgE,WAAWN,GAAW,OAAO51D,EAAAkH,KAAKnR,IACtC,MAEF,QACE,GAAIogE,YAAYP,GAAW,OAAO51D,EAAAkH,KAAKhR,KACvC,MAEF,OACE,IAAK5D,KAAKwlB,QAAQ9Q,QAAQc,SAAU,CAClC,GAAImuD,WAAWL,GAAW,OAAO51D,EAAAkH,KAAK29C,QACtC,MAEF,OAAO7kD,EAAAkH,KAAK09C,QAEd,OACE,IAAKtyD,KAAKwlB,QAAQ9Q,QAAQc,SAAU,CAClC,GAAIouD,WAAWN,GAAW,OAAO51D,EAAAkH,KAAK69C,QACtC,MAEF,OAAO/kD,EAAAkH,KAAK49C,QAEd,OAAmB,OAAO9kD,EAAAkH,KAAKvR,IAC/B,OAAmB,OAAOqK,EAAAkH,KAAKlR,IAC/B,QAAmB,OAAOgK,EAAAkH,KAAK/Q,IAC/B,QAAmB,OAAO6J,EAAAkH,KAAK9Q,IAC/B,QAAoB,MACpB,QAASsG,QAAO,GAIpB,OAAIu5D,WAAWL,GAAkB51D,EAAAkH,KAAKxR,IAClCwgE,WAAWN,GAAkB51D,EAAAkH,KAAKnR,IAC/BiK,EAAAkH,KAAKvR,KAIdiP,EAAArQ,UAAA6gE,kBAAA,SAEE94B,EAEA5f,EAEAw4C,EAEAlC,GAEA,SAJA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAE7B32B,EAAWvzB,MAAQ9I,EAAA+I,SAASqsC,eACjC/Y,EAAuCA,EAAYA,WAErD,OAAQA,EAAWvzB,MACjB,KAAK9I,EAAA+I,SAASksC,UACZ,OAAO5iD,KAAK8jE,2BACW95B,EACrB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAAS+4C,YACZ,OAAOzvD,KAAK+jE,6BACa/5B,EACvB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAAS84C,aACZ,OAAOxvD,KAAKgkE,8BACch6B,EACxB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASk4C,OACZ,OAAO5uD,KAAKikE,wBACQj6B,EAClB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAAS44C,KACZ,OAAOtvD,KAAKkkE,sBACMl6B,EAChB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASusC,MACZ,OAAOjjD,KAAKmkE,uBACOn6B,EACjB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASisC,WACZ,OAAO3iD,KAAKwiE,kBACYx4B,EACtB5f,EAAMA,EAAKg6C,eAAgB1D,GAG/B,KAAK/yD,EAAA+I,SAASwM,QACZ,OAAOljB,KAAKqkE,yBACSr6B,EACnB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASssC,eACZ,OAAOhjD,KAAK0iE,gCACgB14B,EAC1B5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASosC,cACZ,OAAO9iD,KAAKmjE,+BACen5B,EACzB5f,EAAMw4C,EAAgBlC,GAG1B,KAAK/yD,EAAA+I,SAASmsC,KACZ,OAAO7iD,KAAKskE,sBACMt6B,EAChB5f,EAAMw4C,EAAgBlC,GAW5B,OANIA,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAA6hE,2BAAA,SAEE95B,EAEA5f,EAEAw4C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAEhC32B,EAAWib,eAAiBt3C,EAAAghD,cAAc4V,QAC5C,OAAOvkE,KAAK8iE,kBACV94B,EAAWA,WACX5f,EACAw4C,EACAlC,GAGJ,IAAIzhD,EAAOjf,KAAKwgE,YACdp2D,OAAO4/B,EAAWkb,QAClB96B,EAAKg6C,eACLh6C,EAAK3B,wBACLi4C,GAEF,IAAKzhD,EAAM,OAAO,KAClB,IAAIrG,EAA0BqG,EAAK0P,eACnC,IAAK/V,EAAS,CACZ,IAAI3E,EAAYgL,EAAKmzC,mBACrB,IAAKn+C,EAAW,OAAO,KACvB2E,EAAU3E,EAAUogD,iBAAiBr0D,KAAKwlB,SAI5C,OAFAxlB,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzB3nD,GAITtG,EAAArQ,UAAA8hE,6BAAA,SAEE/5B,EAEA5f,EAEAw4C,EAEAlC,QAFA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAEpC,IAAIjY,EAAU1e,EAAW0e,QAEzB,OAAQ1e,EAAWqb,UACjB,KAAKjD,EAAAC,MAAM/xC,MAET,GAAIo4C,EAAQjyC,MAAQ9I,EAAA+I,SAASwM,SAA+BwlC,EAASvlC,aAAexV,EAAAyV,YAAY6rC,QAAS,CACvG,IAAIhwC,EAAOjf,KAAKqjE,4BACdmB,QAAQC,SAAqC/b,EAASpnD,OACtDshE,GAGF,OADInxD,EAAczR,KAAKwlB,QAAQ/T,aACZ+C,IAAIyK,EAAKxI,MAAQhF,EAAYvQ,IAAI+d,EAAKxI,MAAS,KAEpE,OAAOzW,KAAK8iE,kBACVpa,EACAt+B,EACAw4C,EACAlC,GAGJ,KAAKte,EAAAC,MAAMjyC,KACX,KAAKgyC,EAAAC,MAAM8V,UACX,KAAK/V,EAAAC,MAAM+V,YACT,OAAOp4D,KAAK8iE,kBACV94B,EAAW0e,QACXt+B,EACAw4C,EACAlC,GAGJ,KAAKte,EAAAC,MAAMsW,YACT,IAAIlnD,EACJ,OADIA,EAAczR,KAAKwlB,QAAQ/T,aACZ+C,IAAG,IAAkB/C,EAAYvQ,IAAG,IAAmB,KAE5E,KAAKkhD,EAAAC,MAAMuW,MAOT,IANsB54D,KAAK8iE,kBACzB94B,EAAW0e,QACXt+B,EACAw4C,EACAlC,GAEoB,OAAO,KAE7B,MAEF,QAASt2D,QAAO,GAQlB,OANIs2D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAA+hE,8BAAA,SAEEh6B,EAEA5f,EAEAw4C,EAEAlC,GAGA,YALA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAG5B32B,EAAWqb,UACjB,KAAKjD,EAAAC,MAAM8V,UACX,KAAK/V,EAAAC,MAAM+V,YACT,OAAOp4D,KAAK8iE,kBACV94B,EAAW0e,QACXt+B,EACAw4C,EACAlC,GAGJ,QAASt2D,QAAO,GAQlB,OANIs2D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAAgiE,wBAAA,SAEEj6B,EAEA5f,EAEAw4C,EAEAlC,GASA,YAXA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAGhCD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAAiiE,sBAAA,SAEEl6B,EAEA5f,EAEAw4C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAEhCv2C,EAAK9K,GAAE,OAA4B,CACrC,IAAIolD,EAAYt6C,EAAKu6C,YAAYn3D,EAAAxK,cAAcoC,OAC/C,GAAIs/D,EAGF,OAFA1kE,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzBmE,EAGX,IAAIxwD,EAASkW,EAAKg6C,eAAelwD,OACjC,OAAIA,GACFlU,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzBrsD,IAELwsD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAem6D,+CACf56B,EAAWj/B,OAGR,OAITuH,EAAArQ,UAAAkiE,uBAAA,SAEEn6B,EAEA5f,EAEAw4C,EAEAlC,GAEA,QAJA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAEhCv2C,EAAK9K,GAAE,OAA4B,CACrC,IAAIulD,EAAaz6C,EAAKu6C,YAAYn3D,EAAAxK,cAAcqC,QAChD,GAAIw/D,EAGF,OAFA7kE,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzBsE,EAGX,IAAI3wD,EAAyBkW,EAAKg6C,eAAelwD,OACjD,OAAIA,GAAUA,EAAOuC,MAAQm7C,EAAA9gD,YAAY+N,QAAU3K,EAAiBA,EAAQgY,OAC1ElsB,KAAKsgE,sBAAwB,KAC7BtgE,KAAKugE,yBAA2B,KACzBrsD,IAELwsD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeq6D,iDACf96B,EAAWj/B,OAGR,OAITuH,EAAArQ,UAAAoiE,yBAAA,SAEEr6B,EAEA5f,EAEAw4C,EAEAlC,GAEA,YAJA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAE5B32B,EAAW7mB,aACjB,KAAKxV,EAAAyV,YAAY6rC,QACfjvD,KAAKsgE,sBAAwBt2B,EAC7BhqC,KAAKugE,yBAA2B,KAChC,IAAIwE,EAAc/kE,KAAKqjE,4BACMr5B,EAAY1oC,MACvCshE,GAGF,OADInxD,EAAczR,KAAKwlB,QAAQ/T,aACZ+C,IAAIuwD,EAAYtuD,MAAQhF,EAAYvQ,IAAI6jE,EAAYtuD,MAAS,KAElF,KAAK9I,EAAAyV,YAAY2rC,MACf/uD,KAAKsgE,sBAAwBt2B,EAC7BhqC,KAAKugE,yBAA2B,KAChC,IACI9uD,EADAszD,EAAcnC,GAAkBl1D,EAAAkH,KAAK/Q,IAAM6J,EAAAkH,KAAK/Q,IAAM6J,EAAAkH,KAAK9Q,IAE/D,OADI2N,EAAczR,KAAKwlB,QAAQ/T,aACZ+C,IAAIuwD,EAAYtuD,MAAQhF,EAAYvQ,IAAI6jE,EAAYtuD,MAAS,KAElF,KAAK9I,EAAAyV,YAAYC,OAGf,OAFArjB,KAAKsgE,sBAAwBt2B,EAC7BhqC,KAAKugE,yBAA2B,KACzBvgE,KAAKwlB,QAAQvL,eAWxB,OANIymD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAAqiE,sBAAA,SAEEt6B,EAEA5f,EAEAw4C,EAEAlC,QAFA,IAAAkC,MAAuBl1D,EAAAkH,KAAKG,WAE5B,IAAA2rD,MAAyBN,EAAWO,QAEpC,IAAIkC,EAAmB74B,EAAWA,WAC9B3c,EAASrtB,KAAK8iE,kBAChBD,EACAz4C,EACAw4C,EACAlC,GAGF,IAAKrzC,EAAQ,OAAO,KACpB,GAAIA,EAAO5W,MAAQm7C,EAAA9gD,YAAYkN,mBAAoB,CAEjD,GACsBqP,EAAQjb,cAAgBiuD,EAAA2E,eAAe13C,WAC3D0c,EAAWhnB,UAAU7W,OAAS,EAE9B,OAAOnM,KAAK8iE,kBAAkB94B,EAAWhnB,UAAU,GAAIoH,EAAMw4C,EAAgBlC,GAG/E,IAAIn4C,EAAWvoB,KAAKilE,iCACC53C,EACnB2c,EAAW/d,cACX7B,EAAKg6C,eACLv6D,EAAA23D,QAAQp3C,EAAK3B,yBACbuhB,EACA02B,GAEF,IAAKn4C,EAAU,OAAO,KACtB,IAAI6iB,EAAa7iB,EAAStU,UAAUm3B,WAChC2nB,EAAY3nB,EAAWzc,eAC3B,GAAIokC,EAGF,OAAOA,EAEP,IAAI9+C,EAAYm3B,EAAWgnB,mBAC3B,GAAIn+C,EAIF,OAHqBA,EAAUogD,iBAAiBr0D,KAAKwlB,SAKrD,IAAI/T,EAAczR,KAAKwlB,QAAQ/T,YAC/B,OAAK25B,EAAW9rB,GAAE,MAAyB7N,EAAY+C,IAAI42B,EAAW30B,MAC7DhF,EAAYvQ,IAAIkqC,EAAW30B,OAIpCiqD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfrC,EAAiB93D,MAAOsiB,EAAOjb,cAG5B,MAQT,OANIsuD,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAGR,MAITuH,EAAArQ,UAAAgc,gBAAA,SAEEhc,EAEAgqB,EAEAxD,EAEAi4C,QAFA,IAAAj4C,MAA4C5e,EAAA23D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAeljE,EAAUiS,OAAOuC,MAAQm7C,EAAA9gD,YAAYyN,mBACpDtc,EAAUiS,OAAOA,OACjBjS,EAAUiS,OACVvB,EAA8B,KAC9B0V,EAAc4D,EAAgBve,EAAAsmD,cAAc/nC,GAAiB,GAGjE,GAAIhqB,EAAUqd,GAAG9R,EAAAnL,YAAY4iB,UAAW,CAMtC,GALA7a,OAAO+6D,EAAa1uD,MAAQm7C,EAAA9gD,YAAY+N,OACxClM,EAAuBwyD,EAGnBC,EAAmBnjE,EAAUmmB,oBAAoBC,GAC/B,OAAO+8C,EAG7B,IAAIC,EAAqB1yD,EAAcsZ,cACvC,GAAIo5C,EAAoB,CACtB,IAAIC,EAAsBl7D,OAAOuI,EAAc1Q,UAAU8qB,oBACrDw4C,EAAwBD,EAAoBn5D,OAChD/B,OAAOm7D,GAAyBD,EAAoBn5D,QACpD,IAAK,IAAI9L,EAAI,EAAGA,EAAIklE,IAAyBllE,EAAG,CAC9C,IAAImlE,EAAyBF,EAAoBjlE,GAAGO,KAAKqL,KACpDwc,EAAwBjU,IAAIgxD,IAC/B/8C,EAAwBtW,IACtBqzD,EACAH,EAAmBhlE,UAKtB,CAEL,IAAI+kE,EACJ,GAFAh7D,OAAO+6D,EAAa1uD,MAAQm7C,EAAA9gD,YAAY+N,OACpCumD,EAAmBnjE,EAAUmmB,oBAAoBC,GAC/B,OAAO+8C,EAI/B,IAEIK,EAFAC,EAAgBzjE,EAAU0jE,iBAC1B54C,EAAqB9qB,EAAU8qB,mBAEnC,GAAId,IAAkBw5C,EAA2Bx5C,EAAc9f,QAAS,CACtE/B,OAAO2iB,GAAsB04C,GAA4B14C,EAAmB5gB,QAC5E,IAAS9L,EAAI,EAAGA,EAAIolE,IAA4BplE,EAC9CooB,EAAwBtW,IACA4a,EAAoB1sB,GAAGO,KAAKqL,KAClDggB,EAAc5rB,SAIlB+J,QAAQ2iB,GAAmD,GAA7BA,EAAmB5gB,QAInD,IAAI4d,EAAwB,KACxBy5B,EAAmBkiB,EAAcliB,iBACrC,GAAIA,EAAkB,CAOpB,KANAz5B,EAAW/pB,KAAKwgE,YACdhd,EACAvhD,EAAUiS,OACVuU,EACAi4C,IAEa,OAAO,KACtBj4C,EAAwBtW,IAAI3E,EAAAxK,cAAcoC,MAAO2kB,QACxCpX,IACToX,EAAWpX,EAAcsM,KACzBwJ,EAAwBtW,IAAI3E,EAAAxK,cAAcoC,MAAO2kB,IAInD,IA8BIqhB,EA9BAw6B,EAAsBF,EAAcniB,WACpCsiB,EAAyBD,EAAoBz5D,OAC7C6d,EAAiB,IAAI/iB,MAAY4+D,GACjC3R,EAAiB,IAAIjtD,MAAc4+D,GACnC1R,EAAqB,EACzB,IAAS9zD,EAAI,EAAGA,EAAIwlE,IAA0BxlE,EAAG,CAC/C,IAAIylE,EAAuBF,EAAoBvlE,GAC3CylE,EAAqB9hB,eAAiBr2C,EAAAogD,cAAc6H,UACtDzB,EAAqB9zD,EAAI,GAE3B,IAAI6gE,EAAW4E,EAAqB7mD,KACpC,GAAItR,EAAAgkD,cAAcuP,GAKhB,OAJAlhE,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfE,EAASn2D,OAEJ,KAET,IAAIkf,EAAgBjqB,KAAKwgE,YACvBU,EACAj/D,EAAUiS,OACVuU,EACAi4C,GAEF,IAAKz2C,EAAe,OAAO,KAC3BD,EAAe3pB,GAAK4pB,EACpBiqC,EAAe7zD,GAAKylE,EAAqBllE,KAAKqL,KAKhD,GAAIhK,EAAUqd,GAAG9R,EAAAnL,YAAYyf,KAC3BspB,EAAa19B,EAAAkH,KAAKG,UACb,GAAI9S,EAAUqd,GAAG9R,EAAAnL,YAAYugB,aAClCwoB,EAAahhC,OAAOuI,GAAesM,SAC9B,CACDiiD,EAAWwE,EAAct6B,WAC7B,GAAIz9B,EAAAgkD,cAAcuP,GAKhB,OAJAlhE,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfE,EAASn2D,OAEJ,KAET,IAAIkU,EAAOjf,KAAKwgE,YACdU,EACAj/D,EAAUiS,OACVuU,EACAi4C,GAEF,IAAKzhD,EAAM,OAAO,KAClBmsB,EAAansB,EAGf,IAAIhL,EAAY,IAAIvG,EAAA0Y,UAAU4D,EAAgBohB,EAAYrhB,GAC1D9V,EAAUigD,eAAiBA,EAC3BjgD,EAAUkgD,mBAAqBA,EAE/B,IAAI3rC,EAAyBvmB,EAAUrB,KACnCynB,EAAYlc,SAAQqc,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAIqpC,EAAAx9C,SACjBoU,EACAvmB,EACAgS,EACAwU,GAGF,OADAxmB,EAAUqmB,oBAAoBD,EAAaE,GACpCA,GAITjW,EAAArQ,UAAAgjE,iCAAA,SAEEhjE,EAEAk/D,EAEAV,EAEAh4C,EAEAs9C,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIwE,EAAeljE,EAAUiS,OAAOuC,MAAQm7C,EAAA9gD,YAAYyN,mBACpDtc,EAAUiS,OAAOA,OACjBjS,EAAUiS,OACV8xD,EAAuC,KAG3C,GAAI/jE,EAAUqd,GAAG9R,EAAAnL,YAAY8S,SAAU,CAGrC,GAAIlT,EAAUqd,GAAG9R,EAAAnL,YAAY4iB,UAAW,CACtC7a,OAAO+6D,EAAa1uD,MAAQm7C,EAAA9gD,YAAY+N,OACxC,IAAIwmD,EAA6BF,EAAcl5C,cAC/C,GAAIo5C,EAAoB,CACtB,IAAIt4C,EAAqB3iB,OAAe+6D,EAAcljE,UAAU8qB,oBAC5Dw4C,EAAwBF,EAAmBl5D,OAC/C/B,OAAOm7D,GAAyBx4C,EAAmB5gB,QACnD,IAAK,IAAI9L,EAAI,EAAGA,EAAIklE,IAAyBllE,EAC3CooB,EAAwBtW,IACtB4a,EAAmB1sB,GAAGO,KAAKqL,KAC3Bo5D,EAAmBhlE,KAc3B,KARA2lE,EAAwBhmE,KAAK6hE,qBAC3Bz3D,OAAOnI,EAAU8qB,oBACjBo0C,EACAV,EACAh4C,EACAs9C,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkBh1D,OAOlD,OANIu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACf0E,EAAWh7D,MAAO9I,EAAUmQ,cAGzB,KAKX,OAAOpS,KAAKie,gBACVhc,EACA+jE,EACAv9C,EACAi4C,IAKJpuD,EAAArQ,UAAA8b,aAAA,SAEE9b,EAEAgqB,EAEAxD,EAEAi4C,wBAFA,IAAAj4C,MAA4C5e,EAAA23D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIt4C,EAAc4D,EAAgBve,EAAAsmD,cAAc/nC,GAAiB,GAG7D1D,EAAWtmB,EAAUmmB,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI0D,EAAe,CACjB,IACIg6C,GADAl5C,EAAqB3iB,OAAOnI,EAAU8qB,qBACC5gB,OACvC6gB,EAAmBf,EAAc9f,OACrC/B,OAAO4iB,GAAoBi5C,GAC3B,IAAK,IAAI5lE,EAAI,EAAGA,EAAI2sB,IAAoB3sB,EACtCooB,EAAwBtW,IAAI4a,EAAmB1sB,GAAGO,KAAKqL,KAAMggB,EAAc5rB,QAExE,CACL,IAAI0sB,EAAqB9qB,EAAU8qB,mBACnC3iB,SAAS2iB,GAAsBA,EAAmB5gB,SAIpD,IAAIiP,EAAgBnZ,EAAUmZ,cAC1B8qD,EAA0B,KAC9B,GAAI9qD,EAAe,CACjB,IAAIH,EAAc7Q,OAAOnI,EAAUgZ,aASnC,KARAirD,EAAYlmE,KAAKuhE,8BACfnmD,EACAH,EAAYgR,cACZhqB,EAAUiS,OACVrK,EAAA23D,QAAQ/4C,GACRxN,EACAylD,IAEc,OAAO,KAIzB,IAAIyF,EAAwBlkE,EAAUrB,KAClCynB,EAAYlc,SAAQg6D,GAAyB,IAAM99C,EAAc,MACrEE,EAAW,IAAIqpC,EAAA5lC,MAAMm6C,EAAuBlkE,EAAWgqB,EAAei6C,IAC7Dz9C,wBAA0BA,EACnCxmB,EAAUqmB,oBAAoBD,EAAaE,GAG3C,IAAI+C,EAAoB,EACxB,GAAI46C,EAAW,CAEb,GADIE,EAAcF,EAAUpnD,QACX,EACXX,EAAkBoK,EAASzJ,WACTyJ,EAASzJ,QAAUX,EAAkB,IAAI/W,SAC/D,IAAyC,IAAAi/D,EAAAtuD,EAAAquD,GAAWE,EAAAD,EAAApuD,QAAAquD,EAAApuD,KAAAouD,EAAAD,EAAApuD,OAAE,CAA7C,IAAAoG,EAAAjG,EAAAkuD,EAAAhlE,MAAA,GAACilE,EAAAloD,EAAA,GAAgBmoD,EAAAnoD,EAAA,GACxBF,EAAgBhM,IAAIo0D,EAAgBC,sGAGxCl7C,EAAe46C,EAAU95C,oBAI3B,IAAIq6C,EAA2BxkE,EAAUkc,gBACzC,GAAIsoD,MACF,IAAmB,IAAA1nD,EAAAhH,EAAA0uD,EAAyBlpD,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAE,CAAjD,IAAIqG,EAAMU,EAAA1d,MACb,OAAQgd,EAAO7H,MAGb,KAAKm7C,EAAA9gD,YAAYqa,gBACf,IAAIhN,EACJ,GADIA,EAAkBoK,EAASzJ,SAE1B,GAAIX,EAAgB3J,IAAI8J,EAAO1d,MAAO,CACzCZ,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACE1B,EAAQ9C,eAAezQ,MACxCuT,EAAO1d,MAET,YAPoB2nB,EAASzJ,QAAUX,EAAkB,IAAI/W,IAS/D,IAAIs/D,EAAiCpoD,EAAQ4iD,SACzCyF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAY3mE,KAAKwgE,YACfkG,EACAzkE,EAAUiS,OACVqU,EAASE,wBACTi4C,OAxBgB,CAEhB,IAAI0F,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAUpnD,UACTsnD,EAAY5xD,IAAqB8J,EAAQ1d,MAAO,CACjE,IAAIgmE,EAAYR,EAAYllE,IAAqBod,EAAQ1d,MACpDgmE,EAAUtnD,GAAG9R,EAAAnL,YAAYq0D,WAC5BtsD,OAAOw8D,EAAUnwD,MAAQm7C,EAAA9gD,YAAY8N,OACrC+nD,EAAoBC,EAAW3nD,MAIhC0nD,GACCjG,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACE1iD,EAAQ9C,eAAezQ,MAAM87D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAIlV,EAAAvmC,MAAsB/M,EAAQiK,EAAUo+C,GAChEv8D,OAAOP,EAAAJ,WAAWk9D,EAAUzU,WAC5B,IAAIzlB,EAAOk6B,EAAUzU,SAAW,EAC5B5mC,EAAemhB,IAAMnhB,EAAuC,GAAvBA,EAAemhB,IACxDq6B,EAAcx7C,aAAeA,EAC7BA,GAAgBq7C,EAAUzU,SAC1B3pC,EAASvT,IAAIsJ,EAAO1d,KAAMkmE,GAC1B,MAEF,KAAKlV,EAAA9gD,YAAYkN,mBACf,IAAI+oD,EAAqCzoD,EAAQ4J,QAAQK,GACzDA,EAASvT,IAAI+xD,EAAenmE,KAAMmmE,GAClC,MAEF,KAAKnV,EAAA9gD,YAAYyN,mBACf,IAAIyoD,EAAmB,IAAIpV,EAAApmC,SAA4BlN,EAAQiK,GAC3D/J,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIiN,EAAiBzrB,KAAKie,gBACxBO,EAAgB0J,QAAQK,GACxB,KACA1e,EAAA23D,QAAQj5C,EAASE,yBACjBi4C,GAEEj1C,IACFu7C,EAAiBv7C,eAAiBA,EAClCu7C,EAAiB9nD,QAAQuM,EAAexX,UAAUm3B,aAGtD,IAAI3sB,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIiN,EAAiB1rB,KAAKie,gBACxBQ,EAAgByJ,QAAQK,GACxB,KACA1e,EAAA23D,QAAQj5C,EAASE,yBACjBi4C,GAEEh1C,IACFs7C,EAAiBt7C,eAAiBA,EAC7Bs7C,EAAiB1nD,GAAG9R,EAAAnL,YAAY6jB,YACnC9b,OAAyD,GAAlDshB,EAAezX,UAAU+V,eAAe7d,QAC/C66D,EAAiB9nD,QAAQwM,EAAezX,UAAU+V,eAAe,MAIvEzB,EAASvT,IAAIgyD,EAAiBpmE,KAAMomE,GACpC,MAEF,QAAS58D,QAAO,sGAMtBme,EAAS6D,oBAAsBd,EAI7B,IAAI27C,EAAgB1+C,EAAS5O,aAAanM,EAAAxK,cAAcsC,aACxD,GAAI2hE,GAAiBA,EAAc/yD,SAAWqU,EAAU,CACtDne,OAAO68D,EAAcxwD,MAAQm7C,EAAA9gD,YAAYkN,oBACzC,IAAIkpD,EAAelnE,KAAKie,gBACHgpD,EACnB,KACA1+C,EAASE,wBACTi4C,GAEEwG,IAAc3+C,EAAS8D,oBAAgC66C,OAK/D,IAAsC,IAAA/uD,EAAAJ,EAAA9V,EAAUshB,oBAAkBpK,GAAAhB,EAAAF,QAAAkB,GAAAjB,KAAAiB,GAAAhB,EAAAF,OAAE,CAA3D,IAAAsB,GAAAnB,EAAAe,GAAA7X,MAAA,GAACmV,GAAA8C,GAAA,GAAM4tD,GAAA5tD,GAAA,GACdnP,OAAOqM,IAAQm7C,EAAArkD,aAAasD,SAC5B,IAAIu2D,QAAgB,EACpB,GAAID,GAAkB7nD,GAAG9R,EAAAnL,YAAY4iB,UAAW,CAC1C8hD,EAAiBI,GAAkBj/C,QAAQK,GAC/C6+C,GAAmBpnE,KAAKie,gBACtB8oD,EACA,KACAl9D,EAAA23D,UACAd,QAGF0G,GAAmBpnE,KAAKie,gBACtBkpD,GACA,KACAt9D,EAAA23D,UACAd,GAGJ,GAAK0G,GAAL,CACA,IAAI9jD,GAAYiF,EAASjF,UACpBA,KAAWiF,EAASjF,UAAYA,GAAY,IAAIlc,KACrDkc,GAAUnR,IAAIsE,GAAM2wD,yGAEtB,OAAO7+C,GAITjW,EAAArQ,UAAAs/D,8BAAA,SAEEt/D,EAEAk/D,EAEAV,EAEAh4C,EAEAs9C,EAEArF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIqF,EAAuC,KAG3C,GAAI/jE,EAAUqd,GAAG9R,EAAAnL,YAAY8S,UAS3B,KARA6wD,EAAwBhmE,KAAK6hE,qBAC3Bz3D,OAAOnI,EAAU8qB,oBACjBo0C,EACAV,EACAh4C,EACAs9C,EACArF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkBh1D,OAOlD,OANIu0D,GAAcN,EAAWO,QAC3B3gE,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACf0E,EAAWh7D,MAAO9I,EAAUmQ,cAGzB,KAKX,OAAOpS,KAAK+d,aACV9b,EACA+jE,EACAv9C,EACAi4C,IAGNpuD,EAlwDA,CAA8B7E,EAAAX,mBAAjBpN,EAAA4S,4RC5Fb,IAuIY+0D,EAvIZ35D,EAAAvN,EAAA,GAMAyxD,EAAAzxD,EAAA,GAQA0xD,EAAA1xD,EAAA,GAuCAqN,EAAArN,EAAA,GAIAsN,EAAAtN,EAAA,IASA,SAAkBmnE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,oBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,+BAEAA,IAAA,6BAKAA,IAAA,mDAEAA,IAAA,kDAEAA,IAAA,0DAEAA,IAAA,kDAEAA,IAAA,wDAEAA,IAAA,yDAKAA,IAAA,uCAEAA,IAAA,6CAKAA,IAAA,uCAWAA,IAAA,yCA7DF,CAAkB5nE,EAAA4nE,YAAA5nE,EAAA4nE,UAAS,KAqE3B,SAAYD,GAEVA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,0BAEAA,IAAA,wBAGAA,IAAA,oDAEAA,IAAA,uDAEAA,IAAA,qDAGAA,IAAA,sCAQAA,IAAA,uCAMAA,IAAA,iCAvCF,CAAYA,EAAA3nE,EAAA2nE,aAAA3nE,EAAA2nE,WAAU,KA0CtB,SAAiBA,GACCA,EAAA16D,KAAhB,SAAqBo6B,EAAkBC,GACrC,OAASD,EAAOsgC,EAAWE,gBAAoBvgC,EAAQqgC,EAAWE,gBACzDxgC,EAAOsgC,EAAWG,gBAAoBxgC,EAAQqgC,EAAWG,iBAHtE,CAAiBH,EAAA3nE,EAAA2nE,aAAA3nE,EAAA2nE,WAAU,KAQ3B,SAAYI,GAEVA,IAAA,eAGAA,IAAA,6BAEAA,IAAA,yDAGAA,IAAA,qCAGAA,IAAA,qCAbF,CAAY/nE,EAAA+nE,aAAA/nE,EAAA+nE,WAAU,KAetB,SAAiBA,GACCA,EAAA96D,KAAhB,SAAqBo6B,EAAkBC,GACrC,OAASD,EAAO0gC,EAAWF,gBAAoBvgC,EAAQygC,EAAWF,gBACzDxgC,EAAO0gC,EAAWD,gBAAoBxgC,EAAQygC,EAAWD,iBAHtE,CAAiB9nE,EAAA+nE,aAAA/nE,EAAA+nE,WAAU,KAQ3B,IAAAp9C,EAAA,WAsDE,SAAAA,IArCArqB,KAAA0nE,aAAyC,KAIzC1nE,KAAA2nE,WAA4C,KA6yB9C,OAtyBSt9C,EAAA1oB,OAAP,SAAcimE,GACZ,IAAIx9C,EAAO,IAAIC,EAWf,OAVAD,EAAKlW,OAAS,KACdkW,EAAKpX,MAAK,EACVoX,EAAKw9C,eAAiBA,EACtBx9C,EAAKy9C,cAAgB,KACrBz9C,EAAKT,WAAa,KAClBS,EAAKghB,WAAaw8B,EAAe3zD,UAAUm3B,WAC3ChhB,EAAK3B,wBAA0Bm/C,EAAen/C,wBAC9C2B,EAAK09C,WAAa,GAClB19C,EAAK29C,eAAiB,KACtB39C,EAAK49C,kBAAoB,KAClB59C,GAIFC,EAAA49C,aAAP,SAAoBL,EAA0BG,GAC5C,IAAI39C,EAAOC,EAAK1oB,OAAOimE,GAMvB,OALAx9C,EAAKjY,IAAG,OACRiY,EAAK29C,eAAiBA,EACtB39C,EAAK49C,kBAAoBD,EAAe31D,aAAe,aAAe21D,EAAe9+C,gBAAgBvd,SAAS,IAC9G0e,EAAKghB,WAAa28B,EAAe9zD,UAAUm3B,WAC3ChhB,EAAK3B,wBAA0Bs/C,EAAet/C,wBACvC2B,GAMTrpB,OAAAC,eAAIqpB,EAAApoB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK+nE,gBAAkB/nE,KAAK4nE,gDAIrCv9C,EAAApoB,UAAAqd,GAAA,SAAGoB,GAAyB,OAAQ1gB,KAAKgT,MAAQ0N,IAASA,GAE1D2J,EAAApoB,UAAA2f,MAAA,SAAMlB,GAAyB,OAA8B,IAAtB1gB,KAAKgT,MAAQ0N,IAEpD2J,EAAApoB,UAAAkQ,IAAA,SAAIuO,GAAyB1gB,KAAKgT,OAAS0N,GAE3C2J,EAAApoB,UAAA2jB,MAAA,SAAMlF,GAAyB1gB,KAAKgT,QAAU0N,GAG9C2J,EAAApoB,UAAAimE,KAAA,WACE,IAAIC,EAAS,IAAI99C,EAWjB,OAVA89C,EAAOj0D,OAASlU,KAChBmoE,EAAOn1D,MAAQhT,KAAKgT,MACpBm1D,EAAOP,eAAiB5nE,KAAK4nE,eAC7BO,EAAON,cAAgB7nE,KAAK6nE,cAC5BM,EAAOx+C,WAAa3pB,KAAK2pB,WACzBw+C,EAAO/8B,WAAaprC,KAAKorC,WACzB+8B,EAAO1/C,wBAA0BzoB,KAAKyoB,wBACtC0/C,EAAOL,WAAa9nE,KAAK8nE,WAAWM,QACpCD,EAAOJ,eAAiB/nE,KAAK+nE,eAC7BI,EAAOH,kBAAoBhoE,KAAKgoE,kBACzBG,GAIT99C,EAAApoB,UAAAomE,aAAA,SAAappD,EAAYyP,QAAA,IAAAA,MAAA,MACvB,IACI45C,EASAx+C,EAVA89C,EAAiB5nE,KAAK4nE,eAE1B,OAAQ3oD,EAAKw0C,gBACX,KAAK5B,EAAAriC,WAAWppB,IAAOkiE,EAAQV,EAAex+C,SAAU,MACxD,KAAKyoC,EAAAriC,WAAWnpB,IAAOiiE,EAAQV,EAAev+C,SAAU,MACxD,KAAKwoC,EAAAriC,WAAW3oB,IAAOyhE,EAAQV,EAAet+C,SAAU,MACxD,KAAKuoC,EAAAriC,WAAW1oB,IAAOwhE,EAAQV,EAAer+C,SAAU,MACxD,KAAKsoC,EAAAriC,WAAWzoB,KAAQuhE,EAAQV,EAAep+C,UAAW,MAC1D,QAAS,MAAM,IAAIpN,MAAM,0BAG3B,GAAIsS,EAAQ,CACV,GAAI45C,GAASA,EAAMn8D,OACjB,IAAK,IAAI9L,EAAI,EAAG+V,EAAIkyD,EAAMn8D,OAAQ9L,EAAI+V,IAAK/V,EACzC,IAAKquB,EAAOla,IAAI8zD,EAAMjoE,GAAGunB,OAAQ,CAC/BkC,EAAQw+C,EAAMjoE,GAEd,IADA,IAAIkoE,EAAID,EAAMn8D,OAAS,EAChB9L,EAAIkoE,GAAGj7C,UAAUg7C,EAAMjoE,GAAKioE,EAAY,EAANjoE,MAKzC,OAJAioE,EAAMn8D,OAASo8D,EACfz+C,EAAM7K,KAAOA,EACb6K,EAAM9W,MAAQxF,EAAAnL,YAAY4Q,KAC1BjT,KAAKwoE,eAAe1+C,EAAMlC,OAAO,GAC1BkC,EAIbA,EAAQ89C,EAAer9C,SAAStL,QAE5BqpD,GAASA,EAAMn8D,SACjB2d,EAAQw+C,EAAMG,OACRxpD,KAAOA,EACb6K,EAAM9W,MAAQxF,EAAAnL,YAAY4Q,MAE1B6W,EAAQ89C,EAAer9C,SAAStL,GAIpC,OADAjf,KAAKwoE,eAAe1+C,EAAMlC,OAAO,GAC1BkC,GAITO,EAAApoB,UAAAymE,oBAAA,SAAoBzpD,EAAYyP,QAAA,IAAAA,MAAA,MAC9B,IAAI5E,EAAQ9pB,KAAKqoE,aAAappD,EAAMyP,GACpC5E,EAAM3X,IAAI3E,EAAAnL,YAAYsmE,QACtB,IAAIjB,EAAe1nE,KAAK0nE,aAIxB,OAHKA,IAAc1nE,KAAK0nE,aAAeA,EAAe,IAAItgE,KAC1DsgE,EAAav1D,IAAI,QAAWnS,KAAK4nE,eAAez+C,oBAAsBW,GACtE9pB,KAAK4oE,aAAa9+C,EAAMlC,MAAOy/C,EAAWwB,UACnC/+C,GAITO,EAAApoB,UAAA6mE,cAAA,SAAch/C,GACZ,IAAIA,EAAMxK,GAAG9R,EAAAnL,YAAYilB,SAAzB,CACAld,OAAO0f,EAAMlC,OAAS,GACtB,IACI0gD,EADAV,EAAiB5nE,KAAK4nE,eAG1B,OADAx9D,OAAqB,MAAd0f,EAAM7K,MACE6K,EAAM7K,KAAMw0C,gBACzB,KAAK5B,EAAAriC,WAAWppB,IACdkiE,EAAQV,EAAex+C,WAAaw+C,EAAex+C,SAAW,IAC9D,MAEF,KAAKyoC,EAAAriC,WAAWnpB,IACdiiE,EAAQV,EAAev+C,WAAau+C,EAAev+C,SAAW,IAC9D,MAEF,KAAKwoC,EAAAriC,WAAW3oB,IACdyhE,EAAQV,EAAet+C,WAAas+C,EAAet+C,SAAW,IAC9D,MAEF,KAAKuoC,EAAAriC,WAAW1oB,IACdwhE,EAAQV,EAAer+C,WAAaq+C,EAAer+C,SAAW,IAC9D,MAEF,KAAKsoC,EAAAriC,WAAWzoB,KACduhE,EAAQV,EAAep+C,YAAco+C,EAAep+C,UAAY,IAChE,MAEF,QAAS,MAAM,IAAIpN,MAAM,0BAE3BhS,OAAO0f,EAAMlC,OAAS,GACtB0gD,EAAM57D,KAAKod,KAIbO,EAAApoB,UAAA8mE,oBAAA,SAAoB9pD,EAAYyP,QAAA,IAAAA,MAAA,MAC9B,IAAI5E,EAAQ9pB,KAAKqoE,aAAappD,EAAMyP,GAEpC,OADA1uB,KAAK8oE,cAAch/C,GACZA,GAITO,EAAApoB,UAAA+mE,eAAA,SAAepoE,GACb,IAAI8mE,EAAe1nE,KAAK0nE,aACxB,OAAIA,GAAgBA,EAAalzD,IAAI5T,GAAc8mE,EAAaxmE,IAAIN,GAC7D,MAITypB,EAAApoB,UAAAgnE,eAAA,SAAeroE,EAAcqe,EAAYyP,QAAA,IAAAA,MAAA,MACvC,IAAIw6C,EAAclpE,KAAKqoE,aAAappD,EAAMyP,GACtCg5C,EAAe1nE,KAAK0nE,aAKxB,OAJKA,EACAt9D,QAAQs9D,EAAalzD,IAAI5T,IADXZ,KAAK0nE,aAAeA,EAAe,IAAItgE,IAE1D8hE,EAAY/2D,IAAI3E,EAAAnL,YAAYsmE,QAC5BjB,EAAav1D,IAAIvR,EAAMsoE,GAChBA,GAIT7+C,EAAApoB,UAAAknE,eAAA,SAAevoE,EAAcqe,EAAY2I,EAAYm+C,GACnD,QADmD,IAAAA,MAAA,MAC9C/lE,KAAK0nE,aACL,CACH,IAAI0B,EAAgBppE,KAAK0nE,aAAaxmE,IAAIN,GAC1C,GAAIwoE,EAOF,OANIrD,GACF/lE,KAAK4nE,eAAepiD,QAAQnY,MAC1BI,EAAAhD,eAAeuV,uBACf+lD,EAAWh7D,OAGRq+D,OAVappE,KAAK0nE,aAAe,IAAItgE,IAahDgD,OAAOwd,EAAQ5nB,KAAK4nE,eAAej/C,cAAcxc,QACjD,IAAIk9D,EAAc,IAAIzX,EAAAjqC,MAAM/mB,EAAMgnB,EAAO3I,EAAMjf,KAAK4nE,gBAGpD,OADA5nE,KAAK0nE,aAAav1D,IAAIvR,EAAMyoE,GACrBA,GAITh/C,EAAApoB,UAAAqnE,iBAAA,mBACE,GAAItpE,KAAK0nE,aAAc,KACrB,IAAwB,IAAAhhD,EAAA3O,EAAA/X,KAAK0nE,aAAanqD,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAA/C,IAAIixD,EAAW9qD,EAAA9c,MACd4nE,EAAY5pD,GAAG9R,EAAAnL,YAAYsmE,SAC7B3oE,KAAK8oE,cAAcI,qGAGvBlpE,KAAK0nE,aAAe,OAKxBr9C,EAAApoB,UAAA0iE,YAAA,SAAY/jE,GACV,IACI2oE,EADA5jD,EAAuB3lB,KAE3B,GAAG,IAAKupE,EAAQ5jD,EAAQ+hD,eAAkB6B,EAAM/0D,IAAI5T,GAAQ,OAAO2oE,EAAMroE,IAAIN,SACtE+kB,EAAUA,EAAQzR,QACzB,OAAOlU,KAAK4nE,eAAel/C,aAAaxnB,IAAIN,IAI9CypB,EAAApoB,UAAAqkB,OAAA,SAAO1lB,GACL,IAAIgY,EAAU5Y,KAAK2kE,YAAY/jE,GAC/B,OAAIgY,GACG5Y,KAAKokE,eAAe99C,OAAO1lB,IAIpCypB,EAAApoB,UAAAunE,YAAA,SAAY5hD,EAAYlH,EAAkB+oD,GACxC,YADwC,IAAAA,OAAA,GACpC7hD,EAAQ,EAAU6hD,EAEf7hD,EADU5nB,KAAK8nE,WACI37D,SAAWmhB,UAAUttB,KAAK8nE,WAAWlgD,IAAUlH,IAASA,GAIpF2J,EAAApoB,UAAAynE,eAAA,SAAe9hD,EAAYlH,EAAkB+oD,GAC3C,YAD2C,IAAAA,OAAA,GACvC7hD,EAAQ,EAAU6hD,EAEf7hD,EADU5nB,KAAK8nE,WACI37D,QAAwD,IAA7CmhB,UAAUttB,KAAK8nE,WAAWlgD,IAAUlH,IAI3E2J,EAAApoB,UAAA2mE,aAAA,SAAahhD,EAAYlH,GACvB,KAAIkH,EAAQ,GAAZ,CACA,IAAIkgD,EAAa9nE,KAAK8nE,WAClB90D,EAAQ4U,EAAQkgD,EAAW37D,OAASmhB,UAAUw6C,EAAWlgD,IAAU,EACvE5nB,KAAK8nE,WAAWlgD,GAAS5U,EAAQ0N,IAInC2J,EAAApoB,UAAAumE,eAAA,SAAe5gD,EAAYlH,GACzB,KAAIkH,EAAQ,GAAZ,CACA,IAAIkgD,EAAa9nE,KAAK8nE,WAClB90D,EAAQ4U,EAAQkgD,EAAW37D,OAASmhB,UAAUw6C,EAAWlgD,IAAU,EACvE5nB,KAAK8nE,WAAWlgD,GAAS5U,GAAS0N,IAIpC2J,EAAApoB,UAAA0nE,eAAA,WACE,IAAI/B,EAAiB5nE,KAAK4nE,eACtB90D,EAAK80D,EAAen+C,cACpBmgD,EAAQhC,EAAel+C,WAG3B,OAFKkgD,EACAA,EAAMl9D,KAAKoG,GADJ80D,EAAel+C,WAAa,CAAE5W,GAEnC80D,EAAej+C,WAAa7W,EAAGpH,SAAS,KAIjD2e,EAAApoB,UAAA4nE,cAAA,WACE,IAAIjC,EAAiB5nE,KAAK4nE,eACtBgC,EAAQx/D,OAAOw9D,EAAel+C,YAC9Bvd,EAAS/B,OAAOw/D,EAAMz9D,QAC1By9D,EAAMnB,MACFt8D,EAAS,EACXy7D,EAAej+C,WAAaigD,EAAMz9D,EAAS,GAAGT,SAAS,KAEvDk8D,EAAej+C,WAAa,KAC5Bi+C,EAAel+C,WAAa,OAKhCW,EAAApoB,UAAA6nE,QAAA,SAAQr7C,GACNzuB,KAAKgT,OAAuB,MAAdyb,EAAMzb,MACpBhT,KAAK8nE,WAAar5C,EAAMq5C,YAI1Bz9C,EAAApoB,UAAA8nE,mBAAA,SAAmBt7C,GACbA,EAAMnP,GAAE,IACVtf,KAAKmS,IAAG,KAENsc,EAAMnP,GAAE,IACVtf,KAAKmS,IAAG,MAENsc,EAAMnP,GAAE,KAAsBmP,EAAM9E,YAAc3pB,KAAK2pB,YACzD3pB,KAAKmS,IAAG,MAENsc,EAAMnP,GAAE,KAAyBmP,EAAMo5C,eAAiB7nE,KAAK6nE,eAC/D7nE,KAAKmS,IAAG,MAENsc,EAAMnP,GAAE,KACVtf,KAAKmS,IAAG,OAGV,IADA,IAAI21D,EAAar5C,EAAMq5C,WACdznE,EAAI,EAAG+V,EAAI0xD,EAAW37D,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACjD,IAAI2S,EAAQ80D,EAAWznE,GACnB2S,EAAQq0D,EAAWwB,UAAU7oE,KAAK4oE,aAAavoE,EAAGgnE,EAAW2C,wBAC7Dh3D,EAAQq0D,EAAW4C,UAAUjqE,KAAK4oE,aAAavoE,EAAGgnE,EAAW6C,wBAC7Dl3D,EAAQq0D,EAAW8C,WAAWnqE,KAAK4oE,aAAavoE,EAAGgnE,EAAW+C,2BAKtE//C,EAAApoB,UAAAooE,cAAA,SAActjC,EAAYC,GAExBhnC,KAAKmS,IAAI40B,EAAK/zB,MAAQg0B,EAAMh0B,MAAK,KAGjChT,KAAKmS,IAAc,MAAV40B,EAAK/zB,OACdhT,KAAKmS,IAAe,MAAX60B,EAAMh0B,OAGfhT,KAAK+pE,mBAAmBhjC,GACxB/mC,KAAK+pE,mBAAmB/iC,GAQxB,IALA,IAAIsjC,EAAiBvjC,EAAK+gC,WACtByC,EAAoBD,EAAen+D,OACnCq+D,EAAkBxjC,EAAM8gC,WACxB2C,EAAqBD,EAAgBr+D,OACrCu+D,EAAgB,IAAIzjE,MAAkB0jE,IAASJ,EAAmBE,IAC7DpqE,EAAI,EAAGA,EAAIkqE,IAAqBlqE,EACvCqqE,EAAcrqE,GAAKgnE,EAAW16D,KAC5B2gB,UAAUg9C,EAAejqE,IACzBA,EAAIoqE,EACAn9C,UAAUk9C,EAAgBnqE,IAC1B,GAGR,IAASA,EAAIkqE,EAAmBlqE,EAAIoqE,IAAsBpqE,EACxDqqE,EAAcrqE,GAAKgnE,EAAW16D,KAC5B,EACA2gB,UAAUk9C,EAAgBnqE,KAG9BL,KAAK8nE,WAAa4C,GAIpBrgD,EAAApoB,UAAA2oE,UAAA,SAAUhkC,EAAqB3nB,GAC7B,IAAKA,EAAKK,GAAE,KAAsB,OAAO,EAIzC,OAAQuyC,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,IAAK0S,EAAAla,WAAW/Q,GAAO,MAEvB,QADI9c,EAAQ9pB,KAAK4nE,eAAej/C,cAAckpC,EAAAta,iBAAiB3Q,KACjD3nB,KAAKK,GAAE,MAAwBtf,KAAKwpE,YAAY1/C,EAAMlC,MAAOy/C,EAAW9C,SAAS,GAEjG,KAAK1S,EAAApiC,aAAa0lB,SAChB,IAAIrrB,EACJ,QADIA,EAAQ9pB,KAAK4nE,eAAej/C,cAAckpC,EAAAva,iBAAiB1Q,KACjD3nB,KAAKK,GAAE,MAAwBtf,KAAKwpE,YAAY1/C,EAAMlC,MAAOy/C,EAAW9C,SAAS,GAGnG,OAAO,GAITl6C,EAAApoB,UAAA4oE,qBAAA,SAAqBjkC,GAEnB,OAAQirB,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,IAAK0S,EAAAla,WAAW/Q,GAAO,MACvB,IAAI9c,EAAQ9pB,KAAK4nE,eAAej/C,cAAckpC,EAAAta,iBAAiB3Q,IAC/D5mC,KAAK4oE,aAAa9+C,EAAMlC,MAAOy/C,EAAW9C,SAC1CvkE,KAAK6qE,qBAAqBhZ,EAAApa,iBAAiB7Q,IAC3C,MAEF,KAAKirB,EAAApiC,aAAa0lB,SACZrrB,EAAQ9pB,KAAK4nE,eAAej/C,cAAckpC,EAAAva,iBAAiB1Q,IAC/D5mC,KAAK4oE,aAAa9+C,EAAMlC,MAAOy/C,EAAW9C,SAC1C,MAEF,KAAK1S,EAAApiC,aAAakvB,GAChB,IAAIrU,EAAUunB,EAAApY,WAAW7S,GACzB,IAAK0D,EAAS,MACVunB,EAAA9a,gBAAgBzM,IAAYunB,EAAApiC,aAAaolB,QAIxCgd,EAAA7a,kBAAkB1M,IAAYunB,EAAAriC,WAAWppB,KAAoC,GAA7ByrD,EAAA5a,iBAAiB3M,IACjEunB,EAAA7a,kBAAkB1M,IAAYunB,EAAAriC,WAAWnpB,KAAuC,GAAhCwrD,EAAA3a,oBAAoB5M,IAAkD,GAAjCunB,EAAA1a,qBAAqB7M,MAE3GtqC,KAAK6qE,qBAAqBhZ,EAAAxY,eAAezS,IACzC5mC,KAAK6qE,qBAAqBhZ,EAAAtY,UAAU3S,KAGxC,MAEF,KAAKirB,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQg4C,OACb,KAAKjZ,EAAA/+B,QAAQi4C,OACX/qE,KAAKgrE,sBAAsBnZ,EAAA3Z,cAActR,IAI7C,MAEF,KAAKirB,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAClB,KAAKirB,EAAAz5B,SAAS6yC,MACZ,IAAIlkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1EhnC,KAAK6qE,qBAAqB9jC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAAS8yC,MACRnkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAuC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GAEhG8qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAwC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IAClHhnC,KAAK6qE,qBAAqB9jC,GAF1B/mC,KAAK6qE,qBAAqB7jC,GAI5B,MAEF,KAAK6qB,EAAAz5B,SAAS+yC,MACRpkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1EhnC,KAAK6qE,qBAAqB9jC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASgzC,MACRrkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAsC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GACxG/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAuC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IACjHhnC,KAAK6qE,qBAAqB9jC,GAKhC,MAEF,KAAK8qB,EAAApiC,aAAasvB,KAGhB,OAFW8S,EAAAhX,cAAcjU,IAGvB,KAFY5mC,KAAK4nE,eAAepiD,QAEnBzI,eAAe3K,aAC1BpS,KAAK6qE,qBAAqBhZ,EAAA5W,eAAerU,EAAM,OAUzDvc,EAAApoB,UAAA+oE,sBAAA,SAAsBpkC,GAEpB,OAAQirB,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQg4C,OACb,KAAKjZ,EAAA/+B,QAAQi4C,OACX/qE,KAAK6qE,qBAAqBhZ,EAAA3Z,cAActR,IAI5C,MAEF,KAAKirB,EAAApiC,aAAakvB,GAChB,IAAItU,EAASwnB,EAAAtY,UAAU3S,GACvB,GAAIirB,EAAA9a,gBAAgB1M,IAAWwnB,EAAApiC,aAAaolB,MAAO,CAEjD,IADcgd,EAAApY,WAAW7S,GACX,OAIXirB,EAAA7a,kBAAkB3M,IAAWwnB,EAAAriC,WAAWppB,KAAmC,GAA5ByrD,EAAA5a,iBAAiB5M,IAChEwnB,EAAA7a,kBAAkB3M,IAAWwnB,EAAAriC,WAAWnpB,MAAuC,GAA/BwrD,EAAA3a,oBAAoB7M,IAAgD,GAAhCwnB,EAAA1a,qBAAqB9M,OAE1GrqC,KAAKgrE,sBAAsBnZ,EAAAxY,eAAezS,IAC1C5mC,KAAKgrE,sBAAsBnZ,EAAApY,WAAW7S,KAI1C,MAEF,KAAKirB,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAElB,KAAKirB,EAAAz5B,SAAS6yC,MACZ,IAAIlkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1EhnC,KAAK6qE,qBAAqB9jC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAAS8yC,MACRnkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAsC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GACxG/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAuC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IACjHhnC,KAAK6qE,qBAAqB9jC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAAS+yC,MACRpkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE/mC,KAAK6qE,qBAAqB7jC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1EhnC,KAAK6qE,qBAAqB9jC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASgzC,MACRrkC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAuC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GAEhG8qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAwC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IAClHhnC,KAAK6qE,qBAAqB9jC,GAF1B/mC,KAAK6qE,qBAAqB7jC,MAiBtC3c,EAAApoB,UAAAopE,YAAA,SAAYzkC,EAAqB3nB,GAM/B,GAHA7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,OAGfkK,EAAKK,GAAG,IAAsC,OAAO,EAE1D,IAAIopC,EACJ,OAAQmJ,EAAA9a,gBAAgBnQ,IAGtB,KAAKirB,EAAApiC,aAAa0lB,SAChB,IAAIrrB,EAAQ9pB,KAAK4nE,eAAej/C,cAAckpC,EAAAva,iBAAiB1Q,IAC/D,OAAQ5mC,KAAKwpE,YAAY1/C,EAAMlC,MAAOy/C,EAAWiE,SAAS,IACnDC,EAAsBzhD,EAAM7K,KAAMA,GAI3C,KAAK4yC,EAAApiC,aAAa0vB,SAEhB,OADA/0C,OAAOynD,EAAAla,WAAW/Q,IACX5mC,KAAKqrE,YAAYxZ,EAAApa,iBAAiB7Q,GAAO3nB,GAIlD,KAAK4yC,EAAApiC,aAAa4lB,UAEhB,IAAIm2B,EAASphE,OAAOpK,KAAK4nE,eAAepiD,QAAQlU,eAAepQ,IAAIkJ,OAAOynD,EAAAha,iBAAiBjR,MAE3F,OADAx8B,OAAOohE,EAAO/0D,MAAQm7C,EAAA9gD,YAAYmQ,QAC3BsqD,EAAsBnhE,OAAgBohE,EAAQvsD,MAAOA,GAG9D,KAAK4yC,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAGlB,KAAKirB,EAAAz5B,SAAS6yC,MACd,KAAKpZ,EAAAz5B,SAAS8yC,MACd,KAAKrZ,EAAAz5B,SAASqzC,MACd,KAAK5Z,EAAAz5B,SAASszC,MACd,KAAK7Z,EAAAz5B,SAAS+yC,MACd,KAAKtZ,EAAAz5B,SAASgzC,MACd,KAAKvZ,EAAAz5B,SAASuzC,MACd,KAAK9Z,EAAAz5B,SAASwzC,MACd,KAAK/Z,EAAAz5B,SAASyzC,MACd,KAAKha,EAAAz5B,SAAS0zC,MACd,KAAKja,EAAAz5B,SAAS2zC,MACd,KAAKla,EAAAz5B,SAAS4zC,MACd,KAAKna,EAAAz5B,SAAS6zC,MACd,KAAKpa,EAAAz5B,SAAS8zC,MACd,KAAKra,EAAAz5B,SAAS+zC,MACd,KAAKta,EAAAz5B,SAASg0C,MACd,KAAKva,EAAAz5B,SAASi0C,MACd,KAAKxa,EAAAz5B,SAASk0C,MACd,KAAKza,EAAAz5B,SAASm0C,MACd,KAAK1a,EAAAz5B,SAASo0C,MACd,KAAK3a,EAAAz5B,SAASq0C,MACd,KAAK5a,EAAAz5B,SAASs0C,MACd,KAAK7a,EAAAz5B,SAASu0C,MACd,KAAK9a,EAAAz5B,SAASw0C,MACd,KAAK/a,EAAAz5B,SAASy0C,MACd,KAAKhb,EAAAz5B,SAAS00C,MACd,KAAKjb,EAAAz5B,SAAS20C,MACd,KAAKlb,EAAAz5B,SAAS40C,MACd,KAAKnb,EAAAz5B,SAAS60C,MACd,KAAKpb,EAAAz5B,SAAS80C,MACd,KAAKrb,EAAAz5B,SAAS+0C,MACd,KAAKtb,EAAAz5B,SAASg1C,MAAO,OAAO,EAG5B,KAAKvb,EAAAz5B,SAASi1C,OACZ,QAEIxb,EAAA9a,gBAAgB2R,EAAUmJ,EAAA9Z,cAAcnR,KAAUirB,EAAApiC,aAAaolB,QAEhC,GAA7Bgd,EAAA5a,iBAAiByR,IAEc,GAA7BmJ,EAAA5a,iBAAiByR,KAChB1oD,KAAKqrE,YAAYxZ,EAAA7Z,eAAepR,GAAO3nB,KAI5C4yC,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,QAEjC,GAA7Bgd,EAAA5a,iBAAiByR,IAEc,GAA7BmJ,EAAA5a,iBAAiByR,KAChB1oD,KAAKqrE,YAAYxZ,EAAA9Z,cAAcnR,GAAO3nB,KASjD,KAAK4yC,EAAAz5B,SAASk1C,OAGZ,QAGMzb,EAAA9a,gBAAgB2R,EAAUmJ,EAAA9Z,cAAcnR,KAAUirB,EAAApiC,aAAaolB,OAC/Dgd,EAAA5a,iBAAiByR,IAAYzpC,EAAK6zC,wBAAwBplD,EAAAkH,KAAKxR,OAC3DpD,KAAKqrE,YAAY3iB,EAASzpC,IAG9B4yC,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiByR,IAAYzpC,EAAK6zC,wBAAwBplD,EAAAkH,KAAKxR,OAC3DpD,KAAKqrE,YAAY3iB,EAASzpC,IAMtC,KAAK4yC,EAAAz5B,SAASm1C,OACZ,IAAIxgC,EAAQ,GAAK9tB,EAAK2sB,KACtB,OAAOimB,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiByR,GAAW3b,EAIrC,KAAK8kB,EAAAz5B,SAASo1C,OACRzgC,EAAQ,GAAK9tB,EAAK2sB,KACtB,OAAO5rC,KAAKqrE,YAAYxZ,EAAA9Z,cAAcnR,GAAO3nB,KAC3C4yC,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiByR,GAAW3b,GAMhC,KAAK8kB,EAAAz5B,SAASq1C,OACR1gC,EAAQ,GAAK9tB,EAAK2sB,KACtB,OAAO3sB,EAAKK,GAAE,KAERuyC,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiByR,GAAW3b,GAE9B/sC,KAAKqrE,YAAYxZ,EAAA9Z,cAAcnR,GAAO3nB,MACpC4yC,EAAA9a,gBAAgB2R,EAAUmJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiByR,IAAY3b,GAKrC,KAAK8kB,EAAAz5B,SAASs1C,OACd,KAAK7b,EAAAz5B,SAASu1C,OACd,KAAK9b,EAAAz5B,SAASw1C,OACZ,OAAO5tE,KAAKqrE,YAAYxZ,EAAA9Z,cAAcnR,GAAO3nB,IACtCjf,KAAKqrE,YAAYxZ,EAAA7Z,eAAepR,GAAO3nB,GAGlD,MAGF,KAAK4yC,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IAGjB,KAAKirB,EAAA/+B,QAAQg4C,OACb,KAAKjZ,EAAA/+B,QAAQi4C,OAAQ,OAAO,EAG5B,KAAKlZ,EAAA/+B,QAAQ+6C,OACb,KAAKhc,EAAA/+B,QAAQg7C,OACb,KAAKjc,EAAA/+B,QAAQi7C,UAAW,OAAO9uD,EAAK2sB,KAAO,EAE7C,MAIF,KAAKimB,EAAApiC,aAAaolB,MAChB,IAAIvzC,EAAa,EACjB,OAAQuwD,EAAA7a,kBAAkBpQ,IACxB,KAAKirB,EAAAriC,WAAWppB,IAAO9E,EAAQuwD,EAAA5a,iBAAiBrQ,GAAO,MACvD,KAAKirB,EAAAriC,WAAWnpB,IAAO/E,EAAQuwD,EAAA3a,oBAAoBtQ,GAAO,MAC1D,KAAKirB,EAAAriC,WAAW3oB,IAAOvF,EAAQ8B,IAAIyuD,EAAAza,iBAAiBxQ,IAAQ,MAC5D,KAAKirB,EAAAriC,WAAW1oB,IAAOxF,EAAQ8B,IAAIyuD,EAAAxa,iBAAiBzQ,IAAQ,MAC5D,QAASx8B,QAAO,GAElB,OAAQ6U,EAAKxI,MACX,OAAkB,OAAOnV,EAAQ4B,GAAG8qE,WAAa1sE,EAAQ4B,GAAGuxC,UAC5D,OAAmB,OAAOnzC,EAAQ6B,IAAI6qE,WAAa1sE,EAAQ6B,IAAIsxC,UAC/D,OAAkB,OAAOnzC,EAAQ,GAAKA,EAAQiC,GAAGkxC,UACjD,OAAmB,OAAOnzC,EAAQ,GAAKA,EAAQkC,IAAIixC,UACnD,QAAoB,OAAuB,KAAP,EAARnzC,GAE9B,MAIF,KAAKuwD,EAAApiC,aAAa+lB,KAChB,IAAIy4B,OAAQ,EACRpmC,EAASgqB,EAAAvZ,aAAa1R,GAC1B,OAAQirB,EAAA1Z,aAAavR,IACnB,KAAK,EAAMqnC,EAAWpmC,EAASn6B,EAAAkH,KAAK1R,GAAMwK,EAAAkH,KAAKrR,GAAK,MACpD,KAAK,EAAM0qE,EAAWpmC,EAASn6B,EAAAkH,KAAKzR,IAAMuK,EAAAkH,KAAKpR,IAAK,MACpD,QAAWyqE,EAAWpmC,EAASn6B,EAAAkH,KAAKxR,IAAMsK,EAAAkH,KAAKnR,IAEjD,OAAO8nE,EAAsB0C,EAAUhvD,GAMzC,KAAK4yC,EAAApiC,aAAa8uB,MAChB,IAAKsT,EAAA9Y,aAAanS,GAAO,CACvB,IAAIgF,EAAOxhC,OAAOynD,EAAA5Y,mBAAmBrS,IACjCsnC,EAAOrc,EAAA1Y,cAAcvS,EAAMgF,EAAO,GACtC,OAAO5rC,KAAKqrE,YAAY6C,EAAMjvD,GAEhC,MAIF,KAAK4yC,EAAApiC,aAAakvB,GAChB,OAAO3+C,KAAKqrE,YAAYxZ,EAAAtY,UAAU3S,GAAO3nB,IAClCjf,KAAKqrE,YAAYjhE,OAAOynD,EAAApY,WAAW7S,IAAQ3nB,GAIpD,KAAK4yC,EAAApiC,aAAauyB,OAChB,OAAOhiD,KAAKqrE,YAAYxZ,EAAA1X,cAAcvT,GAAO3nB,IACtCjf,KAAKqrE,YAAYxZ,EAAAxX,cAAczT,GAAO3nB,GAI/C,KAAK4yC,EAAApiC,aAAasvB,KAChB,IACIvtC,EADUxR,KAAK4nE,eAAepiD,QACJhU,gBAC1B28D,EAAe/jE,OAAOynD,EAAAhX,cAAcjU,IACxC,GAAIp1B,EAAgBgD,IAAI25D,GAAe,CACrC,IAAI5lD,EAAW/W,EAAgBtQ,IAAIitE,GACnC/jE,OAAOme,EAAS9R,MAAQm7C,EAAA9gD,YAAY6N,UACpC,IAAIysB,EAAwB7iB,EAAUtU,UAAUm3B,WAChD,OAAmB7iB,EAAU6B,KAAK9K,GAAE,IAC7BisD,EAAsBngC,EAAYnsB,GAE3C,OAAO,EAIT,KAAK4yC,EAAApiC,aAAa2uB,YAAa,OAAO,EAExC,OAAO,GAGT/zB,EAAApoB,UAAAyJ,SAAA,WAGE,IAFA,IAAI0iE,EAAS,EACTl6D,EAASlU,KAAKkU,OACXA,GACLA,EAASA,EAAOA,SACdk6D,EAEJ,MAAO,QAAUpuE,KAAKokE,eAAiB,KAAOgK,EAAO1iE,WAAa,KAEtE2e,EAl0BA,GAq0BA,SAASkhD,EAAsB0C,EAAgB/oB,GAC7C,OAAQ+oB,EAAS3uD,GAAE,IACZ2uD,EAASriC,KAAOsZ,EAAOtZ,MACvBqiC,EAAS3uD,GAAE,IAAsB4lC,EAAO5lC,GAAE,GAUnD,SAAS+uD,EAAoBznC,EAAqB0nC,GAChD,OAAQzc,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0lB,SAChBm5B,EAAKt5D,IAAI68C,EAAAva,iBAAiB1Q,IAC1B,MAEF,KAAKirB,EAAApiC,aAAa0vB,SAChBmvB,EAAKt5D,IAAI68C,EAAAta,iBAAiB3Q,IAG5B,QAASirB,EAAApT,SAAS7X,EAAM0nC,EAAMD,IA51BrB3uE,EAAA2qB,OA40Bb3qB,EAAA6uE,eAAA,SAA+B3nC,EAAqB0nC,GAElD,YAFkD,IAAAA,MAAA,IAAqBnnE,KACvE0qD,EAAApT,SAAS7X,EAAM0nC,EAAMD,GACdC,64BC9hCT,IAAAjO,EAAAlgE,EAAA,IASAsN,EAAAtN,EAAA,GAKA0xD,EAAA1xD,EAAA,GA4BAqN,EAAArN,EAAA,GAYAyxD,EAAAzxD,EAAA,GAwBA0N,EAAA1N,EAAA,IAOAyN,EAAAzN,EAAA,GAIAiiD,EAAAjiD,EAAA,GAKAwN,EAAAxN,EAAA,GA+DAuN,EAAAvN,EAAA,GAQA0J,EAAA1J,EAAA,GAWAquE,EAAA,oBAAAA,IAGExuE,KAAAqtB,OAAiB7f,EAAApE,OAAOsM,OAExB1V,KAAA2V,UAAiB,EAEjB3V,KAAAyuE,cAAqB,EAErBzuE,KAAA0uE,aAAoB,EAEpB1uE,KAAA2uE,aAAoB,EAEpB3uE,KAAA0qB,WAAkB,EAElB1qB,KAAA4uE,eAAsB,EAEtB5uE,KAAA4V,WAAkB,EAElB5V,KAAA6b,cAA2C,KAE3C7b,KAAA6uE,SAAQ,EAGR7uE,KAAA6V,kBAAyB,EAEzB7V,KAAA8V,gBAAuB,EA0BzB,OAvBE/U,OAAAC,eAAIwtE,EAAAvsE,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAKqtB,QAAU7f,EAAApE,OAAOqM,wCAI/B1U,OAAAC,eAAIwtE,EAAAvsE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAKqtB,QAAU7f,EAAApE,OAAOqM,OAAS/H,EAAAkH,KAAK49C,QAAU9kD,EAAAkH,KAAK69C,yCAI5D1xD,OAAAC,eAAIwtE,EAAAvsE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAKqtB,QAAU7f,EAAApE,OAAOqM,OAAS/H,EAAAkH,KAAK09C,QAAU5kD,EAAAkH,KAAK29C,yCAI5DxxD,OAAAC,eAAIwtE,EAAAvsE,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKqtB,QAAU7f,EAAApE,OAAOqM,OAASo8C,EAAAriC,WAAWnpB,IAAMwrD,EAAAriC,WAAWppB,qCAIpEooE,EAAAvsE,UAAAoT,WAAA,SAAWy5D,GACT,OAAoC,IAA5B9uE,KAAK6uE,SAAWC,IAE5BN,EApDA,GAAa9uE,EAAA8uE,UAuDb,SAAkBO,GAChBA,IAAA,eAGAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,yBAGAA,IAAA,yBAEAA,IAAA,8BAEAA,IAAA,kCAfF,CAAkBrvE,EAAAqvE,cAAArvE,EAAAqvE,YAAW,KAmB7B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,eAEAA,IAAA,eAEAA,IAAA,+BAEAA,IAAA,+BATF,CAAkBtvE,EAAAsvE,kBAAAtvE,EAAAsvE,gBAAe,KAajC,IA+hRIC,EACAC,EAhiRJC,EAAA,SAAAl+D,GA2CE,SAAAk+D,EAAY3pD,EAAkB9Q,QAAA,IAAAA,MAAA,MAA9B,IAAAxD,EACED,EAAAzQ,KAAAR,KAAMwlB,EAAQzY,cAAY/M,KA/B5BkR,EAAAk+D,uBAAqC,GAErCl+D,EAAAm+D,YAA2B,KAE3Bn+D,EAAAo+D,YAAoB5hE,EAAAkH,KAAKG,KAMzB7D,EAAAq+D,eAAkC,GAElCr+D,EAAAs+D,eAA4C,IAAIpoE,IAEhD8J,EAAAu+D,cAA0B,CAAE,QAE5Bv+D,EAAAw+D,QAAqB,EAErBx+D,EAAAy+D,QAAuB,EAEvBz+D,EAAA0+D,gBAAe,EAEf1+D,EAAA2+D,oBAA0C,IAAI1oE,IAywFtC+J,EAAA4+D,eAAkC,KAClC5+D,EAAA6+D,eAAkC,KAClC7+D,EAAA8+D,eAAkC,KAClC9+D,EAAA++D,eAAkC,KAlwFxC/+D,EAAKsU,QAAUA,EACftU,EAAKmB,SAAWmT,EAAQnT,SACnBqC,IAASA,EAAU,IAAI85D,GAC5Bt9D,EAAKwD,QAAUA,EACfxD,EAAKoa,aAAe/V,QAGlBo1D,IAAIj2D,EAAQkB,WAAY,IAE1B1E,EAAKvR,OAASkyD,EAAAvtB,OAAO3iC,SACrB,IAAImwC,EAAqC,SACrC5gC,EAAKwD,QAAQW,WAAU,MAAmBy8B,GAAgB+f,EAAA3hC,aAAaggD,SACvEh/D,EAAKwD,QAAQW,WAAU,KAA0By8B,GAAgB+f,EAAA3hC,aAAaigD,gBAE9Ej/D,EAAKwD,QAAQW,WAAU,KAAgBy8B,GAAgB+f,EAAA3hC,aAAakgD,SACpEl/D,EAAKwD,QAAQW,WAAU,KAAuBy8B,GAAgB+f,EAAA3hC,aAAamgD,YAC3En/D,EAAKwD,QAAQW,WAAU,KAA0By8B,GAAgB+f,EAAA3hC,aAAaogD,SAElFp/D,EAAKvR,OAAOkyC,YAAYC,KAu6Q5B,OAt+Q8Bv/B,EAAA48D,EAAAl+D,GAsCrBk+D,EAAAoB,QAAP,SAAe/qD,EAAkB9Q,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIy6D,EAAS3pD,EAAS9Q,GAAS67D,WA4BxCpB,EAAAltE,UAAAsuE,QAAA,uBACM77D,EAAU1U,KAAK0U,QACf/U,EAASK,KAAKL,OACd6lB,EAAUxlB,KAAKwlB,QAGnBA,EAAQ/Q,WAAWC,GAGnB,IAAI87D,EAAwBhrD,EAAQxR,mBAAmB,QAAS,IAAItG,EAAA0Y,UAAU,GAAI1Y,EAAAkH,KAAKG,OACvFy7D,EAAsBp+D,aAAe,QACrC,IAAIq+D,EAAoB,IAAIxpE,MAC5BjH,KAAK0wE,YAAcF,EAAsBpmD,KACzCpqB,KAAK2wE,YAAcF,EAGf/7D,EAAQc,UACV7V,EAAOstC,UAAUozB,EAAA2E,eAAe4L,UAAW/e,EAAAriC,WAAWnpB,KAAK,EAAM1G,EAAO0D,IAAI,IAC5E1D,EAAOstC,UAAUozB,EAAA2E,eAAe6L,UAAWhf,EAAAriC,WAAWnpB,KAAK,EAAM1G,EAAO0D,IAAI,MAE5E1D,EAAOstC,UAAUozB,EAAA2E,eAAe4L,UAAW/e,EAAAriC,WAAWppB,KAAK,EAAMzG,EAAOyD,IAAI,IAC5EzD,EAAOstC,UAAUozB,EAAA2E,eAAe6L,UAAWhf,EAAAriC,WAAWppB,KAAK,EAAMzG,EAAOyD,IAAI,KAI9E,IAAI0tE,EAAQtrD,EAAQnU,gBACpB,IAAiB,IAAA+M,EAAArG,EAAA+4D,EAAMvzD,UAAQc,EAAAD,EAAAnG,QAAAoG,EAAAnG,KAAAmG,EAAAD,EAAAnG,OAAE,EAAxB5B,EAAIgI,EAAA/c,OACFqK,OAAO8R,UACdzd,KAAK+wE,YAAY16D,GACjBrW,KAAKgxE,eAAe36D,sGAKxB,IAAI46D,GAAgBR,EAAkBtkE,OAClCyiE,EAAgBl6D,EAAQk6D,cAC5B,IAAKqC,GAAgBrC,EAAe,CAClC,IAAI36D,EAAYu8D,EAAsBv8D,WACjCg9D,GAAgBrC,IACnBjvE,EAAOstC,UAAUozB,EAAA2E,eAAekM,QAASrf,EAAAriC,WAAWppB,KAAK,EAAMzG,EAAOyD,IAAI,IAC1EqtE,EAAkBU,QAChBxxE,EAAOyqC,GACLzqC,EAAO+nC,WAAW24B,EAAA2E,eAAekM,QAASrf,EAAAriC,WAAWppB,KACrDzG,EAAO+qC,SACP/qC,EAAO2pC,WAAW+2B,EAAA2E,eAAekM,QAASvxE,EAAOyD,IAAI,OAI3D,IAAIguE,EAAUzxE,EAAO2tC,YACnBkjC,EAAsBp+D,aACtBpS,KAAKqxE,mBACHp9D,EAAU+V,eACV/V,EAAUm3B,WACVn3B,EAAU8V,UAEZrc,EAAAmmD,mBAAmB2c,EAAsB5nD,kBACzCjpB,EAAO6pC,MAAM,KAAMinC,IAErBD,EAAsB/lD,SAAS9qB,EAAQyxE,GAClCxC,EACAjvE,EAAOouC,kBAAkByiC,EAAsBp+D,aAAc,WAD9CzS,EAAOixC,SAASwgC,GAKd,EAApBpxE,KAAK4vE,iBAAgDvP,EAAAiR,oBAAoBtxE,MACrD,EAApBA,KAAK4vE,iBAAgDvP,EAAAkR,oBAAoBvxE,MAC7EL,EAAOytC,aAAaizB,EAAA2E,eAAe6L,WACX,EAApB7wE,KAAK4vE,iBAAwCvP,EAAAmR,YAAYxxE,MAG7D,IAAIsrB,EAAetrB,KAAKsrB,aACxBA,EAAemmD,UAAUnmD,EAAc5W,EAAQI,UAAUo9C,UACzDlyD,KAAKsrB,aAAeA,EACpB3rB,EAAOytC,aAAaizB,EAAA2E,eAAe4L,WACX,EAApB5wE,KAAK4vE,kBACHl7D,EAAQc,SACV7V,EAAOstC,UACLozB,EAAA2E,eAAe4L,UACf/e,EAAAriC,WAAWnpB,KACX,EACA1G,EAAO0D,IAAI6sC,QAAQ5kB,GAAe6kB,SAAS7kB,KAG7C3rB,EAAOstC,UACLozB,EAAA2E,eAAe4L,UACf/e,EAAAriC,WAAWppB,KACX,EACAzG,EAAOyD,IAAI8sC,QAAQ5kB,MAMzB,IAAIomD,EAAiBh9D,EAAQW,WAAU,KAAqBX,EAAQg6D,aAAe,EACnF/uE,EAAO+vC,UACL1vC,KAAK0U,QAAQkB,YAAiC5V,KAAKuvE,eAAepjE,OAC9D+jC,QAAQyhC,UAAUF,UAAUnmD,EAAc,OAAU/V,QAAQ,GAAI,KAChE,EACJm8D,EAAiBh9D,EAAQg6D,aAAe7c,EAAAvtB,OAAOwS,iBAC/C92C,KAAKuvE,eACL76D,EAAQ2Y,OACR,SACAqkD,GAIEh9D,EAAQ+5D,cAAc9uE,EAAOyvC,gBAAgB,IAAK,MAAO,SAAUsiC,GAGvE,IAAIjC,EAAgBzvE,KAAKyvE,cACzB9vE,EAAO8wC,iBAAiBg/B,EAActjE,OAAQ,WAAYsjE,GAC1D9vE,EAAO2tC,YAAY,OAAQttC,KAAKqxE,mBAAmB,KAAM3jE,EAAAkH,KAAKG,MAAO,KAAMpV,EAAO6pC,MAAM,KAAM,KAG1F90B,EAAQi6D,aAAahvE,EAAOuvC,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAAnwB,EAAAhH,EAAA/X,KAAKwlB,QAAQnU,YAAYkM,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAE,CAA/C,IAAI5B,KAAI2I,EAAA1d,OACFqK,OAAO8R,SAASzd,KAAK4xE,oBAAoBv7D,qGAEpD,OAAO1W,GAIDwvE,EAAAltE,UAAA2vE,oBAAR,SAA4Bv7D,WACtByI,EAAUzI,EAAK3W,QACnB,GAAIof,MAAS,IAA2B,IAAA+yD,EAAA95D,EAAA+G,GAAOgzD,EAAAD,EAAA55D,QAAA65D,EAAA55D,KAAA45D,EAAAD,EAAA55D,OAAA,CAAzB,IAAAyO,EAAAtO,EAAA05D,EAAAxwE,MAAA,GAACV,EAAA8lB,EAAA,GAAMpI,EAAAoI,EAAA,GAAoB1mB,KAAK+xE,mBAAmBnxE,EAAM0d,qGAC/E,IAAIjG,EAAchC,EAAKgC,YACvB,GAAIA,EACF,IAAK,IAAIhY,EAAI,EAAG+V,EAAIiC,EAAYlM,OAAQ9L,EAAI+V,IAAK/V,EAAGL,KAAK4xE,oBAAoBv5D,EAAYhY,KAKrF8uE,EAAAltE,UAAA8vE,mBAAR,SAA2BnxE,EAAcgY,EAAkBo5D,uBACzD,YADyD,IAAAA,MAAA,IACjDp5D,EAAQnC,MAGd,KAAKm7C,EAAA9gD,YAAYkN,mBAEf,GADI8J,EAAgClP,EAASkP,cAE3C,IAAqB,IAAA/I,EAAAhH,EAAA+P,EAAUvK,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAE,CAApC,IAAIsQ,EAAQvJ,EAAA1d,MACX6sE,EAAevtE,EACnB,GAAI2nB,EAASjJ,GAAG9R,EAAAnL,YAAY8S,SAE1Bg5D,IADI8D,EAAW1pD,EAASnW,cACC3F,UAAUwlE,EAASjiB,YAAY,MAE1DhwD,KAAK+xE,mBAAmB5D,EAAc5lD,EAAUypD,qGAGpD,MAEF,KAAKpgB,EAAA9gD,YAAYuJ,gBACf,IAAIyN,EACJ,GADIA,EAA6BlP,EAASkP,cAExC,IAAqB,IAAA3P,EAAAJ,EAAA+P,EAAUvK,UAAQpE,EAAAhB,EAAAF,QAAAkB,EAAAjB,KAAAiB,EAAAhB,EAAAF,OAAE,CAApC,IAGGg6D,EAHC1pD,EAAQpP,EAAA7X,MACX6sE,EAAevtE,EACnB,GAAI2nB,EAASjJ,GAAG9R,EAAAnL,YAAY8S,SAE1Bg5D,IADI8D,EAAW1pD,EAASnW,cACC3F,UAAUwlE,EAASjiB,YAAY,MAE1DhwD,KAAK+xE,mBAAmB5D,EAAc5lD,EAAUypD,qGAGpD,MAEF,KAAKpgB,EAAA9gD,YAAYyN,mBACf,IAAI1d,EAA6B+X,EAAS4F,gBACtC0zD,EAA6Bt5D,EAAS6F,gBACtC5d,GAAQb,KAAK+xE,mBAAmBvkE,EAAAhL,cAAgB5B,EAAMC,EAAQmxE,GAC9DE,GAAQlyE,KAAK+xE,mBAAmBvkE,EAAA/K,cAAgB7B,EAAMsxE,EAAQF,GAClE,MAIF,KAAKpgB,EAAA9gD,YAAYmQ,OACDrI,EAAQ0G,GAAG9R,EAAAnL,YAAYod,QAAU7G,EAAQ0G,GAAG9R,EAAAnL,YAAY6f,OAAS1U,EAAAnL,YAAY+f,WAC1EpiB,KAAK0U,QAAQW,WAAU,GAMtCrV,KAAKL,OAAO6uC,gBAAgB51B,EAAQxG,aAAc4/D,EAASpxE,GAL3DZ,KAAKqN,MACHI,EAAAhD,eAAe0nE,+BACNv5D,EAAS4C,eAAezQ,OAKrC,MAEF,KAAK6mD,EAAA9gD,YAAY0W,UACE5O,EAAS6O,aAAgBznB,KAAK0U,QAAQW,WAAU,GAM/DrV,KAAKL,OAAO6uC,gBAAgB51B,EAAQxG,aAAc4/D,EAASpxE,GAL3DZ,KAAKqN,MACHI,EAAAhD,eAAe0nE,+BACHv5D,EAAS4C,eAAezQ,OAKxC,MAEF,KAAK6mD,EAAA9gD,YAAY6N,SACf,IACI1K,GADAsU,EAAqB3P,GACA3E,UACrBA,EAAUkgD,mBAAqBlgD,EAAU+V,eAAe7d,SAE1Doc,EAAWvoB,KAAKoyE,iBAAiB7pD,GACjCvoB,KAAKqyE,iBAEH9pD,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAKL,OAAOouC,kBAAkBxlB,EAASnW,aAAc4/D,EAASpxE,GACrG,MAEF,KAAKgxD,EAAA9gD,YAAY4N,UACX7d,EAAoB+X,EAAS6S,iBACrBzrB,KAAK+xE,mBAAmBvkE,EAAAhL,cAAgB5B,EAAMC,EAAQmxE,IAC9DE,EAAoBt5D,EAAS8S,iBACrB1rB,KAAK+xE,mBAAmBvkE,EAAA/K,cAAgB7B,EAAMsxE,EAAQF,GAClE,MAEF,KAAKpgB,EAAA9gD,YAAY8N,MACf5e,KAAKuyE,wBAAwBP,EAASxkE,EAAAhL,cAAgB5B,EAAagY,GAC9DA,EAAQ0G,GAAG9R,EAAAnL,YAAY+f,WAC1BpiB,KAAKwyE,wBAAwBR,EAASxkE,EAAA/K,cAAgB7B,EAAagY,GAErE,MAEF,KAAKg5C,EAAA9gD,YAAY+N,MAEf,IAAajG,EAASqG,KAAKwzD,YAAa,CACtC,IAAI9yE,EAASK,KAAKL,OACdyS,EAAuBwG,EAASxG,aACpCzS,EAAOstC,UAAU76B,EAAcy/C,EAAAriC,WAAWppB,KAAK,EAAOzG,EAAOyD,IAAYwV,EAAS9F,KAClFnT,EAAO6uC,gBAAgBp8B,EAAc4/D,EAASpxE,GAEhD,MAIF,KAAKgxD,EAAA9gD,YAAYkW,KACjB,KAAK4qC,EAAA9gD,YAAYiW,UACjB,KAAK6qC,EAAA9gD,YAAY4U,KACjB,KAAKksC,EAAA9gD,YAAY8V,eAAgB,MAEjC,QAASxc,QAAO,GAIlB,IAAI0U,EAAUlG,EAAQkG,QACtB,GAAIA,EAAS,CACX,IAAI4zD,EAAYV,EAASpxE,GAAQgY,EAAQnC,MAAQm7C,EAAA9gD,YAAY+N,MACzDrR,EAAA9K,mBACA8K,EAAA7K,kBAEJ,GACEiW,EAAQnC,MAAQm7C,EAAA9gD,YAAYiW,WAC5BnO,EAAQnC,MAAQm7C,EAAA9gD,YAAY4U,SAE5B,IAAmB,IAAAnM,EAAAxB,EAAA+G,EAAQvB,UAAQvB,EAAAzC,EAAAtB,QAAA+D,EAAA9D,KAAA8D,EAAAzC,EAAAtB,OAAE,EAA5BqG,EAAMtC,EAAA1a,OACDge,GAAG9R,EAAAnL,YAAY6S,SAC3BlV,KAAK+xE,mBAAmBzzD,EAAO1d,KAAM0d,EAAQo0D,8GAG/C,IAAmB,IAAAp1D,EAAAvF,EAAA+G,EAAQvB,UAAQC,EAAAF,EAAArF,QAAAuF,EAAAtF,KAAAsF,EAAAF,EAAArF,OAAE,CAAhC,IAAIqG,KAAMd,EAAAlc,OACFge,GAAG9R,EAAAnL,YAAYq0D,UAC1B12D,KAAK+xE,mBAAmBzzD,EAAO1d,KAAM0d,EAAQo0D,wGAO7CvD,EAAAltE,UAAAswE,wBAAR,SAAgC3xE,EAAc+sB,GAC5C,IAAIhuB,EAASK,KAAKL,OACdsf,EAAO0O,EAAM1O,KACbnK,EAAY9U,KAAK0U,QAAQI,UACzB69D,EAAWhzE,EAAOioC,KAAK3oB,EAAKizC,SAAUjzC,EAAKK,GAAE,GAC/C3f,EAAO2nC,UAAU,EAAGxyB,EAAU2+C,gBAC9Bx0C,EAAKw0C,eAAgB9lC,EAAMrC,cAGzBrM,EAAK2zD,YAAWD,EAAW3yE,KAAK6yE,WAAWF,IAC/ChzE,EAAO2tC,YACL1sC,EACAZ,KAAKqxE,mBAAmB,KAAMpyD,EAAMnK,GACpC,KACA69D,GAEFhzE,EAAOouC,kBAAkBntC,EAAMA,IAIzBuuE,EAAAltE,UAAAuwE,wBAAR,SAAgC5xE,EAAc+sB,GAC5C,IAAIhuB,EAASK,KAAKL,OACdsf,EAAO0O,EAAM1O,KACb6zD,EAAa7zD,EAAKw0C,eAClB3+C,EAAY9U,KAAK0U,QAAQI,UACzBi+D,EAAiBj+D,EAAU2+C,eAC3Buf,EAAYrzE,EAAO2nC,UAAU,EAAGwrC,GAChC7zD,EAAK2zD,YACPI,EAAYhzE,KAAKizE,kBACftzE,EAAOioC,KAAK3oB,EAAKizC,UAAU,EACzBvyD,EAAO2nC,UAAU,EAAGyrC,GACpBD,EAAYnlD,EAAMrC,cAEpB0nD,IAGJrzE,EAAO2tC,YACL1sC,EACAZ,KAAKqxE,mBAAmB,CAAEpyD,GAAQvR,EAAAkH,KAAKG,KAAMD,GAC7C,KACAnV,EAAO6mC,MACLvnB,EAAKizC,SACLvyD,EAAO2nC,UAAU,EAAGyrC,GACpBC,EACAF,EACAnlD,EAAMrC,eAGV3rB,EAAOouC,kBAAkBntC,EAAMA,IAMjCuuE,EAAAltE,UAAAixE,eAAA,SAAet6D,EAAkBu6D,GAC/B,YAD+B,IAAAA,OAAA,GACvBv6D,EAAQnC,MACd,KAAKm7C,EAAA9gD,YAAYmQ,OACfjhB,KAAKozE,cAAsBx6D,GAC3B,MAEF,KAAKg5C,EAAA9gD,YAAYkW,KACfhnB,KAAKqzE,YAAkBz6D,GACvB,MAEF,KAAKg5C,EAAA9gD,YAAYkN,mBACVpF,EAAQ0G,GAAG9R,EAAAnL,YAAY8S,UAC1BnV,KAAKszE,kCAAqD16D,EAAS,IAErE,MAEF,KAAKg5C,EAAA9gD,YAAYuJ,gBACVzB,EAAQ0G,GAAG9R,EAAAnL,YAAY8S,UAC1BnV,KAAKuzE,+BAA+C36D,EAAS,IAE/D,MAEF,KAAKg5C,EAAA9gD,YAAYyN,mBACf,IAAIC,EAAsC5F,EAAS4F,gBAC/CA,GACFxe,KAAKszE,kCAAkC90D,EAAiB,IAE1D,IAAIC,EAAsC7F,EAAS6F,gBAC/CA,GACFze,KAAKszE,kCAAkC70D,EAAiB,IAE1D,MAEF,KAAKmzC,EAAA9gD,YAAYiW,UACjB,KAAK6qC,EAAA9gD,YAAY8V,eACjB,KAAKgrC,EAAA9gD,YAAY0W,UAAW,MAC5B,QAASpd,QAAO,EAAOwnD,EAAA9gD,YAAY8H,EAAQnC,OAEzC08D,GAAgBnzE,KAAKmzE,eAAev6D,IAI1Cu2D,EAAAltE,UAAAkxE,eAAA,SAAev6D,WACTkG,EAAUlG,EAAQkG,QACtB,GAAIA,MAAS,IAAoB,IAAA4H,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAA,CAA/B,IAAIu7D,EAAOp1D,EAAA9c,MAAsBtB,KAAKkzE,eAAeM,uGAIzErE,EAAAltE,UAAA+uE,eAAA,SAAe36D,eACT3W,EAAU2W,EAAK3W,QACnB,GAAIA,MAAS,IAAoB,IAAA0e,EAAArG,EAAArY,EAAQ6d,UAAQc,EAAAD,EAAAnG,QAAAoG,EAAAnG,KAAAmG,EAAAD,EAAAnG,OAAA,CAA/B,IAAIW,EAAOyF,EAAA/c,MAAsBtB,KAAKkzE,eAAet6D,qGACvE,IAAIP,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAAo7D,EAAA17D,EAAAM,GAAWq7D,EAAAD,EAAAx7D,QAAAy7D,EAAAx7D,KAAAw7D,EAAAD,EAAAx7D,OAAE,CAA/B,IAAIK,EAAUo7D,EAAApyE,MACjBtB,KAAK+wE,YAAYz4D,GACjBtY,KAAKgxE,eAAe14D,uGAQ1B62D,EAAAltE,UAAA0xE,kBAAA,SAAkBC,EAAwC7N,GACxD,IAAI1vD,EAEAw9D,EADAxiE,EAAcrR,KAAKwlB,QAAQnU,YAE/B,GAAIA,EAAYmD,IAAIo/D,GAClBv9D,EAAOhF,EAAYnQ,IAAI0yE,OAClB,KAAIviE,EAAYmD,IAAIq/D,EAAgBD,EAAiCpmE,EAAAzK,cAO1E,YAJA/C,KAAKqN,MACHI,EAAAhD,eAAeiO,iBACfqtD,EAAWh7D,MAAO6oE,GAJpBv9D,EAAOhF,EAAYnQ,IAAI2yE,GAQzB7zE,KAAK+wE,YAAY16D,IAInB84D,EAAAltE,UAAA8uE,YAAA,SAAY16D,GACV,IAAIA,EAAKiJ,GAAG9R,EAAAnL,YAAYiwE,UAAxB,CACAj8D,EAAKlE,IAAI3E,EAAAnL,YAAYiwE,UAGrB,IAAInsD,EAAgB9P,EAAK8P,cACrB2tD,EAAe9zE,KAAK2wE,YACpBF,EAAoB,IAAIxpE,MAC5BjH,KAAK2wE,YAAcF,EAGnB,IAAIsD,EAAe/zE,KAAK0wE,YACpBtmD,EAAOjE,EAAciE,KACzBpqB,KAAK0wE,YAActmD,EACnB,IAAK,IAAI9T,EAAaD,EAAK1K,OAAO2K,WAAYjW,EAAI,EAAG+V,EAAIE,EAAWnK,OAAQ9L,EAAI+V,IAAK/V,EACnFL,KAAKg0E,yBAAyB19D,EAAWjW,GAAIowE,GAO/C,GALAzwE,KAAKi0E,mBAAmB7pD,EAAMqmD,GAC9BzwE,KAAK0wE,YAAcqD,EACnB/zE,KAAK2wE,YAAcmD,EAGfrD,EAAkBtkE,OAAQ,CAC5B,IAAIxM,EAASK,KAAKL,OACd6qB,EAASrE,EAAcwC,cACvBurD,EAAY1pD,EAAOre,OACnBohC,EAAW,IAAItmC,MAAkBitE,GACrC,IAAS7zE,EAAI,EAAGA,EAAI6zE,IAAa7zE,EAAGktC,EAASltC,GAAKmqB,EAAOnqB,GAAG4e,KAAKw0C,eACjE9zD,EAAO2tC,YACLnnB,EAAc/T,aACdpS,KAAKqxE,mBAAmBlrD,EAAclS,UAAU+V,eAAgB7D,EAAclS,UAAUm3B,YACxFmC,EACAkjC,EAAkBtkE,OAAS,EACvBxM,EAAO6pC,MAAM,KAAMinC,GACnBA,EAAkB,IAExBqD,EAAapnE,KACX/M,EAAOa,KAAK2lB,EAAc/T,aAAc,KAAMy/C,EAAAriC,WAAWyY,UAO/DknC,EAAAltE,UAAAmxE,cAAA,SAAc7zD,GACZ,GAAIA,EAAOD,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,EAC5C/yD,EAAOpN,IAAI3E,EAAAnL,YAAYiwE,UAEvB,IAAI3yE,EAASK,KAAKL,OACdw0E,EAA0B,EAC1BC,GAA+B,EAC/BlT,EAAW3hD,EAAO2hD,SAClBmT,EAAkB90D,EAAO80D,gBAE7B,IAAK90D,EAAOD,GAAG9R,EAAAnL,YAAY6jB,UAGzB,GAAIg7C,EAAU,CACZ,IAAIgC,EAAeljE,KAAKqS,SAASmuD,YAAYU,EAAU3hD,EAAOrL,QAC9D,IAAKgvD,EAAc,OAAO,EAC1B,GAAIA,GAAgBx1D,EAAAkH,KAAKG,KAKvB,OAJA/U,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfE,EAASn2D,QAEJ,EAETwU,EAAOL,QAAQgkD,OAGV,KAAImR,EAyBT,OAJAr0E,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfzhD,EAAO/D,eAAezQ,MAAM87D,QAEvB,EAxBP,IAAIkN,EAAe/zE,KAAK0wE,YASxB,GARInxD,EAAOlE,aAAau2C,EAAA7gD,eAAeuR,QACrCtiB,KAAK0wE,YAAcnxD,EAAOlJ,KAAK8P,cAAciE,MAE/C+pD,EAAWn0E,KAAKs0E,kBAAkBD,EAAiB3mE,EAAAkH,KAAK89C,KACtD,IAEE1yD,KAAK6vE,oBAAoBr7D,IAAI2/D,KAAWC,GAAyB,GACrEp0E,KAAK0wE,YAAcqD,EACf/zE,KAAKsvE,aAAe5hE,EAAAkH,KAAKG,KAK3B,OAJA/U,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfF,EAAgBtpE,MAAO/K,KAAKsvE,YAAY5jE,WAAY,WAE/C,EAET6T,EAAOL,QAAQlf,KAAKsvE,aAaxB,GAAI/vD,EAAOD,GAAG9R,EAAAnL,YAAY0iB,UAAYxF,EAAOlE,aAAau2C,EAAA7gD,eAAeqE,SAGvE,OAFImK,EAAOnN,cAAgBiuD,EAAA2E,eAAe4L,UAAW5wE,KAAK4vE,iBAAe,EAChErwD,EAAOnN,cAAgBiuD,EAAA2E,eAAe6L,YAAW7wE,KAAK4vE,iBAAe,IACvE,EAGT,IAAI3wD,EAAOM,EAAON,KACd6zD,EAAa7zD,EAAKw0C,eAClB+gB,EAAqBj1D,EAAOD,GAAG9R,EAAAnL,YAAYod,QAAUF,EAAOD,GAAG9R,EAAAnL,YAAY6f,OAAS1U,EAAAnL,YAAY+f,UAChGqyD,EAAmBl1D,EAAOlE,aAAau2C,EAAA7gD,eAAesR,QAG1D,GAAI9C,EAAOD,GAAG9R,EAAAnL,YAAY0iB,SAGxB,OAAIyvD,GAAsBx0E,KAAK0U,QAAQW,WAAU,IAC/CkK,EAAOpN,IAAI3E,EAAAnL,YAAYqyE,eACvBC,EAAiBp1D,EAAQA,EAAOhL,aAChC5U,EAAO4vC,gBACLhwB,EAAOnN,aACP68D,EACAC,EACA4D,GAEFvzD,EAAOpN,IAAI3E,EAAAnL,YAAYiwE,WAChB,IAIPtyE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9B,EAAOhL,YAAYxJ,QAGhB,GAKT,IAAI6pE,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAe/zE,KAAK0wE,YACpBnxD,EAAOlE,aAAau2C,EAAA7gD,eAAeuR,QACrCtiB,KAAK0wE,YAAcnxD,EAAOlJ,KAAK8P,cAAciE,MAE/C+pD,EAAWn0E,KAAKs0E,kBAAkBD,EAAiBp1D,EACjD,IAEEjf,KAAK6vE,oBAAoBr7D,IAAI2/D,KAAWC,GAAyB,GACrEp0E,KAAK0wE,YAAcqD,EAarB,GAVIliB,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,QACxC2/B,GACFL,EAAWx0E,EAAO6yC,qBAAqB2hC,GACnCtiB,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,QAAO+/B,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACF50E,KAAKmN,QACHM,EAAAhD,eAAeoqE,gCACfR,EAAgBtpE,WAEb,CAGL,OAFAX,OAAOynD,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,OAClCgd,EAAA7a,kBAAkBm9B,IAE/B,KAAKtiB,EAAAriC,WAAWppB,IACdmZ,EAAO4H,kBAAiB,EACxB5H,EAAO8H,qBAAuB9R,QAAQs8C,EAAA5a,iBAAiBk9B,GAAW,GAClE,MAEF,KAAKtiB,EAAAriC,WAAWnpB,IACdkZ,EAAO4H,kBAAiB,EACxB5H,EAAO8H,qBAAuB9R,QAC5Bs8C,EAAA3a,oBAAoBi9B,GACpBtiB,EAAA1a,qBAAqBg9B,IAEvB,MAEF,KAAKtiB,EAAAriC,WAAW3oB,IACd0Y,EAAO4H,kBAAiB,EACxB5H,EAAOgI,mBAAqBsqC,EAAAza,iBAAiB+8B,GAC7C,MAEF,KAAKtiB,EAAAriC,WAAW1oB,IACdyY,EAAO4H,kBAAiB,EACxB5H,EAAOgI,mBAAqBsqC,EAAAxa,iBAAiB88B,GAC7C,MAEF,QAEE,OADA/pE,QAAO,IACA,EAGXmV,EAAOpN,IAAI3E,EAAAnL,YAAYilB,eAM3B6sD,EAAWl1D,EAAKy0C,aAAa/zD,GAG/B,IAAIyS,EAAemN,EAAOnN,aAiB1B,OAfIwiE,GACEH,GACFz0E,KAAKqN,MACHI,EAAAhD,eAAeqW,8BACf1W,OAAOuD,EAAA+jD,cAAc/jD,EAAAe,cAAc2T,OAAQ9C,EAAOu1D,iBAAiB/pE,MAAO,UAG9EpL,EAAOstC,UAAU76B,EAAc0gE,GAAY,EAAM7zD,EAAKy0C,aAAa/zD,IAC/Dsf,EAAK2zD,YAAcwB,IAAwBD,EAAWn0E,KAAK6yE,WAAWsB,IAC1En0E,KAAK2wE,YAAYjkE,KACf/M,EAAO2pC,WAAWl3B,EAAc+hE,KAExBM,GACV90E,EAAOstC,UAAU76B,EAAc0gE,GAAa0B,EAAoBL,IAE3D,GAKThF,EAAAltE,UAAAoxE,YAAA,SAAYz6D,WACV,GAAIA,EAAQ0G,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,EAC7C15D,EAAQzG,IAAI3E,EAAAnL,YAAYiwE,UAExB,IAAI3yE,EAASK,KAAKL,OAClBK,KAAKqvE,YAAcz2D,EACnB,IAAIm8D,EAAkC,KAClCC,GAAqB,EACrBC,EAAWr8D,EAAQ0G,GAAG9R,EAAAnL,YAAYod,QAAU7G,EAAQyC,aAAau2C,EAAA7gD,eAAesR,QAEpF,GAAIzJ,EAAQkG,YACV,IAAmB,IAAA4H,EAAA3O,EAAAa,EAAQkG,QAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAAxC,IAAIqG,EAAMF,EAAA9c,MACb,GAAIgd,EAAO7H,MAAQm7C,EAAA9gD,YAAY0W,UAA/B,CACA,IAAI0tD,GAAc,EACd13B,EAAiBl/B,EACjB62D,EAAY33B,EAAI23B,UACpB33B,EAAIrrC,IAAI3E,EAAAnL,YAAYiwE,UACpB,IAAIyB,EAAe/zE,KAAK0wE,YACpB93D,EAAQyC,aAAau2C,EAAA7gD,eAAeuR,QACtCtiB,KAAK0wE,YAAc93D,EAAQvC,KAAK8P,cAAciE,MAEhD,IAAI+pD,OAAQ,EACRgB,GACFhB,EAAWn0E,KAAKs0E,kBAAkBa,EAAWznE,EAAAkH,KAAKxR,IAAG,GAGjDyuD,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,QAC5Cs/B,EAAWx0E,EAAO6yC,qBAAqB2hC,GACnCtiB,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,QACxCj8B,EAAQ0G,GAAG9R,EAAAnL,YAAYod,QACzBzf,KAAKqN,MACHI,EAAAhD,eAAe2qE,0EACfD,EAAUpqE,OAGdmqE,GAAc,KAGQ,MAAjBH,EACTZ,EAAWx0E,EAAOyD,IAAI,IAElB4xE,GACFh1E,KAAKqN,MACHI,EAAAhD,eAAe4qE,kCACH/2D,EAAQ9C,eAAezQ,MAAM87D,OAG7CsN,EAAWx0E,EAAOmnC,OAAO+qB,EAAAz5B,SAASk9C,OAChC31E,EAAO+nC,WAAWqtC,EAAc3iE,aAAcy/C,EAAAriC,WAAWppB,KACzDzG,EAAOyD,IAAI,IAEb+wE,EAAWx0E,EAAO6yC,qBAAqB2hC,GACnCtiB,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,QACxCj8B,EAAQ0G,GAAG9R,EAAAnL,YAAYod,QACzBzf,KAAKqN,MACHI,EAAAhD,eAAe2qE,0EACf92D,EAAO/J,YAAYxJ,OAGvBmqE,GAAc,IAGlBl1E,KAAK0wE,YAAcqD,EACfmB,GACFv1E,EAAOstC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWppB,KAAK,EAAMzG,EAAOyD,IAAI,IACpEpD,KAAK2wE,YAAYjkE,KACf1M,KAAKu1E,qBAAqB/3B,EAAK22B,GAAU,IAE3Ca,GAAqB,IAEjBC,GACFz3B,EAAI99B,wBAAwBnK,QAAQs8C,EAAA5a,iBAAiBk9B,IAAYzmE,EAAAkH,KAAKxR,KAClEo6C,EAAIl+B,GAAG9R,EAAAnL,YAAY6b,gBACrBve,EAAOstC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWppB,KAAK,EAAO+tE,IAG5Dx0E,EAAOstC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWppB,KAAK,EAAO+tE,GAE5D32B,EAAI/1B,aAAc,EAClButD,GAAqB,GAEvBD,EAA2Bv3B,qGAI/B,OADAx9C,KAAKqvE,YAAc,MACZ,GAMTF,EAAAltE,UAAAqxE,kCAAA,SACErxE,EACAgqB,EACAxD,EACA25C,GAEA,QAHA,IAAA35C,MAA4C5e,EAAA23D,gBAC5C,IAAAY,MAAA,MAEIngE,EAAUoZ,aAAau2C,EAAA7gD,eAAeqE,SAAU,OAAO,KAC3D,IAAImT,EAAWvoB,KAAKqS,SAAS4yD,iCAC3BhjE,EACAgqB,EACAhqB,EAAUiS,OACVuU,EACA25C,GAAyBngE,EAAUsS,aAErC,OAAKgU,GACAvoB,KAAKw1E,gBAAgBjtD,GACnBA,EAFe,MAMxB4mD,EAAAltE,UAAAovE,mBAAA,SACErnD,EACAohB,EACArhB,QAAA,IAAAA,MAAA,MAEA,IACIub,EADAqvB,EAAgB3qC,EAAiBA,EAAe7d,OAAS,EAEzDyb,EAAQ,EAQZ,GAPImC,IACFub,EAAa,IAAIr+B,MAAM,EAAI0tD,IAChB,GAAK5qC,EAAS0pC,eACzB7rC,EAAQ,GAER0d,EAAa,IAAIr+B,MAAM0tD,GAErB3qC,EACF,IAAK,IAAI3pB,EAAI,EAAGA,EAAIs0D,IAAiBt0D,IAAKunB,EACxC0d,EAAW1d,GAASoC,EAAe3pB,GAAGozD,eAG1C,IAAIgiB,EAAarqC,EAAWqoB,eACxB9zD,EAASK,KAAKL,OACdkuC,EAAUluC,EAAOgmC,2BAA2B8vC,EAAYnwC,GAC5D,IAAKuI,EAAS,CACZ,IAAIjtC,EAAO8M,EAAA0Y,UAAU4uC,oBAAoBhrC,EAAgBohB,EAAYrhB,GACrE8jB,EAAUluC,EAAOylC,gBAAgBxkC,EAAM60E,EAAYnwC,GAErD,OAAOuI,GAITshC,EAAAltE,UAAAyzE,oBAAA,SAEEntD,EAEAotD,QAAA,IAAAA,MAAA,MAEA,IAAIh2E,EAASK,KAAKL,OACdi2E,EAAWxrE,OAAOme,EAAStmB,UAAU2zE,UACrCxqC,EAAa7iB,EAAStU,UAAUm3B,WAChChhB,EAAOpqB,KAAK0wE,YAGhB,GAAIkF,EAASn/D,MAAQ9I,EAAA+I,SAAS25C,MAC5BslB,EAAQ31E,KAAK61E,kBAAmCD,EAAUt/D,YAAY,EAAMq/D,OACvE,CAELvrE,OAAOwrE,EAASn/D,MAAQ9I,EAAA+I,SAASk6C,YAGjCxmD,OAAOme,EAAStmB,UAAUgmB,WAG1B7d,QAAQme,EAAS3G,MAAMpU,EAAAnL,YAAYugB,YAAcpV,EAAAnL,YAAYwf,IAAMrU,EAAAnL,YAAYyf,IAAMtU,EAAAnL,YAAYyzE,OAEjG,IAAIlvC,EAAO5mC,KAAKs0E,kBAAwCsB,EAAU5rC,WAAYoB,EAAU,GAKxF,GAFKuqC,EACAA,EAAMjpE,KAAKk6B,GADJ+uC,EAAQ,CAAE/uC,IAEjBxc,EAAK9K,GAAE,KAAwB,CAClC,IAAIy2D,EAAcJ,EAAMxpE,OACxBnM,KAAKg2E,oBAAoB5rD,EAAMurD,GAC/B31E,KAAKi0E,mBAAmB7pD,EAAMurD,GAC9B,IAAItK,EAAcjhD,EAAKihD,YAAYzkC,EAAMwE,GACrC6qC,EAAU7rD,EAAKwgD,UAAUhkC,EAAMwE,GACnC,GAAIuqC,EAAMxpE,OAAS4pE,EAAa,CAC9B,IAAIG,EAAO9rD,EAAK2+C,oBAAoB39B,GAC/BigC,GAAajhD,EAAKw+C,aAAasN,EAAKtuD,MAAO/Z,EAAAw5D,WAAWiE,SACvD2K,GAAS7rD,EAAKw+C,aAAasN,EAAKtuD,MAAO/Z,EAAAw5D,WAAW9C,SACtDoR,EAAMI,EAAc,GAAKp2E,EAAOypC,UAAU8sC,EAAKtuD,MAAOgf,GACtD+uC,EAAMjpE,KAAK/M,EAAO2nC,UAAU4uC,EAAKtuD,MAAOwjB,EAAWqoB,iBAEhD4X,GAAajhD,EAAKjY,IAAG,GACtB8jE,GAAS7rD,EAAKjY,IAAG,GACrBiY,EAAKjY,IAAI,MAKb,GAAIoW,EAASjJ,GAAG9R,EAAAnL,YAAYugB,aAAc,CACxC,IAAImwD,EAAiB/yE,KAAK0U,QAAQq+D,eAClC3oE,OAAOme,EAASjJ,GAAG9R,EAAAnL,YAAY4iB,WAC/B,IAAItS,EAAgBvI,OAAOme,EAASrU,QAEpC,GAF6C9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,QAEjFuL,EAAK9K,GAAE,KAAwB,CAClC,IAAIolD,EAAYt6D,OAAOggB,EAAKu6C,YAAYn3D,EAAAxK,cAAcoC,QAGjDglB,EAAK9K,GAAE,MAMVq2D,EAAMjpE,KACJ/M,EAAOyqC,GACLzqC,EAAO+mC,MAAMqsC,GAAkBlhB,EAAAriC,WAAWnpB,IAAMwrD,EAAA/+B,QAAQi4C,OAASlZ,EAAA/+B,QAAQg4C,OACvEnrE,EAAO2nC,UAAUo9B,EAAU98C,MAAOmrD,IAEpCpzE,EAAOypC,UAAUs7B,EAAU98C,MACzB5nB,KAAK6yE,WACH7yE,KAAKm2E,eAAsBxjE,OAKnC3S,KAAKo2E,wBAA+BzjE,EAAegjE,IAErD31E,KAAKg2E,oBAAoB5rD,EAAMurD,GAC/B31E,KAAKi0E,mBAAmB7pD,EAAMurD,GAC9BA,EAAMjpE,KAAK/M,EAAO2nC,UAAUo9B,EAAU98C,MAAO5nB,KAAK0U,QAAQq+D,iBAC1D3oD,EAAKjY,IAAI,KAICQ,EAAeuZ,OAAS9B,EAAK9K,GAAE,MACzCtf,KAAKqN,MACHI,EAAAhD,eAAe4rE,2DACf9tD,EAAStmB,UAAUsS,YAAYxJ,YAK1BqgC,GAAc19B,EAAAkH,KAAKG,MAASqV,EAAK9K,GAAE,MAC5Ctf,KAAKqN,MACHI,EAAAhD,eAAe6rE,+DACf/tD,EAAStmB,UAAU0jE,iBAAiBv6B,WAAWrgC,OAInD,OAAO4qE,GAITxG,EAAAltE,UAAAuzE,gBAAA,SAAgBjtD,GACd,GAAIA,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,EAC9CloE,SAASme,EAASjJ,GAAG9R,EAAAnL,YAAY0iB,UAAYwD,EAASlN,aAAau2C,EAAA7gD,eAAeqE,WAElF,IAAImhE,EAAev2E,KAAKsvE,YACxB/mD,EAASpW,IAAI3E,EAAAnL,YAAYiwE,UAEzB,IAKIlB,EALAzxE,EAASK,KAAKL,OACdsU,EAAYsU,EAAStU,UACrB2hE,EAAWrtD,EAAStmB,UAAU2zE,SAE9B/nC,EAAU7tC,KAAKqxE,mBAAmBp9D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAIhG,GAAI6rD,EAAU,CAWZ,GARIrtD,EAASjJ,GAAG9R,EAAAnL,YAAY0iB,UAC1B/kB,KAAKqN,MACHI,EAAAhD,eAAe+rE,yDACfjuD,EAAS/M,eAAezQ,OAKxBwd,EAASlN,aAAau2C,EAAA7gD,eAAeiU,UAAW,CAClD,IAAI8vD,EAAiBvsD,EAASusD,eAC1Br0D,EAAYrW,OAAOuD,EAAA+jD,cAAc/jD,EAAAe,cAAcsW,SAAU8vD,IAC7D90E,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfZ,EAAU1V,OAKd,IAAIgpE,EAAe/zE,KAAK0wE,YACpBtmD,EAAO7B,EAAS6B,KACpBpqB,KAAK0wE,YAActmD,EACnB,IAAIurD,EAAQ,IAAI1uE,MAGZ2gB,EAAQ,EACG3T,EAAU8V,YAGrBnC,EAGJ,IADA,IAAIoC,EAAiB/V,EAAU+V,eACtB3pB,EAAI,EAAG+V,EAAI4T,EAAe7d,OAAQ9L,EAAI+V,IAAK/V,IAAKunB,EAAO,CAC9D,IAAI3I,EAAO+K,EAAe3pB,GACtB4e,EAAK2zD,YACP+C,EAAMjpE,KACJ/M,EAAOoqC,KACL/pC,KAAK6yE,WACHlzE,EAAO2nC,UAAU1f,EAAO3I,EAAKw0C,mBAInCrpC,EAAKw+C,aAAahhD,EAAO/Z,EAAAw5D,WAAWwB,WAIxC7oE,KAAK01E,oBAAoBntD,EAAUotD,GAC9BvrD,EAAK9K,GAAE,OACVtf,KAAKg2E,oBAAoB5rD,EAAMurD,GAC/B31E,KAAKi0E,mBAAmB7pD,EAAMurD,IAEhC31E,KAAK0wE,YAAcqD,EAGnB3C,EAAUzxE,EAAO2tC,YACf/kB,EAASnW,aACTy7B,EACAngC,EAAAmmD,mBAAmBtrC,EAASK,kBAC5B6tD,EAAQ92E,EAAQg2E,EAAOptD,EAAStU,UAAUm3B,WAAWqoB,sBAKlDlrC,EAASjJ,GAAG9R,EAAAnL,YAAY0iB,UAC3B/kB,KAAKqN,MACHI,EAAAhD,eAAeisE,gFACfnuD,EAAS/M,eAAezQ,OAI5Bwd,EAASpW,IAAI3E,EAAAnL,YAAYqyE,eACzBC,EAAiBpsD,EAAUA,EAAShU,aAGpC68D,EAAUzxE,EAAOivC,kBACfrmB,EAASnW,aACT68D,EACAC,EACArhC,GAMJ,OAFAtlB,EAASkC,SAAS9qB,EAAQyxE,GAC1BpxE,KAAKsvE,YAAciH,GACZ,GAKTpH,EAAAltE,UAAAsxE,+BAAA,SACEtxE,EACAgqB,EACAxD,EACA25C,QADA,IAAA35C,MAA4C5e,EAAA23D,gBAC5C,IAAAY,MAAA,MAEA,IAAI75C,EAAWvoB,KAAKqS,SAASkvD,8BAC3Bt/D,EACAgqB,EACAhqB,EAAUiS,OACVuU,EACA25C,GAAyBngE,EAAUsS,aAEhCgU,GACLvoB,KAAK22E,aAAapuD,IAGpB4mD,EAAAltE,UAAA00E,aAAA,SAAapuD,eACX,GAAIA,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,EAC9C/pD,EAASpW,IAAI3E,EAAAnL,YAAYiwE,UACzB,IACIsE,EADYruD,EAAStmB,UACuB6c,QAChD,GAAI83D,MACF,IAAoB,IAAAx4D,EAAArG,EAAA6+D,EAAcr5D,UAAQc,EAAAD,EAAAnG,QAAAoG,EAAAnG,KAAAmG,EAAAD,EAAAnG,OAAE,CAC1C,QADOW,EAAOyF,EAAA/c,OACEmV,MACd,KAAKm7C,EAAA9gD,YAAYmQ,OACfjhB,KAAKozE,cAAsBx6D,GAC3B,MAEF,KAAKg5C,EAAA9gD,YAAYkN,mBAEQpF,EAAS0G,GAAG9R,EAAAnL,YAAY8S,UAE7CnV,KAAKszE,kCACgB16D,EACnB,GACA/O,EAAA23D,UACoB5oD,EAAS4C,gBAGjC,MAEF,KAAKo2C,EAAA9gD,YAAYyN,oBACX1d,EAA6B+X,EAAS4F,kBAExCxe,KAAKszE,kCACHzyE,EACA,GACAgJ,EAAA23D,UACA3gE,EAAO2a,iBAGP02D,EAA6Bt5D,EAAS6F,kBAExCze,KAAKszE,kCACHpB,EACA,GACAroE,EAAA23D,UACA0Q,EAAO12D,gBAGX,MAEF,KAAKo2C,EAAA9gD,YAAY4N,6GAKvB,IAAIwoD,EAAe3+C,EAAS8D,oBACxB66C,GAAclnE,KAAKw1E,gBAAgBtO,GACvC,IAAI/oD,EAAkBoK,EAASzJ,QAC/B,GAAIX,MACF,IAAoB,IAAAY,EAAAhH,EAAAoG,EAAgBZ,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAE,CAAzC,IAAIW,EACP,QADOA,EAAOoG,EAAA1d,OACEmV,MACd,KAAKm7C,EAAA9gD,YAAYkN,mBAEQpF,EAAS0G,GAAG9R,EAAAnL,YAAY8S,UAE7CnV,KAAKszE,kCACgB16D,EACnB,GACA/O,EAAA23D,QAAqBj5C,EAASE,yBACV7P,EAASrE,YAAY3T,MAG7C,MAEF,KAAKgxD,EAAA9gD,YAAYqa,gBACfvS,EAAQzG,IAAI3E,EAAAnL,YAAYiwE,UACxB,MAEF,KAAK1gB,EAAA9gD,YAAY4N,SACf,IAAI7d,EAEAqxE,GAFArxE,EAAoB+X,EAAS6S,iBACrBzrB,KAAKw1E,gBAAgB30E,IAC7BqxE,EAAoBt5D,EAAS8S,iBACrB1rB,KAAKw1E,gBAAgBtD,sGAMzC,OAAO,GAGT/C,EAAAltE,UAAA40E,4BAAA,SACEtiE,EACA0X,EACAxD,EACA25C,QADA,IAAA35C,MAAA,WACA,IAAA25C,MAAA,MAGApiE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9M,EAAYxJ,QAOhBokE,EAAAltE,UAAA60E,iBAAA,SAAiBrkE,EAAoBskE,QAAA,IAAAA,MAAA,GACnC,IAAIzrD,EAAemmD,UAAUzxE,KAAKsrB,aAAcyrD,GAC5C1yC,EAAUwtB,EAAAztB,cAAcziC,OAAO8Q,EAAQ6Y,GAG3C,OAFAtrB,KAAKuvE,eAAe7iE,KAAK23B,GACzBrkC,KAAKsrB,aAAeqzC,QAAQrzC,EAAc/V,QAAQ9C,EAAOtG,OAAQ,IAC1Dk4B,GAIT8qC,EAAAltE,UAAA+0E,mBAAA,SAAmBC,GACjB,IAGIC,EAHA1xD,EAAUxlB,KAAKwlB,QACf2xD,EAAe3xD,EAAQ4xD,kBACvBn9D,EAAiB7P,OAAOob,EAAQvL,gBAEhC41B,EAAW7vC,KAAKwvE,eACpB,GAAI3/B,EAASr7B,IAAIyiE,GACfC,EAAgBrnC,EAAS3uC,IAAI+1E,OACxB,CACL,IAAI9qE,EAAS8qE,EAAY9qE,OACrBsG,EAAS,IAAI5K,WAAWsvE,GAAgBhrE,GAAU,IACtDqZ,EAAQhT,mBAAmBC,EAAQ,EAAGwH,EAAgB9N,GAAU,GAChE,IAAK,IAAI9L,EAAI,EAAGA,EAAI8L,IAAU9L,EAC5BwJ,EAAAkkB,SAASkpD,EAAY1qE,WAAWlM,GAAIoS,EAAQ0kE,GAAgB92E,GAAK,IAEnE62E,EAAgBl3E,KAAK82E,iBAAiBrkE,GACtCo9B,EAAS19B,IAAI8kE,EAAaC,GAE5B,IAAIpuD,EAAM61C,QAAQuY,EAAcxkE,OAAQ6C,QAAQ4hE,IAEhD,OADAn3E,KAAKsvE,YAAcr1D,EAAegF,KAC9Bjf,KAAK0U,QAAQc,SACRxV,KAAKL,OAAO0D,IAAI6sC,QAAQpnB,GAAMqnB,SAASrnB,KAE9C1e,OAAOw5D,WAAW96C,IACX9oB,KAAKL,OAAOyD,IAAI8sC,QAAQpnB,MAInCqmD,EAAAltE,UAAAo1E,wBAAA,SAAwBC,EAAmB/5D,GACzC,IAAIiI,EAAUxlB,KAAKwlB,QACfrZ,EAASoR,EAAOpR,OAChB+lD,EAAWolB,EAAYplB,SACvBqlB,EAAaprE,EAAS+lD,EACtBslB,EAAiBptE,OAAOob,EAAQzL,qBAChCq9D,EAAoB5xD,EAAQ4xD,kBAE5BK,EAAM,IAAI5vE,WAAWuvE,EAAoBG,GAC7C/xD,EAAQhT,mBAAmBilE,EAAK,EAAGD,EAAgBD,GACnD,IAAIxnB,EAAMqnB,EACNtE,EAAawE,EAAY7jB,eAC7B,OAAQqf,GACN,KAAKjhB,EAAAriC,WAAWppB,IACd,OAAQ8rD,GACN,KAAK,EACH,IAAK,IAAI7xD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAAikB,QAAQ+jC,EAAA5a,iBAAiB31C,GAAQm2E,EAAK1nB,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS1vD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAAkkB,SAAS8jC,EAAA5a,iBAAiB31C,GAAQm2E,EAAK1nB,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS1vD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAAgJ,SAASg/C,EAAA5a,iBAAiB31C,GAAQm2E,EAAK1nB,GACvCA,GAAO,EAET,MAEF,QAAS3lD,QAAO,GAElB,MAEF,KAAKynD,EAAAriC,WAAWnpB,IACd,IAAShG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAA6tE,SAASniE,QAAQs8C,EAAA3a,oBAAoB51C,GAAQuwD,EAAA1a,qBAAqB71C,IAASm2E,EAAK1nB,GAChFA,GAAO,EAET,MAEF,KAAK8B,EAAAriC,WAAW3oB,IACd,IAASxG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAAmkB,SAAS6jC,EAAAza,iBAAiB91C,GAAQm2E,EAAK1nB,GACvCA,GAAO,EAET,MAEF,KAAK8B,EAAAriC,WAAW1oB,IACd,IAASzG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQic,EAAOld,GACnB+J,OAAOynD,EAAA7a,kBAAkB11C,IAAUwxE,GACnC1oE,OAAOynD,EAAA9a,gBAAgBz1C,IAAUuwD,EAAApiC,aAAaolB,OAC9ChrC,EAAAokB,SAAS4jC,EAAAxa,iBAAiB/1C,GAAQm2E,EAAK1nB,GACvCA,GAAO,EAET,MAEF,QAAS3lD,QAAO,GAIlB,OAFAA,OAAO2lD,GAAO0nB,EAAItrE,QAEXnM,KAAK82E,iBAAiBW,IAG/BtI,EAAAltE,UAAA01E,wBAAA,SAAwBL,EAAmBM,GACzC,IAAIpyD,EAAUxlB,KAAKwlB,QACf4xD,EAAoB5xD,EAAQ4xD,kBAC5B/6D,EAAiBjS,OAAOob,EAAQnJ,gBAChCw7D,EAAgBztE,OAAOpK,KAAKqS,SAAS0L,aAAa1B,EAAgB,CAAEi7D,KACpEQ,EAAoBD,EAAczrD,oBAClC2rD,EAAeH,EAAcnlE,OAAOtG,OAASirE,EAC7CY,EAAc50E,IAAI20E,EAAeT,EAAYplB,UAE7CulB,EAAM,IAAI5vE,WAAWuvE,EAAoBU,GAC7CtyD,EAAQhT,mBAAmBilE,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkB/nC,QAAQ0nC,EAAcllE,QAAU0kE,EAOtD,OANAhtE,QAAQob,EAAQ9Q,QAAQc,UACxBpL,OAAOytE,EAAcjqD,WAAW,OAAQqqD,EAAiBR,EAAKL,IAC9DhtE,OAAOytE,EAAcjqD,WAAW,YAAaqqD,EAAiBR,EAAKL,IACnEhtE,OAAOytE,EAAcjqD,WAAW,aAAcmqD,EAAcN,EAAKL,IACjEhtE,OAAOytE,EAAcjqD,WAAW,UAAWoqD,EAAaP,EAAKL,IAEtDp3E,KAAK82E,iBAAiBW,IAM/BtI,EAAAltE,UAAAi2E,yBAAA,SAAyBrnC,GAEvB,GADAzmC,OAAOymC,EAAKvxB,GAAG9R,EAAAnL,YAAYiwE,WACvBzhC,EAAK9nB,oBAAsB,EAC7B,OAAO8nB,EAAK9nB,mBAEd,IAAI0mD,EAAgBzvE,KAAKyvE,cACrB7nD,EAAQ6nD,EAActjE,OAO1B,OANK0kC,EAAKvxB,GAAG9R,EAAAnL,YAAY81E,aAAetnC,EAAK58B,UAAUkgD,mBAAqBtjB,EAAK58B,UAAU+V,eAAe7d,SAExG0kC,EAAO7wC,KAAKoyE,iBAAiBvhC,IAE/B4+B,EAAc/iE,KAAKmkC,EAAKz+B,cACxBy+B,EAAK9nB,mBAAqBnB,EACnBA,GAKTunD,EAAAltE,UAAA+xE,yBAAA,SAAyBx9D,EAAsBwR,GAI7C,OAHIxR,EAAUC,MAAQ9I,EAAA+I,SAASE,gBAC7BJ,EAAqCA,EAAWjC,aAE1CiC,EAAUC,MAChB,KAAK9I,EAAA+I,SAASQ,iBAEZ,IADA,IACS7W,EAAI,EAAG+V,GADZgiE,EAAsC5hE,EAAWsI,SAChB3S,OAAQ9L,EAAI+V,IAAK/V,EACpDL,KAAKg0E,yBAAyBoE,EAAiB/3E,GAAI2nB,GAErD,MAEF,KAAKra,EAAA+I,SAASU,gBACZ,IAAIwB,EAAU5Y,KAAKwlB,QAAQlR,wBAAyCkC,GACpEpM,OAAOwO,EAAQnC,MAAQm7C,EAAA9gD,YAAYkW,MAC9BpO,EAAQyC,aAAau2C,EAAA7gD,eAAeuR,OAAOtiB,KAAKqzE,YAAkBz6D,GACvE,MAEF,KAAKjL,EAAA+I,SAASgB,qBACZ,IAAI0gE,EACJ,IAAS/3E,EAAI,EAAG+V,GADZgiE,EAA0C5hE,EAAWsI,SACpB3S,OAAQ9L,EAAI+V,IAAK/V,EACpDL,KAAKg0E,yBAAyBoE,EAAiB/3E,GAAI2nB,GAErD,MAEF,KAAKra,EAAA+I,SAASM,SACZ,IAAI2N,EAAmCnO,EAAWmO,aAClD,IAAStkB,EAAI,EAAG+V,EAAIuO,EAAaxY,OAAQ9L,EAAI+V,IAAK/V,EAAG,CAC/CuY,EAAU5Y,KAAKwlB,QAAQlR,wBAAwBqQ,EAAatkB,IAChE+J,OAAOwO,EAAQnC,MAAQm7C,EAAA9gD,YAAYmQ,QAEhCrI,EAAQ0G,GAAG9R,EAAAnL,YAAY0iB,UACvBnM,EAAQyC,aAAau2C,EAAA7gD,eAAeuR,OACrCtiB,KAAKozE,cAAsBx6D,GAE/B,MAEF,KAAKjL,EAAA+I,SAAS+K,kBACR7I,EAAU5Y,KAAKwlB,QAAQlR,wBAA0CkC,IACzDC,MAAQm7C,EAAA9gD,YAAYmQ,SACzBrI,EAAQyC,aAAau2C,EAAA7gD,eAAeuR,OAAOtiB,KAAKozE,cAAsBx6D,IAE7E,MAEF,KAAKjL,EAAA+I,SAASxB,OACuC,MAA7BsB,EAAW5K,gBAC/B5L,KAAK2zE,kBACuBn9D,EAAW5K,eACM4K,EAAWgO,MAG1D,MAEF,KAAK7W,EAAA+I,SAASI,OACZ9W,KAAK2zE,kBACen9D,EAAW5K,eACX4K,EAAWgO,MAE/B,MAEF,KAAK7W,EAAA+I,SAASY,oBACd,KAAK3J,EAAA+I,SAASiL,kBACd,KAAKhU,EAAA+I,SAASc,qBACd,KAAK7J,EAAA+I,SAASuL,0BACd,KAAKtU,EAAA+I,SAASkB,gBAAiB,MAC/B,QACE,IAAIusC,EAAOnkD,KAAKq4E,iBAAiB7hE,GAC7Bq7C,EAAA9a,gBAAgBoN,IAAS0N,EAAApiC,aAAa0yB,KAAKn6B,EAAKtb,KAAKy3C,KAM/DgrB,EAAAltE,UAAAo2E,iBAAA,SACE7hE,EACA8hE,QAAA,IAAAA,OAAA,GAEA,IACIn0B,EADAxkD,EAASK,KAAKL,OAElB,OAAQ6W,EAAUC,MAChB,KAAK9I,EAAA+I,SAAS25C,MACZlM,EAAOnkD,KAAKu4E,sBAAsC/hE,GAClD,MAEF,KAAK7I,EAAA+I,SAAS45C,MACZnM,EAAOnkD,KAAKw4E,sBAAsChiE,GAClD,MAEF,KAAK7I,EAAA+I,SAAS65C,SACZpM,EAAOnkD,KAAKy4E,yBAA4CjiE,GACxD,MAEF,KAAK7I,EAAA+I,SAAS85C,GACZrM,EAAOnkD,KAAK04E,mBAAgCliE,GAC5C,MAEF,KAAK7I,EAAA+I,SAASzT,MACZkhD,EAAOnkD,KAAK24E,sBAAsCniE,GAClD,MAEF,KAAK7I,EAAA+I,SAASk6C,WACZzM,EAAOnkD,KAAK44E,2BAAgDpiE,GAC5D,MAEF,KAAK7I,EAAA+I,SAASm6C,IACZ1M,EAAOnkD,KAAK64E,oBAAkCriE,GAC9C,MAEF,KAAK7I,EAAA+I,SAASs6C,GACZ7M,EAAOnkD,KAAK84E,mBAAgCtiE,GAC5C,MAEF,KAAK7I,EAAA+I,SAASw6C,OACZ/M,EAAOnkD,KAAK+4E,uBAAwCviE,EAAW8hE,GAC/D,MAEF,KAAK3qE,EAAA+I,SAAS06C,OACZjN,EAAOnkD,KAAKg5E,uBAAwCxiE,GACpD,MAEF,KAAK7I,EAAA+I,SAAS26C,MACZlN,EAAOnkD,KAAKi5E,sBAAsCziE,GAClD,MAEF,KAAK7I,EAAA+I,SAAS46C,IACZnN,EAAOnkD,KAAKk5E,oBAAkC1iE,GAC9C,MAEF,KAAK7I,EAAA+I,SAASM,UACZmtC,EAAOnkD,KAAKm5E,yBAA4C3iE,MAC7C2tC,EAAOxkD,EAAO6qC,OACzB,MAEF,KAAK78B,EAAA+I,SAAS86C,KACZrN,EAAOnkD,KAAKo5E,qBAAoC5iE,GAChD,MAEF,KAAK7I,EAAA+I,SAAS+6C,MACZtN,EAAOnkD,KAAKq5E,sBAAsC7iE,GAClD,MAEF,KAAK7I,EAAA+I,SAASkB,gBAEZ5X,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf7K,EAAUzL,OAEZo5C,EAAOxkD,EAAO8rC,cACd,MAEF,QACErhC,QAAO,GACP+5C,EAAOxkD,EAAO8rC,cAIlB,OADIzrC,KAAK0U,QAAQgW,WAAW1qB,KAAKs5E,iBAAiBn1B,EAAM3tC,EAAUzL,OAC3Do5C,GAGTgrB,EAAAltE,UAAA4zE,kBAAA,SACEv/D,EACAijE,EACA5D,QADA,IAAA4D,OAAA,QACA,IAAA5D,MAAA,MAEA,IAAI6D,EAAgBljE,EAAWnK,OAC1BwpE,KACHA,EAAQ,IAAI1uE,MAAqBuyE,IAC3BrtE,OAAS,GAIjB,IAFA,IAAIxM,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACPrwE,EAAI,EAAGA,EAAIm5E,IAAiBn5E,EAAG,CACtC,IAAI8jD,EAAOnkD,KAAKq4E,iBAAiB/hE,EAAWjW,GAAIk5E,GAAUl5E,GAAKm5E,EAAgB,GAC/E,OAAQ3nB,EAAA9a,gBAAgBoN,IACtB,KAAK0N,EAAApiC,aAAa8uB,MAChB,IAAKsT,EAAA9Y,aAAaoL,GAAO,CACvB,IAAK,IAAI5tC,EAAI,EAAGH,EAAIy7C,EAAA5Y,mBAAmBkL,GAAO5tC,EAAIH,IAAKG,EAAGo/D,EAAMjpE,KAAKmlD,EAAA1Y,cAAcgL,EAAM5tC,IACzF,MAIJ,QAASo/D,EAAMjpE,KAAKy3C,GACpB,KAAK0N,EAAApiC,aAAa0yB,KAEpB,GAAI/3B,EAAKxI,MAAM,KAA0C,CACnDiwC,EAAA1T,yBAAyBgG,IAAOwxB,EAAMjpE,KAAK/M,EAAO8rC,eACtD,OAGJ,OAAOkqC,GAGTxG,EAAAltE,UAAAs2E,sBAAA,SACE/hE,GAEA,IAAIF,EAAaE,EAAUF,WACvBmjE,EAAYz5E,KAAK0wE,YACjBgJ,EAAYD,EAAUvR,OAC1BloE,KAAK0wE,YAAcgJ,EAEnB,IAAI/D,EAAQ31E,KAAK61E,kBAAkBv/D,GAKnC,OAJKojE,EAAU93D,MAAM,MAA0C5hB,KAAKg2E,oBAAoB0D,EAAW/D,GACnG+D,EAAUpQ,mBACVmQ,EAAU3P,QAAQ4P,GAClB15E,KAAK0wE,YAAc+I,EACZhD,EAAQz2E,KAAKL,OAAQg2E,EAAO9jB,EAAAriC,WAAWyY,OAGhDknC,EAAAltE,UAAAu2E,sBAAA,SACEhiE,GAEA,IAAI7W,EAASK,KAAKL,OAClB,GAAI6W,EAAUizB,MAKZ,OAJAzpC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf7K,EAAUizB,MAAM1+B,OAEXpL,EAAO8rC,cAEhB,IAAIrhB,EAAOpqB,KAAK0wE,YACZ/mD,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJA3pB,KAAKqN,MACHI,EAAAhD,eAAekvE,qFACfnjE,EAAUzL,OAELpL,EAAO8rC,cAEhB,IAAIkqC,EAAQ,IAAI1uE,MAChBjH,KAAKg2E,oBAAoB5rD,EAAMurD,GAE/B,IADA,IAAIzhE,EAASkW,EAAKlW,OACA,OAAXA,GAAmBA,EAAOyV,YAAcA,GAC7C3pB,KAAKg2E,oBAAoB9hE,EAAQyhE,GAAwB,GACzDzhE,EAASA,EAAOA,OAKlB,OAHAkW,EAAKk/C,mBACLqM,EAAMjpE,KAAK/M,EAAOiqC,GAAGjgB,IACrBS,EAAKjY,IAAG,IACDskE,EAAQ92E,EAAQg2E,EAAO9jB,EAAAriC,WAAWyY,OAG3CknC,EAAAltE,UAAAw2E,yBAAA,SACEjiE,GAEA,IAAI7W,EAASK,KAAKL,OACd8pC,EAAQjzB,EAAUizB,MACtB,GAAIA,EAKF,OAJAzpC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfooB,EAAM1+B,OAEDpL,EAAO8rC,cAGhB,IAAIrhB,EAAOpqB,KAAK0wE,YACZ7I,EAAgBz9C,EAAKy9C,cACzB,GAAqB,MAAjBA,EAKF,OAJA7nE,KAAKqN,MACHI,EAAAhD,eAAemvE,8EACfpjE,EAAUzL,OAELpL,EAAO8rC,cAEhBrhB,EAAKjY,IAAI,KACT,IAAIwjE,EAAQ,IAAI1uE,MAChBjH,KAAKg2E,oBAAoB5rD,EAAMurD,GAE/B,IADA,IAAIhwD,EAAuByE,EAAKlW,OACzByR,GAAWA,EAAQkiD,gBAAkBA,GAC1C7nE,KAAKg2E,oBAAoBrwD,EAASgwD,GAAwB,GAC1DhwD,EAAUA,EAAQzR,OAIpB,OAFAkW,EAAKk/C,mBACLqM,EAAMjpE,KAAK/M,EAAOiqC,GAAGi+B,IACd4O,EAAQ92E,EAAQg2E,EAAO9jB,EAAAriC,WAAWyY,OAG3CknC,EAAAltE,UAAAy2E,mBAAA,SACEliE,GAEA,IAAI7W,EAASK,KAAKL,OAEd85E,EAAYz5E,KAAK0wE,YACjBjnC,EAAQgwC,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BloE,KAAK0wE,YAAcgJ,EACnB,IAAI/vD,EAAa,SAAW8f,EAC5BiwC,EAAU/vD,WAAaA,EACvB,IAAIk+C,EAAgB,YAAcp+B,EAClCiwC,EAAU7R,cAAgBA,EAE1B,IAAI8N,EAAQ,IAAI1uE,MACZuP,EAAUA,UAAUC,MAAQ9I,EAAA+I,SAAS25C,MACvCrwD,KAAK61E,kBAAmCr/D,EAAUA,UAAWF,YAAY,EAAOq/D,GAEhFA,EAAMjpE,KACJ1M,KAAKq4E,iBAAiB7hE,EAAUA,YAGpC,IAAIqjE,EAAWl6E,EAAO6yC,qBACpBxyC,KAAK85E,cACH95E,KAAKs0E,kBAAkB99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKxR,KACjDpD,KAAKsvE,cAGLyK,GAAc,EACdloB,EAAA9a,gBAAgB8iC,IAAahoB,EAAApiC,aAAaolB,QAC5CzqC,OAAOynD,EAAA7a,kBAAkB6iC,IAAahoB,EAAAriC,WAAWppB,KAC5CyrD,EAAA5a,iBAAiB4iC,KAAWE,GAAc,IAEjD,IAAIC,EAAaN,EAAUp6D,GAAE,KACzB26D,EAAYP,EAAU93D,MAAM,MAC5Bs4D,EAASR,EAAU93D,MAAM,MAQzBu4D,GAAgBH,IAAeN,EAAUp6D,GAAE,IAE3C66D,IAAiBJ,GACnBpE,EAAMjpE,KAAK/M,EAAOiqC,GAAGi+B,EAAegS,IAEtC,IAAIjzC,EAAO6vC,EAAQ92E,EAAQg2E,EAAO9jB,EAAAriC,WAAWyY,MAoB7C,OAnBIkyC,IAAiBJ,GAAeE,KAClCrzC,EAAOjnC,EAAOuqC,KAAK29B,EAAejhC,IAEhCszC,IACFtzC,EAAOjnC,EAAO6pC,MAAM7f,EAAY,CAAEid,KAI/BozC,GAAYh6E,KAAKg2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU9zD,MACR,OAKF6zD,EAAU3P,QAAQ4P,GAClB15E,KAAK0wE,YAAc+I,EACZ7yC,GAGTuoC,EAAAltE,UAAA02E,sBAAA,SACEniE,GAEA,OAAOxW,KAAKL,OAAO6qC,OAGrB2kC,EAAAltE,UAAA22E,2BAAA,SACEpiE,GAEA,OAAOxW,KAAKs0E,kBAAkB99D,EAAUwzB,WAAYt8B,EAAAkH,KAAKG,KAAI,IAG/Do6D,EAAAltE,UAAA42E,oBAAA,SACEriE,GAEA,IAAI7W,EAASK,KAAKL,OAGd85E,EAAYz5E,KAAK0wE,YACjBjnC,EAAQgwC,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BloE,KAAK0wE,YAAcgJ,EAGnB,IAAItyD,EAAc5Q,EAAU4Q,YACxB+sD,EAA0B,EAC1B/sD,IAAa+sD,EAAWn0E,KAAKq4E,iBAAiBjxD,IAGlD,IAAIyyD,EAA0B,EAC1BO,GAAa,EACjB,GAAI5jE,EAAUqzB,WAQZ,GAPAgwC,EAAWl6E,EAAO6yC,qBAChBxyC,KAAK85E,cACH95E,KAAKs0E,kBAA8B99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKhR,MAC7D5D,KAAKsvE,cAILzd,EAAA9a,gBAAgB8iC,IAAahoB,EAAApiC,aAAaolB,MAAO,CAEnD,GADAzqC,OAAOynD,EAAA7a,kBAAkB6iC,IAAahoB,EAAAriC,WAAWppB,KACH,GAA1CyrD,EAAA5a,iBAAiB4iC,GAA4B,CAC/C,IAAIQ,EAAQ,IAAIpzE,MAMhB,OALIktE,GAAUkG,EAAM3tE,KAAKynE,GACzBn0E,KAAKg2E,oBAAoB0D,EAAWW,GACpCX,EAAUpQ,mBACVmQ,EAAU5P,gBACV7pE,KAAK0wE,YAAc+I,EACZhD,EAAQ92E,EAAQ06E,EAAOxoB,EAAAriC,WAAWyY,MAE3CmyC,GAAa,QAGfP,EAAWl6E,EAAOyD,IAAI,GACtBg3E,GAAa,EAEfV,EAAU7O,qBAAqBgP,GAG/B,IAAInuB,EAAcl1C,EAAUk1C,YACxB4uB,EAA0B,EAC1B5uB,IAAa4uB,EAAWt6E,KAAKs0E,kBAAkB5oB,EAAah+C,EAAAkH,KAAKG,KAAM,IAG3E,IAAI4U,EAAa+vD,EAAU/vD,WAAa,SAAW8f,EAAOiwC,EAAU/vD,WAAaA,EACjF+vD,EAAU/vD,WAAaA,EACvB,IAAIk+C,EAAgB,YAAcp+B,EAClCiwC,EAAU7R,cAAgBA,EAC1B,IAAI0S,EAAY,QAAU9wC,EACtB+wC,EAAgBhkE,EAAUA,UAC1Bm/D,EAAQ,IAAI1uE,MACZuzE,EAAc/jE,MAAQ9I,EAAA+I,SAAS25C,MACjCrwD,KAAK61E,kBAAmC2E,EAAelkE,YAAY,EAAOq/D,GAE1EA,EAAMjpE,KAAK1M,KAAKq4E,iBAAiBmC,IAEnC,IA6BI5zC,EA7BAozC,EAAaN,EAAUp6D,GAAE,KACzB26D,EAAYP,EAAU93D,MAAM,MAC5Bs4D,EAASR,EAAU93D,MAAM,MAazBu4D,GAAgBH,IAAeN,EAAUp6D,GAAE,IAC3Cm7D,GAAcL,GAAcF,EAE5BhwC,EAAO,IAAIjjC,MAIf,GAHKmzE,GACHlwC,EAAKx9B,KAAK/M,EAAOiqC,GAAGjgB,EAAYhqB,EAAO+mC,MAAMmrB,EAAA/+B,QAAQg4C,OAAQ+O,KAE3DI,GACEtE,EAAMxpE,OAAS,GAAK0lD,EAAA9a,gBAAgB4+B,EAAM,KAAO9jB,EAAApiC,aAAa6uB,QAChEpU,EAAKx9B,KAAK/M,EAAO6pC,MAAMq+B,EAAe8N,SAGxC,IAAK,IAAIt1E,EAAI,EAAG+V,EAAIu/D,EAAMxpE,OAAQ9L,EAAI+V,IAAK/V,EAAG6pC,EAAKx9B,KAAKipE,EAAMt1E,IAmChE,OAhCI85E,GAAgBF,GACdK,GAAUpwC,EAAKx9B,KAAK4tE,GACxBt6E,KAAKg2E,oBAAoB0D,EAAWxvC,GACpCA,EAAKx9B,KAAK/M,EAAOiqC,GAAG2wC,IAElB3zC,EADEutC,EACKx0E,EAAO6pC,MAAMixC,EAAa9wD,EAAa,KAAM,CAClDwqD,EACAx0E,EAAOuqC,KAAKqwC,EAAW56E,EAAO6pC,MAAM,KAAMU,MAGrCvqC,EAAO6pC,MAAMixC,EAAa9wD,EAAa,KAAM,CAClDhqB,EAAOuqC,KAAKqwC,EAAW9D,EAAQ92E,EAAQuqC,EAAM2nB,EAAAriC,WAAWyY,WAIxDksC,GAAUjqC,EAAKinC,QAAQgD,GAC3Bn0E,KAAKg2E,oBAAoB0D,EAAWxvC,GACpCtD,EAAOjnC,EAAO6pC,MAAMixC,EAAa9wD,EAAa,KAAMugB,IAItDwvC,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU9zD,MACR,OAKEw0D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClC15E,KAAK0wE,YAAc+I,EACZ7yC,GAGTuoC,EAAAltE,UAAA62E,mBAAA,SACEtiE,GAEA,IAAI7W,EAASK,KAAKL,OACd0qC,EAAS7zB,EAAU6zB,OACnBC,EAAU9zB,EAAU8zB,QACpBmvC,EAAYz5E,KAAK0wE,YAGjBmJ,EAAWl6E,EAAO6yC,qBACpBxyC,KAAK85E,cACH95E,KAAKs0E,kBAAkB99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKhR,MACjD5D,KAAKsvE,cAKT,GACEzd,EAAA9a,gBAAgB8iC,IAAahoB,EAAApiC,aAAaolB,OAC1Cgd,EAAA7a,kBAAkB6iC,IAAahoB,EAAAriC,WAAWppB,IAE1C,OAAOyrD,EAAA5a,iBAAiB4iC,GACpB75E,KAAKq4E,iBAAiBhuC,GACtBC,EACEtqC,KAAKq4E,iBAAiB/tC,GACtB3qC,EAAO6qC,MAIf,IAAIkwC,EAAc,IAAIzzE,MAClB0zE,EAAalB,EAAUvR,OAY3B,GAXAloE,KAAK0wE,YAAciK,EACnBA,EAAW9P,qBAAqBgP,GAC5BxvC,EAAO5zB,MAAQ9I,EAAA+I,SAAS25C,MAC1BrwD,KAAK61E,kBAAmCxrC,EAAQ/zB,YAAY,EAAOokE,GAEnEA,EAAYhuE,KAAK1M,KAAKq4E,iBAAiBhuC,IAEpCswC,EAAW/4D,MAAM,MAA0C5hB,KAAKg2E,oBAAoB2E,EAAYD,GACrGC,EAAWrR,mBACXtpE,KAAK0wE,YAAc+I,EAEfnvC,EAAS,CACX,IAAIswC,EAAcnB,EAAUvR,OAC5BloE,KAAK0wE,YAAckK,EACnBA,EAAY5P,sBAAsB6O,GAClC,IAAIgB,EAAe,IAAI5zE,MAUvB,OATIqjC,EAAQ7zB,MAAQ9I,EAAA+I,SAAS25C,MAC3BrwD,KAAK61E,kBAAmCvrC,EAASh0B,YAAY,EAAOukE,GAEpEA,EAAanuE,KAAK1M,KAAKq4E,iBAAiB/tC,IAErCswC,EAAYh5D,MAAM,MAA0C5hB,KAAKg2E,oBAAoB4E,EAAaC,GACvGD,EAAYtR,mBACZtpE,KAAK0wE,YAAc+I,EACnBA,EAAUpP,cAAcsQ,EAAYC,GAC7Bj7E,EAAOyqC,GAAGyvC,EACfpD,EAAQ92E,EAAQ+6E,EAAa7oB,EAAAriC,WAAWyY,MACxCwuC,EAAQ92E,EAAQk7E,EAAchpB,EAAAriC,WAAWyY,OAK3C,OAFAwxC,EAAU1P,mBAAmB4Q,GACzBA,EAAWr7D,GAAE,MAAwBm6D,EAAUzO,sBAAsB6O,GAClEl6E,EAAOyqC,GAAGyvC,EACfpD,EAAQ92E,EAAQ+6E,EAAa7oB,EAAAriC,WAAWyY,QAU9CknC,EAAAltE,UAAA82E,uBAAA,SACEviE,EACA8hE,GAEA,IAAI34E,EAASK,KAAKL,OACdinC,EAAsB,EACtBxc,EAAOpqB,KAAK0wE,YACZtlC,EAAahhB,EAAKghB,WAGtBhhB,EAAKjY,IAAI,KAET,IAAI2oE,EAAkBtkE,EAAUlV,MAChC,GAAIw5E,EAAiB,CACnB,GAAI1vC,GAAc19B,EAAAkH,KAAKG,KAMrB,OALA/U,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfuG,EAAgB/vE,MAAO/K,KAAKsvE,YAAY5jE,WAAY0/B,EAAW1/B,YAEjE1L,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO8rC,cAEhB,IAAIsvC,EAAW,EACX3wD,EAAKg6C,eAAe9kD,GAAG9R,EAAAnL,YAAY6b,iBAAgB68D,GAAW,GAClEn0C,EAAO5mC,KAAKs0E,kBAAkBwG,EAAiB1vC,EAAuB,GAAX2vC,GAItD/6E,KAAK6vE,oBAAoBr7D,IAAIoyB,IAC5BwE,EAAWwnC,WACT/gB,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAa0lB,UACpC/qB,EAAKs/C,eAAe7X,EAAAva,iBAAiB1Q,GAAO/4B,EAAAw5D,WAAW2T,gBACzD5wD,EAAKo+C,eAAe3W,EAAAva,iBAAiB1Q,GAAO/4B,EAAAw5D,WAAW2T,cACvDh7E,KAAK6vE,oBAAoB76D,IAAI4xB,IAOhCxc,EAAKihD,YAAYzkC,EAAMwE,IAAahhB,EAAKjY,IAAG,GAC7CiY,EAAKwgD,UAAUhkC,EAAMwE,IAAahhB,EAAKjY,IAAG,QAErCi5B,GAAc19B,EAAAkH,KAAKG,OAC5B/U,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACf/9D,EAAUzL,MAAO,OAAQqgC,EAAW1/B,YAEtCk7B,EAAOjnC,EAAO8rC,eAGhB,IAAIkqC,EAAQ,IAAI1uE,MAOhB,GANAjH,KAAKg2E,oBAAoB5rD,EAAMurD,GAC/B31E,KAAKi0E,mBAAmB7pD,EAAMurD,GAG1BvqC,EAAWwnC,YAAc5yE,KAAK6vE,oBAAoBr7D,IAAIoyB,KAAOA,EAAO5mC,KAAK6yE,WAAWjsC,IAEpFwE,GAAc19B,EAAAkH,KAAKG,MAAQ4gE,EAAMxpE,OAAQ,CAC3C,IAAI+pE,EAAO9rD,EAAK2+C,oBAAoB39B,GAChChhB,EAAKwgD,UAAUhkC,EAAMwE,IAAahhB,EAAKw+C,aAAasN,EAAKtuD,MAAO/Z,EAAAw5D,WAAW9C,SAC/EoR,EAAMxE,QACJxxE,EAAOypC,UAAU8sC,EAAKtuD,MAAOgf,IAE/BA,EAAOjnC,EAAO2nC,UAAU4uC,EAAKtuD,MAAOwjB,EAAWqoB,gBAKjD,OAHArpC,EAAKk/C,mBAGDgP,GAAgB1xC,GAAQwE,GAAc19B,EAAAkH,KAAKG,KACxC4gE,EAAMxpE,QACXwpE,EAAMjpE,KAAKk6B,GACJjnC,EAAO6pC,MAAM,KAAMmsC,EAAOvqC,EAAWqoB,iBAFlB7sB,EAMxBxc,EAAK9K,GAAE,OACJq2D,EAAMxpE,QACXwpE,EAAMjpE,KAAK/M,EAAOiqC,GAAGx/B,OAAOggB,EAAK49C,mBAAoB,EAAGphC,IAEjDjnC,EAAO6pC,MAAM,KAAMmsC,IAHAh2E,EAAOiqC,GAAGx/B,OAAOggB,EAAK49C,mBAAoB,EAAGphC,GAOpE+uC,EAAMxpE,QACXwpE,EAAMjpE,KAAK/M,EAAO+qC,OAAO9D,IAClBjnC,EAAO6pC,MAAM,KAAMmsC,IAFAh2E,EAAO+qC,OAAO9D,IAK1CuoC,EAAAltE,UAAA+2E,uBAAA,SACExiE,GAEA,IAAI7W,EAASK,KAAKL,OAEd4sD,EAAQ/1C,EAAU+1C,MAClB0uB,EAAW1uB,EAAMpgD,OACrB,IAAK8uE,EACH,OAAOj7E,KAAKs0E,kBAAkB99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKG,KAAI,GAM9D,IAAI0kE,EAAYz5E,KAAK0wE,YACjBjQ,EAAUgZ,EAAU9P,iBAGpBuR,EAAYzB,EAAUpR,aAAa36D,EAAAkH,KAAKnR,KACxC03E,EAAiBD,EAAUtzD,MAG3BsyD,EAAS,IAAIjzE,MAAqB,EAAIg0E,GAC1Cf,EAAO,GAAKv6E,EAAOypC,UACjB+xC,EACAn7E,KAAKs0E,kBAAkB99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKnR,IAAG,IAQtD,IAFA,IAAI23E,EAAa,EACbC,GAAgB,EACXh7E,EAAI,EAAGA,EAAI46E,IAAY56E,EAAG,CACjC,IACIopC,EADQ8iB,EAAMlsD,GACAopC,MACdA,EACFywC,EAAOkB,KAAgBz7E,EAAOiqC,GAAG,OAASvpC,EAAEqL,SAAS,IAAM,IAAM+0D,EAC/D9gE,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6yC,MACrBtrE,EAAO2nC,UAAU6zC,EAAgBtpB,EAAAriC,WAAWppB,KAC5CpG,KAAKs0E,kBAAkB7qC,EAAO/7B,EAAAkH,KAAKnR,IAAG,KAM1C43E,EAAeh7E,EAInBo5E,EAAU3Q,cAAcoS,GAGxBhB,EAAOkB,GAAcz7E,EAAOiqC,IAAIyxC,GAAgB,EAC1C,OAASA,EAAa3vE,SAAS,IAC/B,SACA,IAAM+0D,GAGZ,IAAI6a,EAAe37E,EAAO6pC,MAAM,SAAWi3B,EAASyZ,EAAQroB,EAAAriC,WAAWyY,MACnEszC,EAAiB,IACjBC,EAAoB,EACxB,IAASn7E,EAAI,EAAGA,EAAI46E,IAAY56E,EAAG,CACjC,IACIiW,EADQi2C,EAAMlsD,GACKiW,WACnBkjE,EAAgBljE,EAAWnK,OAG3ButE,EAAYD,EAAUvR,OAC1BloE,KAAK0wE,YAAcgJ,EACnB,IAAI/vD,EAAa,SAAW82C,EAC5BiZ,EAAU/vD,WAAaA,EAEvB,IAAI8xD,EAASp7E,GAAK46E,EAAW,EACzBS,EAAYD,EAAS9xD,EAAa,QAAUtpB,EAAI,GAAGqL,SAAS,IAAM,IAAM+0D,EACxEkV,EAAQ,IAAI1uE,MAAqB,EAAIuyE,GACzC7D,EAAM,GAAK2F,EAGX,IAFA,IAAIK,EAAQ,EACR3B,GAAa,EACRzjE,EAAI,EAAGA,EAAIijE,IAAiBjjE,EAAG,CACtC,IAAI4tC,EAAOnkD,KAAKq4E,iBAAiB/hE,EAAWC,IAI5C,GAHIs7C,EAAA9a,gBAAgBoN,IAAS0N,EAAApiC,aAAa0yB,MACxCwzB,EAAMgG,KAAWx3B,GAEfu1B,EAAU93D,MAAM,KAA0C,CACxD83D,EAAUp6D,GAAE,OAAwB06D,GAAa,GACrD,OAGJrE,EAAMxpE,OAASwvE,GACX3B,GAAcyB,GAAU/B,EAAU93D,MAAM,SAC1C25D,GAAqB7B,EAAU1mE,OAEjCwoE,GAAoC,MAAf9B,EAAU1mE,MAG1BgnE,GAAYh6E,KAAKg2E,oBAAoB0D,EAAW/D,GACrD+D,EAAU9zD,MACR,MAGF8zD,EAAUpQ,mBACVtpE,KAAK0wE,YAAc+I,EACnB6B,EAAe37E,EAAO6pC,MAAMkyC,EAAW/F,EAAO9jB,EAAAriC,WAAWyY,MAQ3D,OANAwxC,EAAU5P,gBAGNwR,GAAgB,IAAG5B,EAAUzmE,QAA6B,GAApBuoE,GAC1C9B,EAAUzmE,QAA6B,KAApBwoE,EAEZF,GAGTnM,EAAAltE,UAAAg3E,sBAAA,SACEziE,GAEA,IAAI4T,EAAOpqB,KAAK0wE,YAGhBtmD,EAAKjY,IAAI,KAET,IAAIwjE,EAAQ,IAAI1uE,MAChBjH,KAAKi0E,mBAAmB7pD,EAAMurD,GAG9B,IAAIr0E,EAAQkV,EAAUlV,MAClBwJ,EAA6B,KACjC,GAAIxJ,EAAMmV,MAAQ9I,EAAA+I,SAASw4C,IAAK,CAC9B,IAAI0sB,EAA0Bt6E,EAAO0hB,UACjC44D,EAAQzvE,SAAQrB,EAAU8wE,EAAQ,IAIxC,OAFAjG,EAAMjpE,KAAK2zD,EAAAwb,aAAa77E,KAAM8K,EAAS0L,IAEhCigE,EAAQz2E,KAAKL,OAAQg2E,EAAO9jB,EAAAriC,WAAWyY,OAGhDknC,EAAAltE,UAAAi3E,oBAAA,SACE1iE,GAQA,OAJAxW,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf7K,EAAUzL,OAEL/K,KAAKL,OAAO8rC,eAIrB0jC,EAAAltE,UAAAk3E,yBAAA,SACE3iE,GASA,IAPA,IAAI7W,EAASK,KAAKL,OACdglB,EAAenO,EAAUmO,aACzBm3D,EAAkBn3D,EAAaxY,OAC/Bie,EAAOpqB,KAAK0wE,YACZqL,EAAe,IAAI90E,MACnBoL,EAAWrS,KAAKqS,SAEXhS,EAAI,EAAGA,EAAIy7E,IAAmBz7E,EAAG,CACxC,IAAIkU,EAAcoQ,EAAatkB,GAC3BO,EAAO2T,EAAY3T,KAAKqL,KACxBgT,EAAoB,KACpBk1D,EAA0B,EAC1BC,GAAyB,EAG7B,GAAI7/D,EAAY0K,KAAM,CAMpB,KALAA,EAAO5M,EAASmuD,YACdjsD,EAAY0K,KACZmL,EAAKg6C,eACLh6C,EAAK3B,0BAEI,SACPlU,EAAY6S,cACd+sD,EAAWn0E,KAAKs0E,kBAAkB//D,EAAY6S,YAAanI,EACzD,IAEFm1D,EAAyBp0E,KAAK6vE,oBAAoBr7D,IAAI2/D,QAInD,KAAI5/D,EAAY6S,YAehB,CACLpnB,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACfzsD,EAAY3T,KAAKmK,MAAM87D,OAEzB,SAfA,GAJAsN,EAAWn0E,KAAKs0E,kBAAkB//D,EAAY6S,YAAa1Z,EAAAkH,KAAK89C,KAAI,IAGpE0hB,EAAyBp0E,KAAK6vE,oBAAoBr7D,IAAI2/D,GAClDn0E,KAAKsvE,aAAe5hE,EAAAkH,KAAKG,KAAM,CACjC/U,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfhgE,EAAYxJ,MAAO/K,KAAKsvE,YAAY5jE,WAAY,UAElD,SAEFuT,EAAOjf,KAAKsvE,YAYd,IAAI0M,EAAUznE,EAAY+K,GAAG9R,EAAAnL,YAAYod,OACrCkD,GAAW,EACf,GAAIq5D,EACF,GAAI7H,GAEF,GADAA,EAAWx0E,EAAO6yC,qBAAqB2hC,GACnCtiB,EAAA9a,gBAAgBo9B,IAAatiB,EAAApiC,aAAaolB,MAAO,CACnD,IAAI/qB,EAAQ,IAAI8nC,EAAAjqC,MAAM/mB,GAAO,EAAGqe,EAAMmL,EAAKw9C,gBAC3C,OAAQ/V,EAAA7a,kBAAkBm9B,IACxB,KAAKtiB,EAAAriC,WAAWppB,IACd0jB,EAAMpK,wBACJnK,QACEs8C,EAAA5a,iBAAiBk9B,GACjB,GAEFl1D,GAEF,MAEF,KAAK4yC,EAAAriC,WAAWnpB,IACdyjB,EAAMpK,wBACJnK,QACEs8C,EAAA3a,oBAAoBi9B,GACpBtiB,EAAA1a,qBAAqBg9B,IAEvBl1D,GAEF,MAEF,KAAK4yC,EAAAriC,WAAW3oB,IACdijB,EAAMlK,sBAA2BiyC,EAAAza,iBAAiB+8B,GAAWl1D,GAC7D,MAEF,KAAK4yC,EAAAriC,WAAW1oB,IACdgjB,EAAMlK,sBAAsBiyC,EAAAxa,iBAAiB88B,GAAWl1D,GACxD,MAEF,QAEE,OADA7U,QAAO,GACAzK,EAAO8rC,cAIlB,IAAIi8B,EAAet9C,EAAKs9C,aACxB,GAAKA,GACA,GAAIA,EAAalzD,IAAI5T,GAKxB,OAJAZ,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACfzL,EAAY3T,KAAKmK,MAAOnK,GAEnBZ,KAAKL,OAAO8rC,mBANFrhB,EAAKs9C,aAAeA,EAAe,IAAItgE,IAQ1DsgE,EAAav1D,IAAIvR,EAAMkpB,GACvBnH,GAAW,QAGb3iB,KAAKqN,MACHI,EAAAhD,eAAewxE,wCACf1nE,EAAYxJ,OAMlB,IAAK4X,EAAU,CACTmH,OAAK,EACT,GACEvV,EAAYqN,MAAMpU,EAAAnL,YAAYi0D,IAAM9oD,EAAAnL,YAAYod,QAChD2K,EAAK9K,GAAE,OACP,CACA,IAAI8pD,EAAgBh/C,EAAK4+C,eAAepoE,GACpCwoE,GACFppE,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACfzL,EAAY3T,KAAKmK,MAAOwJ,EAAY3T,KAAKqL,MAE3C6d,EAAQs/C,GAERt/C,EAAQM,EAAK6+C,eAAeroE,EAAMqe,GAEhC+8D,GAAS5xD,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAW6U,cAClD,CACL,GAAI9xD,EAAKu6C,YAAY/jE,GAAO,CAC1BZ,KAAKqN,MACHI,EAAAhD,eAAeuV,uBACfzL,EAAY3T,KAAKmK,MAAOnK,GAE1B,SAEFkpB,EAAQM,EAAKw9C,eAAer9C,SAAStL,EAAMre,EAAM2T,GAC7CynE,GAAS5xD,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAW6U,UAEzD,IAAItJ,EAAY3zD,EAAK2zD,UACjBuB,GACE/pD,EAAKwgD,UAAUuJ,EAAUl1D,IAAOmL,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAW9C,SAC1EqO,GACFxoD,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAWwB,UAC1CkT,EAAarvE,KACX/M,EAAOypC,UAAUtf,EAAMlC,MACrBwsD,EACID,EACAn0E,KAAK6yE,WAAWsB,OAIxB4H,EAAarvE,KACX/M,EAAOypC,UAAUtf,EAAMlC,MAAOusD,IAE5BrqD,EAAM7K,KAAKK,GAAG,MACX8K,EAAKihD,YAAY8I,EAAUl1D,GAC3BmL,EAAKo+C,eAAe1+C,EAAMlC,MAAO/Z,EAAAw5D,WAAWiE,SADVlhD,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAWiE,YAKjFsH,GAMFmJ,EAAarvE,KACX/M,EAAOypC,UAAUtf,EAAMlC,MACrB3I,EAAKy0C,aAAa/zD,KAGtByqB,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAW2C,yBACjClgD,EAAM7K,KAAKK,GAAG,KACvB8K,EAAKw+C,aAAa9+C,EAAMlC,MAAO/Z,EAAAw5D,WAAWiE,UAKlD,OAA8B,GAAvByQ,EAAa5vE,OAChB,EACAsqE,EAAQ92E,EAAQo8E,EAAclqB,EAAAriC,WAAWyY,OAG/CknC,EAAAltE,UAAAm3E,qBAAA,SACE5iE,GAEA,OAAOxW,KAAKs0E,kBAAkB99D,EAAUwzB,WAAYt8B,EAAAkH,KAAKG,KACvD,KAIJo6D,EAAAltE,UAAAo3E,sBAAA,SACE7iE,GAEA,IAAI7W,EAASK,KAAKL,OACd85E,EAAYz5E,KAAK0wE,YAGjBmJ,EAAWl6E,EAAO6yC,qBACpBxyC,KAAK85E,cACH95E,KAAKs0E,kBAAkB99D,EAAUqzB,UAAWn8B,EAAAkH,KAAKhR,MACjD5D,KAAKsvE,cAKL8K,GAAa,EACjB,GAAIvoB,EAAA9a,gBAAgB8iC,IAAahoB,EAAApiC,aAAaolB,MAAO,CAEnD,GADAzqC,OAAOynD,EAAA7a,kBAAkB6iC,IAAahoB,EAAAriC,WAAWppB,MAC5CyrD,EAAA5a,iBAAiB4iC,GAAW,OAAOl6E,EAAO6qC,MAC/C4vC,GAAa,EAIf,IAAI3wC,EAAQgwC,EAAU9P,iBAClB+P,EAAYD,EAAUvR,OAC1BloE,KAAK0wE,YAAcgJ,EACnB,IAAI/vD,EAAa,SAAW8f,EAC5BiwC,EAAU/vD,WAAaA,EACvB,IAAIk+C,EAAgB,YAAcp+B,EAClCiwC,EAAU7R,cAAgBA,EAC1B6R,EAAU7O,qBAAqBgP,GAC/B,IAAIlE,EAAQ,IAAI1uE,MACZuP,EAAUA,UAAUC,MAAQ9I,EAAA+I,SAAS25C,MACvCrwD,KAAK61E,kBAAmCr/D,EAAUA,UAAWF,YAAY,EAAOq/D,GAEhFA,EAAMjpE,KAAK1M,KAAKq4E,iBAAiB7hE,EAAUA,YAE7C,IASI2jE,GATaT,EAAUp6D,GAAE,OASMo6D,EAAUp6D,GAAE,IAE3C66D,IACFn6E,KAAKg2E,oBAAoB0D,EAAW/D,GACpCA,EAAMjpE,KAAK/M,EAAOiqC,GAAGi+B,KAElBuS,GACHzE,EAAMxE,QAAQxxE,EAAOiqC,GAAGjgB,EAAYhqB,EAAO+mC,MAAMmrB,EAAA/+B,QAAQg4C,OAAQ+O,KAEnE,IAAIjzC,EAAO6vC,EAAQ92E,EAAQg2E,EAAO9jB,EAAAriC,WAAWyY,MAoB7C,OAnBIkyC,GAAgBT,EAAU93D,MAAM,SAClCglB,EAAOjnC,EAAOuqC,KAAK29B,EAAejhC,IAE/BwzC,IAAcV,EAAU93D,MAAM,QACjCglB,EAAOjnC,EAAO6pC,MAAM7f,EAAY,CAAEid,KAIpC8yC,EAAUpQ,mBACVmQ,EAAU5P,gBACV6P,EAAU9zD,MACR,OAKEw0D,EAAYX,EAAU3P,QAAQ4P,GAC7BD,EAAU1P,mBAAmB2P,GAClC15E,KAAK0wE,YAAc+I,EACZ7yC,GAMTuoC,EAAAltE,UAAAk6E,sBAAA,SACEvjE,EACAgqD,EACAmY,GAEA3wE,OAAOwO,EAAQ0G,GAAG9R,EAAAnL,YAAYilB,UAC9B,IAAIrI,EAAOrG,EAAQqG,KACnB,SACkB,EAAd87D,IACF97D,EAAKK,GAAE,IACPsjD,EAAetjD,GAAE,IACjBL,EAAK2sB,KAAOg3B,EAAeh3B,MACtB5rC,KAAKsvE,YAAc1M,GAAgBnsD,MACnCzW,KAAKsvE,YAAcrwD,GAAMxI,MAE9B,OACA,OACE,IAAIs2B,EAAQ9tB,EAAK2zC,yBAAyBllD,EAAAkH,KAAKxR,KAC/C,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBwV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,uBAAyB0lB,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAO7zB,EAAQqG,KAAK6zC,wBAAwBplD,EAAAkH,KAAKxR,KACrD,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBwV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAAwBolB,EACxC,GAGR,OACA,OACE,OAAOzsC,KAAKL,OAAOyD,IACQ,GAAzBwV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAChB,GAGR,OACA,OACE,IAAKzO,EAAQ4M,QAAQ9Q,QAAQc,SAC3B,OAAOxV,KAAKL,OAAOyD,IACQ,GAAzBwV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBzO,EAAQuO,kBACXnnB,KAAKL,OAAO0D,IACV6sC,QAAQt3B,EAAQyO,sBAChB8oB,SAASv3B,EAAQyO,uBAEnBrnB,KAAKL,OAAO0D,IAAI,GAEtB,QAEE,IAAMuV,EAAQyC,aAAau2C,EAAA7gD,eAAeqE,UAAYwtD,GAAkBl1D,EAAAkH,KAAK/Q,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0B8U,EAAS2O,oBAGxDvnB,KAAKsvE,YAAc5hE,EAAAkH,KAAK/Q,IAE1B,QACE,OAAO7D,KAAKL,OAAOkE,IAA0B+U,EAAS2O,oBAExD,QAEE,OADAnd,QAAO,GACApK,KAAKL,OAAO8rC,gBAKzB0jC,EAAAltE,UAAAqyE,kBAAA,SACEtqC,EACA44B,EACAmY,GAGA,IAAIn0C,EAEJ,YALA,IAAAm0C,MAAA,GAEA/6E,KAAKsvE,YAAc1M,EAEfA,GAAkBl1D,EAAAkH,KAAKG,OAAMgmE,GAAW,GACpC/wC,EAAWvzB,MACjB,KAAK9I,EAAA+I,SAASksC,UACZhc,EAAO5mC,KAAKo8E,2BAAgDpyC,EAAY44B,EAAgBmY,GACxF,MAEF,KAAKptE,EAAA+I,SAASk4C,OACZhoB,EAAO5mC,KAAKq8E,wBAA0CryC,EAAY44B,EAAgBmY,GAClF,MAEF,KAAKptE,EAAA+I,SAASmsC,KACZjc,EAAO5mC,KAAKs8E,sBAAsCtyC,EAAY44B,EAAgBmY,GAC9E,MAEF,KAAKptE,EAAA+I,SAASo4C,MACZloB,EAAO5mC,KAAKu8E,uBAAwCvyC,EAAY44B,EAAgBmY,GAChF,MAEF,KAAKptE,EAAA+I,SAASosC,cACZlc,EAAO5mC,KAAKw8E,+BAAwDxyC,EAAY44B,EAAgBmY,GAChG,MAEF,KAAKptE,EAAA+I,SAASiI,SACZioB,EAAO5mC,KAAKy8E,0BAA8CzyC,EAAY44B,EAAexQ,mBAAoB2oB,GACzG,MAEF,KAAKptE,EAAA+I,SAASisC,WACd,KAAKh1C,EAAA+I,SAAS+rC,MACd,KAAK90C,EAAA+I,SAAS6rC,KACd,KAAK50C,EAAA+I,SAAS44C,KACd,KAAK3hD,EAAA+I,SAASusC,MACd,KAAKt1C,EAAA+I,SAAS8rC,KACZ5b,EAAO5mC,KAAK08E,4BAAkD1yC,EAAY44B,EAAgBmY,GAC1F,MAEF,KAAKptE,EAAA+I,SAASs4C,WACZpoB,EAAO5mC,KAAK28E,4BAAkD3yC,EAAY44B,EAAgBmY,GAC1F,MAEF,KAAKptE,EAAA+I,SAASwM,QACZ0jB,EAAO5mC,KAAK48E,yBAA4C5yC,EAAY44B,EAAgBmY,GACpF,MAEF,KAAKptE,EAAA+I,SAASw4C,IACZtoB,EAAO5mC,KAAK68E,qBAAoC7yC,EAAY44B,EAAgBmY,GAC5E,MAEF,KAAKptE,EAAA+I,SAASqsC,cACZnc,EAAO5mC,KAAKs0E,kBAA4CtqC,EAAYA,WAAY44B,EAAgBmY,GAChG,MAEF,KAAKptE,EAAA+I,SAASssC,eACZpc,EAAO5mC,KAAK88E,gCAA0D9yC,EAAY44B,EAAgBmY,GAClG,MAEF,KAAKptE,EAAA+I,SAAS24C,QACZzoB,EAAO5mC,KAAK+8E,yBAA4C/yC,EAAY44B,EAAgBmY,GACpF,MAEF,KAAKptE,EAAA+I,SAAS84C,aACZ5oB,EAAO5mC,KAAKg9E,8BAAsDhzC,EAAY44B,EAAgBmY,GAC9F,MAEF,KAAKptE,EAAA+I,SAAS+4C,YACZ7oB,EAAO5mC,KAAKi9E,6BAAoDjzC,EAAY44B,EAAgBmY,GAC5F,MAEF,QACE/6E,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEb67B,EAAO5mC,KAAKL,OAAO8rC,cAIvB,IAAI6jC,EAActvE,KAAKsvE,YACnB4N,EAAgD,IAA7B,EAAXnC,GAgBZ,OAfIzL,GAAe1M,IACF,EAAXmY,GACFn0C,EAAO5mC,KAAKm9E,kBAAkBv2C,EAAM0oC,EAAa1M,GAAgB,EAAMsa,EAAMlzC,GAC7EkzC,GAAO,EACPl9E,KAAKsvE,YAAc1M,GACC,EAAXmY,IACTn0C,EAAO5mC,KAAKm9E,kBAAkBv2C,EAAM0oC,EAAa1M,GAAgB,EAAOsa,EAAMlzC,GAC9EkzC,GAAO,EACPl9E,KAAKsvE,YAAc1M,IAGnBsa,IAAMt2C,EAAO5mC,KAAKo9E,uBAAuBx2C,EAAM0oC,IAG/CtvE,KAAK0U,QAAQgW,WAAW1qB,KAAKs5E,iBAAiB1yC,EAAMoD,EAAWj/B,OAC5D67B,GAITuoC,EAAAltE,UAAAuwC,qBAAA,SACExI,EACA44B,EACAmY,GAEA,YAFA,IAAAA,MAAA,GAEO/6E,KAAKL,OAAO6yC,qBACjBxyC,KAAKs0E,kBAAkBtqC,EAAY44B,EAAgBmY,KAIvD5L,EAAAltE,UAAAk7E,kBAAA,SACEv2C,EAEAqnC,EAEA/oB,EAEAm4B,EAEAH,EACAnX,GAEA,IAAIpmE,EAASK,KAAKL,OAGlB,OAAiB,IAAbsuE,EAASx3D,MACXrM,OAAkB,IAAX86C,EAAOzuC,MACdzW,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfxO,EAAWh7D,MAAOkjE,EAASviE,WAAYw5C,EAAOx5C,YAEzC/L,EAAO8rC,eAID,IAAXyZ,EAAOzuC,KAA8B9W,EAAOoqC,KAAKnD,IAEjD5mC,KAAK0wE,YAAY9F,UAAUhkC,EAAMqnC,KAAWA,EAAWA,EAAS5b,iBAE/D4b,EAAS7gD,eAAe83B,IACtBm4B,IACCpP,EAAS5b,iBAAmBnN,EAC9BllD,KAAKqN,MACHI,EAAAhD,eAAe6yE,wBACfvX,EAAWh7D,OAGb/K,KAAKqN,MACHI,EAAAhD,eAAe8yE,sDACfxX,EAAWh7D,MAAOkjE,EAASviE,WAAYw5C,EAAOx5C,aAMlDuiE,EAAS3uD,GAAE,GAGT4lC,EAAO5lC,GAAE,GACM,IAAb2uD,EAASx3D,KAGI,IAAXyuC,EAAOzuC,OACTmwB,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ0qD,WAAY52C,IAMtB,IAAXse,EAAOzuC,OAChBmwB,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ2qD,UAAW72C,IAMhCse,EAAO5lC,GAAE,GAGD,IAAb2uD,EAASx3D,KACPyuC,GAAUx3C,EAAAkH,KAAKhR,MACjBgjC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASuzC,MAAO/kC,EAAMjnC,EAAOkE,IAAI,IACtDq5E,GAAO,GAGLt2C,EAFOse,EAAO5lC,GAAE,GACd4lC,EAAO5lC,GAAE,IACJ3f,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ4qD,cAAe92C,GAEpCjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ6qD,cAAe/2C,GAGzCse,EAAO5lC,GAAE,IACJ3f,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ8qD,cAAeh3C,GAEpCjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ+qD,cAAej3C,GAM3Cse,GAAUx3C,EAAAkH,KAAKhR,MACjBgjC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASwzC,MAAOhlC,EAAMjnC,EAAOmE,IAAI,IACtDo5E,GAAO,GAGLt2C,EAFOse,EAAO5lC,GAAE,GACd4lC,EAAO5lC,GAAE,IACJ3f,EAAO+mC,MAAMmrB,EAAA/+B,QAAQgrD,cAAel3C,GAEpCjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQirD,cAAen3C,GAGzCse,EAAO5lC,GAAE,IACJ3f,EAAO+mC,MAAMmrB,EAAA/+B,QAAQkrD,cAAep3C,GAEpCjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQmrD,cAAer3C,IAOjDx8B,OAAmB,GAAZ86C,EAAOlyC,MAAyB,sBACvC4zB,EAAOjnC,EAAOoqC,KAAKnD,IAIZqnC,EAAS3uD,GAAE,IAAuB4lC,EAAO5lC,GAAE,GAKhDsnB,EAFW,IAAXse,EAAOzuC,KACLw3D,EAAS3uD,GAAE,IACN3f,EAAO+mC,MACZunC,EAAS3uD,GAAE,GACPuyC,EAAA/+B,QAAQorD,gBACRrsB,EAAA/+B,QAAQqrD,gBACZv3C,GAGKjnC,EAAO+mC,MACZunC,EAAS3uD,GAAE,GACPuyC,EAAA/+B,QAAQsrD,gBACRvsB,EAAA/+B,QAAQurD,gBACZz3C,GAMAqnC,EAAS3uD,GAAE,IACN3f,EAAO+mC,MACZunC,EAAS3uD,GAAE,GACPuyC,EAAA/+B,QAAQwrD,gBACRzsB,EAAA/+B,QAAQyrD,gBACZ33C,GAGKjnC,EAAO+mC,MACZunC,EAAS3uD,GAAE,GACPuyC,EAAA/+B,QAAQ0rD,gBACR3sB,EAAA/+B,QAAQ2rD,gBACZ73C,GAQFqnC,EAAS3uD,GAAE,IAGT4lC,GAAUx3C,EAAAkH,KAAKhR,MACjBgjC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgzC,MAAOxkC,EAAMjnC,EAAO0D,IAAI,IACtD65E,GAAO,GACGh4B,EAAO5lC,GAAE,MACnBsnB,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ4rD,QAAS93C,IAI9Bse,EAAO5lC,GAAE,KAClBsnB,EAAOjnC,EAAO+mC,MACZunC,EAAS3uD,GAAE,GAAqBuyC,EAAA/+B,QAAQ6rD,UAAY9sB,EAAA/+B,QAAQ8rD,UAC5D5+E,KAAKo9E,uBAAuBx2C,EAAMqnC,IAEpCiP,GAAO,GAKHjP,EAAS3uD,GAAE,KAET2uD,EAASriC,KAAOsZ,EAAOtZ,OACzBhF,EAAO5mC,KAAKo9E,uBAAuBx2C,EAAMqnC,GACzCiP,GAAO,GAMfl9E,KAAKsvE,YAAcpqB,EACZg4B,EACHl9E,KAAKo9E,uBAAuBx2C,EAAMse,GAClCte,IAGNuoC,EAAAltE,UAAAm6E,2BAAA,SACEpyC,EACA44B,EACAmY,GAEA,IAAI8D,GAAqC,EAAd9D,EAC3B,OAAQ/wC,EAAWib,eACjB,KAAKt3C,EAAAghD,cAAcmwB,OACnB,KAAKnxE,EAAAghD,cAAc2G,GACjB,IAAIlrC,EAAOpqB,KAAK0wE,YACZxrB,EAASllD,KAAKqS,SAASmuD,YACzBp2D,OAAO4/B,EAAWkb,QAClB96B,EAAKg6C,eACLh6C,EAAK3B,yBAEP,OAAKy8B,EACEllD,KAAKs0E,kBAAkBtqC,EAAWA,WAAYkb,EAA4B,EAApB25B,GADzC7+E,KAAKL,OAAO8rC,cAGlC,KAAK99B,EAAAghD,cAAc4V,QACjBn6D,QAAQ4/B,EAAWkb,QACnB,IAAIte,EAAO5mC,KAAKs0E,kBAAkBtqC,EAAWA,WAAY44B,EAAemc,WAAYF,GAChF5/D,EAAOjf,KAAKsvE,YAChB,GAAItvE,KAAK0wE,YAAY9F,UAAUhkC,EAAM3nB,GACnCjf,KAAKiN,KACHQ,EAAAhD,eAAeu0E,yBACfh1C,EAAWA,WAAWj/B,YAEnB,IAAK/K,KAAK0U,QAAQiB,SAAU,CACjC,IAAIhW,EAASK,KAAKL,OAEds/E,GADA70D,EAAOpqB,KAAK0wE,aACK3H,oBAAoB9pD,GAAM2I,MAC1CwC,EAAKihD,YAAYzkC,EAAM3nB,IAAOmL,EAAKw+C,aAAaqW,EAAWpxE,EAAAw5D,WAAWiE,SAC3ElhD,EAAKw+C,aAAaqW,EAAWpxE,EAAAw5D,WAAW9C,SACxC39B,EAAOjnC,EAAOyqC,GACZzqC,EAAO6nC,UAAUy3C,EAAWr4C,GAC5BjnC,EAAO2nC,UAAU23C,EAAWhgE,EAAKw0C,gBACjC9zD,EAAO8rC,eAIX,OADAzrC,KAAKsvE,YAActvE,KAAKsvE,YAAYjd,gBAC7BzrB,EAET,QAASx8B,QAAO,GAElB,OAAOpK,KAAKL,OAAO8rC,eAQrB0jC,EAAAltE,UAAAo6E,wBAAA,SACEryC,EACA44B,EACAmY,GAEA,IAIImE,EACAC,EACAC,EACAC,EACAC,EAEA14C,EAVAjnC,EAASK,KAAKL,OACdonC,EAAOiD,EAAWjD,KAClBC,EAAQgD,EAAWhD,MASnBu4C,GAAW,EAEXl6B,EAAWrb,EAAWqb,SAC1B,OAAQA,GACN,KAAKjD,EAAAC,MAAMkV,SAKT,GAJA2nB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAayC,IAC5C,CACZ42B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAKrB,GAFA2zC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASyzC,MAAOqT,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS2zC,MAAOmT,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS2zC,MACTla,EAAAz5B,SAASyzC,MACbqT,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS0zC,MAAOoT,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS4zC,MACTna,EAAAz5B,SAAS0zC,MACboT,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS4zC,MAAOkT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6zC,MAAOiT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8zC,MAAOgT,EAAUE,GAC/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAMmV,YAKT,GAJA0nB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaqC,IAC5C,CACZg3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAKrB,GAFA2zC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASq0C,MAAOyS,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASu0C,MACT9a,EAAAz5B,SAASq0C,MACbyS,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASu0C,MAAOuS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASs0C,MAAOwS,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASw0C,MACT/a,EAAAz5B,SAASs0C,MACbwS,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASw0C,MAAOsS,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASy0C,MAAOqS,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS00C,MAAOoS,EAAUE,GAC/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAMoV,gBAKT,GAJAynB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa0C,IAC5C,CACZ22B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAKrB,GAFA2zC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,KAAMo0E,EAASzzE,WAAY2zE,EAAU3zE,YAEzD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+zC,MAAO+S,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASi0C,MACTxa,EAAAz5B,SAAS+zC,MACb+S,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASi0C,MAAO6S,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASg0C,MAAO8S,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASk0C,MACTza,EAAAz5B,SAASg0C,MACb8S,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk0C,MAAO4S,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASm0C,MAAO2S,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASo0C,MAAO0S,EAAUE,GAC/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAMqV,mBAKT,GAJAwnB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAasC,IAC5C,CACZ+2B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAKrB,GAFA2zC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,KAAMo0E,EAASzzE,WAAY2zE,EAAU3zE,YAEzD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS20C,MAAOmS,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS60C,MACTpb,EAAAz5B,SAAS20C,MACbmS,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS60C,MAAOiS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS40C,MAAOkS,EAAUE,GAC/C,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS80C,MACTrb,EAAAz5B,SAAS40C,MACbkS,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS80C,MAAOgS,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+0C,MAAO+R,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASg1C,MAAO8R,EAAUE,GAC/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAGF,KAAKw+C,EAAAC,MAAMwV,qBACX,KAAKzV,EAAAC,MAAMsV,cAUT,GAJAunB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZjqB,GAAYjD,EAAAC,MAAMsV,eAAiB33D,KAAKsvE,YAAYhwD,GAAE,KAExD,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAamC,IAC5C,CACZk3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAQN,GAFAo1C,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAW85B,EAASzzE,WAAY2zE,EAAU3zE,YAE/F1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6yC,MAAOiU,EAAUE,GAC/C,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS8yC,MACTrZ,EAAAz5B,SAAS6yC,MACbiU,EACAE,GAEF,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8yC,MAAOgU,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASqzC,MAAOyT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASszC,MAAOwT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ4sD,gBAC1B//E,EAAOmnC,OAAO+qB,EAAAz5B,SAASunD,WAAYT,EAAUE,IAE/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAMyV,0BACX,KAAK1V,EAAAC,MAAMuV,mBAKT,GAJAsnB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZjqB,GAAYjD,EAAAC,MAAMuV,oBAAsB53D,KAAKsvE,YAAYhwD,GAAE,KAE7D,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaoC,IAC5C,CACZi3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAQN,GAFAo1C,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAW85B,EAASzzE,WAAY2zE,EAAU3zE,YAE/F1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAEhB,OAlBEyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAUIs4C,EAAW7oE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+yC,MAAO+T,EAAUE,GAC/C,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASgzC,MACTvZ,EAAAz5B,SAAS+yC,MACb+T,EACAE,GAEF,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgzC,MAAO8T,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASuzC,MAAOuT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASwzC,MAAOsT,EAAUE,GAC/C,MAEF,QACEx4C,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ8sD,gBAC1BjgF,EAAOmnC,OAAO+qB,EAAAz5B,SAASynD,WAAYX,EAAUE,IAE/C,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlBzrC,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAM0W,OACT,OAAO/4D,KAAK8/E,kBAAkB/4C,EAAMC,EAAO47B,GAE7C,KAAKxgB,EAAAC,MAAM2W,YAAaumB,GAAW,EACnC,KAAKn9B,EAAAC,MAAMjyC,KAKT,GAJA8uE,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa0B,KAC5C,CACZ23B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFH,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,OAC7C,CAGL,GAFAC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk9C,OAAQ4J,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS2nD,OACTluB,EAAAz5B,SAASk9C,OACb4J,EACAE,GAEF,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS2nD,OAAQb,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS4nD,OAAQd,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6nD,OAAQf,EAAUE,GAChD,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM4W,aAAcsmB,GAAW,EACpC,KAAKn9B,EAAAC,MAAM/xC,MAKT,GAJA4uE,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa2B,KAC5C,CACZ03B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFH,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8nD,OAAQhB,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS+nD,OACTtuB,EAAAz5B,SAAS8nD,OACbhB,EACAE,GAEF,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+nD,OAAQjB,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgoD,OAAQlB,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASioD,OAAQnB,EAAUE,GAChD,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM6W,gBAAiBqmB,GAAW,EACvC,KAAKn9B,EAAAC,MAAM2V,SAKT,GAJAknB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa4B,KAC5C,CACZy3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFL,EAAWl/E,KAAKo9E,uBAAuB8B,EAAUC,GACjDC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,OAC7C,CAGL,GAFAC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASi1C,OAAQ6R,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASkoD,OACTzuB,EAAAz5B,SAASi1C,OACb6R,EACAE,GAEF,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASkoD,OAAQpB,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASmoD,OAAQrB,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASooD,OAAQtB,EAAUE,GAChD,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM8W,yBAA0BomB,GAAW,EAChD,KAAKn9B,EAAAC,MAAM0V,kBAKT,GAJAmnB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa6B,KAC5C,CACZw3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,IAAIljB,OAAQ,EAGZ,GAAyB,IAArBvoB,KAAKsvE,YAAY74D,MAGnB,GAFA2oE,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOt5B,EAAAkH,KAAK/Q,IAAG,GAClDw7E,EAAYr/E,KAAKsvE,cACX/mD,EAAWvoB,KAAKgwE,gBAAiB,CAErC,KADIyQ,EAAYzgF,KAAKwlB,QAAQ3L,aAAarM,EAAAxK,cAAcwE,QACxC,CACdxH,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,SAEpB67B,EAAOjnC,EAAO8rC,cACd,MAGF,KADIxpC,EAAYw+E,EAAU3hE,QAAU2hE,EAAU3hE,QAAQ5d,IAAIsM,EAAAxK,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,aAEpB67B,EAAOjnC,EAAO8rC,cACd,MAEFrhC,OAAOnI,EAAUwU,MAAQm7C,EAAA9gD,YAAYkN,oBACrChe,KAAKgwE,eAAiBznD,EAAWvoB,KAAKqS,SAAS4L,gBAAmChc,EAAW,YAc/F,GARAi9E,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCl/E,KAAKsvE,YAAa5hE,EAAAkH,KAAK9Q,KACvB,GAAO,EACPijC,GAEFo4C,EAAWn/E,KAAKsvE,YAChB8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOt5B,EAAAkH,KAAK9Q,IAAG,GAClDu7E,EAAYr/E,KAAKsvE,cACX/mD,EAAWvoB,KAAKiwE,gBAAiB,CAErC,KADIwQ,EAAYzgF,KAAKwlB,QAAQ3L,aAAarM,EAAAxK,cAAcuE,OACxC,CACdvH,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,QAEpB67B,EAAOjnC,EAAO8rC,cACd,MAGF,KADIxpC,EAAYw+E,EAAU3hE,QAAU2hE,EAAU3hE,QAAQ5d,IAAIsM,EAAAxK,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,YAEpB67B,EAAOjnC,EAAO8rC,cACd,MAEFrhC,OAAOnI,EAAUwU,MAAQm7C,EAAA9gD,YAAYkN,oBACrChe,KAAKiwE,eAAiB1nD,EAAWvoB,KAAKqS,SAAS4L,gBAAmChc,EAAW,MAM/F2kC,EAHIre,GAAYvoB,KAAKw1E,gBAAgBjtD,GAG9BvoB,KAAK0gF,eAAen4D,EAAU,CAAE22D,EAAUE,GAAap1C,GAFvDrqC,EAAO8rC,cAIhB,MAEF,KAAK2W,EAAAC,MAAM+W,aAAcmmB,GAAW,EACpC,KAAKn9B,EAAAC,MAAM4V,MAKT,GAJAinB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa8B,KAC5C,CACZu3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFL,EAAWl/E,KAAKo9E,uBAAuB8B,EAAUC,GACjDC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASuoD,OAAQzB,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASwoD,OACT/uB,EAAAz5B,SAASuoD,OACbzB,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASwoD,OAAQ1B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASs1C,OAAQwR,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASyoD,OACThvB,EAAAz5B,SAASs1C,OACbwR,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASyoD,OAAQ3B,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS0oD,OAAQ5B,EAAUE,GAChD,MAEF,QACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS2oD,OAAQ7B,EAAUE,GAChD,MAEF,QACEh1E,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMgX,eAAgBkmB,GAAW,EACtC,KAAKn9B,EAAAC,MAAM6V,QAKT,GAJAgnB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,GACxCuc,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa+B,KAC5C,CACZs3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFL,EAAWl/E,KAAKo9E,uBAAuB8B,EAAUC,GACjDC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OAIA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASu1C,OAAQuR,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS4oD,OACTnvB,EAAAz5B,SAASu1C,OACbuR,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS4oD,OAAQ9B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASw1C,OAAQsR,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS6oD,OACTpvB,EAAAz5B,SAASw1C,OACbsR,EACAE,GAEF,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6oD,OAAQ/B,EAAUE,GAChD,MAEF,QAEE,KADI72D,EAAWvoB,KAAK8vE,gBACL,CAEb,KADI2Q,EAAYzgF,KAAKwlB,QAAQ3L,aAAarM,EAAAxK,cAAcwE,QACxC,CACdxH,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,SAEpB67B,EAAOjnC,EAAO8rC,cACd,MAGF,KADIxpC,EAAYw+E,EAAU3hE,QAAU2hE,EAAU3hE,QAAQ5d,IAAIsM,EAAAxK,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,aAEpB67B,EAAOjnC,EAAO8rC,cACd,MAEFrhC,OAAOnI,EAAUwU,MAAQm7C,EAAA9gD,YAAYkN,oBACrChe,KAAK8vE,eAAiBvnD,EAAWvoB,KAAKqS,SAAS4L,gBAAmChc,EAAW,MAK7F2kC,EAHIre,GAAYvoB,KAAKw1E,gBAAgBjtD,GAG9BvoB,KAAK0gF,eAAen4D,EAAU,CAAE22D,EAAUE,GAAap1C,GAFvDrqC,EAAO8rC,cAIhB,MAEF,QAEE,KADIljB,EAAWvoB,KAAK+vE,gBACL,CACb,IAAI0Q,EASAx+E,EARJ,KADIw+E,EAAYzgF,KAAKwlB,QAAQ3L,aAAarM,EAAAxK,cAAcuE,OACxC,CACdvH,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,QAEpB67B,EAAOjnC,EAAO8rC,cACd,MAGF,KADIxpC,EAAYw+E,EAAU3hE,QAAU2hE,EAAU3hE,QAAQ5d,IAAIsM,EAAAxK,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqN,MACHI,EAAAhD,eAAeq3D,mBACf93B,EAAWj/B,MAAO,YAEpB67B,EAAOjnC,EAAO8rC,cACd,MAEFrhC,OAAOnI,EAAUwU,MAAQm7C,EAAA9gD,YAAYkN,oBACrChe,KAAK+vE,eAAiBxnD,EAAWvoB,KAAKqS,SAAS4L,gBAAmChc,EAAW,MAK7F2kC,EAHIre,GAAYvoB,KAAKw1E,gBAAgBjtD,GAG9BvoB,KAAK0gF,eAAen4D,EAAU,CAAE22D,EAAUE,GAAap1C,GAFvDrqC,EAAO8rC,cAIhB,MAEF,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMiX,yBAA0BimB,GAAW,EAChD,KAAKn9B,EAAAC,MAAMgW,kBAKT,GAJA6mB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa2C,aAC5C,CACZ02B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAKrB,OAFA2zC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,YACTtvE,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASm1C,OAAQ2R,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+oD,OAAQjC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS+oD,OACTtvB,EAAAz5B,SAASm1C,OACb2R,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMkX,+BAAgCgmB,GAAW,EACtD,KAAKn9B,EAAAC,MAAMiW,wBAKT,GAJA4mB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAauC,aAC5C,CACZ82B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAMrB,OAHAyzC,EAAWl/E,KAAKo9E,uBAAuB8B,EAAUC,GACjDC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,YACTtvE,KAAKsvE,YAAY74D,MACvB,OACA,OAIA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASo1C,OAAQ0R,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASipD,OAAQnC,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASipD,OACTxvB,EAAAz5B,SAASo1C,OACb0R,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASq1C,OAAQyR,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASkpD,OAAQpC,EAAUE,GAChD,MAEF,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASkpD,OACTzvB,EAAAz5B,SAASq1C,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMmX,2CAA4C+lB,GAAW,EAClE,KAAKn9B,EAAAC,MAAMkW,oCAKT,GAJA2mB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAawC,eAC5C,CACZ62B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAMrB,OAHAyzC,EAAWl/E,KAAKo9E,uBAAuB8B,EAAUC,GACjDC,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,YACTtvE,KAAKsvE,YAAY74D,MACvB,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASq1C,OAAQyR,EAAUE,GAElD,OACA,OACA,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASq1C,OAAQyR,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASkpD,OAAQpC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASkpD,OACTzvB,EAAAz5B,SAASq1C,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMoX,iBAAkB8lB,GAAW,EACxC,KAAKn9B,EAAAC,MAAMmW,UAKT,GAJA0mB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAagC,aAC5C,CACZq3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFH,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk1C,OAAQ4R,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASmpD,OAAQrC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASmpD,OACT1vB,EAAAz5B,SAASk1C,OACb4R,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMqX,WAAY6lB,GAAW,EAClC,KAAKn9B,EAAAC,MAAMoW,IAKT,GAJAymB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaiC,YAC5C,CACZo3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFH,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASopD,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASopD,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASqpD,MAAOvC,EAAUE,GAC/C,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASqpD,MACT5vB,EAAAz5B,SAASopD,MACbtC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMsX,aAAc4lB,GAAW,EACpC,KAAKn9B,EAAAC,MAAMqW,MAKT,GAJAwmB,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAese,SACvD/B,EAAWn/E,KAAKsvE,YAGZtvE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAC5C,IAAIqP,EAEEnB,EADN,GADImB,EAAiBwwD,EAASxwD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAakC,aAC5C,CACZm3B,EAAO5mC,KAAKw/E,sBAAsBhyD,EAAUuZ,EAAMm4C,EAAUl4C,EAAOgD,GACnE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAGrB,GAAI8zC,EACFH,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAAQ,GAClDE,EAAYr/E,KAAKsvE,gBACZ,CAGL,GAFA8P,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,GAC1CE,EAAYr/E,KAAKsvE,cACbgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkB4rB,EAAUE,GAAW,IAiB3D,OALAr/E,KAAKqN,MACHI,EAAAhD,eAAeg1E,8CACfz1C,EAAWj/B,MAAO,IAAKo0E,EAASzzE,WAAY2zE,EAAU3zE,YAExD1L,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,cAhBdyzC,EAAWl/E,KAAKm9E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACPv4C,GAEFq4C,EAAYp/E,KAAKm9E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACPt4C,GAWN,OAAQhnC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASspD,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASspD,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASupD,OAAQzC,EAAUE,GAChD,MAEF,OACA,OACEx4C,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASupD,OACT9vB,EAAAz5B,SAASspD,OACbxC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAp/E,KAAKqN,MACHI,EAAAhD,eAAe22E,2CACfp3C,EAAWj/B,MAAOq3C,EAAAiV,sBAAsBrtB,EAAWqb,UAAWrlD,KAAKsvE,YAAY5jE,YAE1E/L,EAAO8rC,cAEhB,QACErhC,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAKF,KAAK2W,EAAAC,MAAMwW,oBACT,IAAIzuC,EAAOpqB,KAAK0wE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAemc,WAAYF,GACnEM,EAAWn/E,KAAKsvE,YAEhB,IAAIsS,EAAYx3D,EAAK89C,OAOrB,GANAloE,KAAK0wE,YAAckR,EACnBA,EAAU/W,qBAAqBqU,GAC/BE,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBl1D,EAAAkH,KAAKhR,MAAQg/D,GAAkBl1D,EAAAkH,KAAKG,KACxDqqE,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EACnBpqB,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxBgjC,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUC,GAC7Bn/E,KAAK85E,cAAcsF,EAAWC,GAC9B1/E,EAAOyD,IAAI,SAIR,GAAI+7E,EAASvM,UAAW,CAC7B,IAAIkP,EAAyB9hF,KAAK6vE,oBAAoBr7D,IAAI0qE,GACtD6C,EAA0B/hF,KAAK6vE,oBAAoBr7D,IAAI4qE,GACvDlJ,EAAO9rD,EAAKi+C,aAAa8W,GAC7BD,EAAWv/E,EAAO6nC,UAAU0uC,EAAKtuD,MAAOs3D,GAIxC,IAAI8C,GAAmB,EACnBF,GAA0BC,EACvBD,GAGH1C,EAAYp/E,KAAK6yE,WAAWuM,GAC5B2C,GAA0B,GAH1BC,GAAmB,EAKC,GAAXjH,IACXqE,EAAYp/E,KAAKiiF,gBAAgB7C,EAAWwC,EAAWx3D,IAGzD,IAAI83D,EAAa,IAAIj7E,MACjB66E,GACFI,EAAW/Q,QACTnxE,KAAKmiF,YACHxiF,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,kBAI5C2rB,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EAEnBwc,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUC,GAC7BC,EACA4C,EACIhiF,KAAK6yE,WACHlzE,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,iBAExC9zD,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,kBAExCquB,GAA0BC,IAAyB/hF,KAAK6vE,oBAAoB76D,IAAI4xB,GAChFsvC,GAAM9rD,EAAK0+C,cAAcoN,QAS7B,GALAkJ,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EAGfwc,EAAOjnC,EAAO20C,gBAAgB4qC,GAAU,EAAM,GAChDt4C,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUl/E,KAAKsvE,aAClC8P,EACAx4C,OAIG,CACL,IAAIs0C,EAAY9wD,EAAKi+C,aAAa8W,GAC7B/0D,EAAKihD,YAAY6T,EAAUC,IAAW/0D,EAAKw+C,aAAasS,EAAUtzD,MAAO/Z,EAAAw5D,WAAWiE,SACrFlhD,EAAKwgD,UAAUsU,EAAUC,IAAW/0D,EAAKw+C,aAAasS,EAAUtzD,MAAO/Z,EAAAw5D,WAAW9C,SACtF39B,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcn6E,EAAO6nC,UAAU0zC,EAAUtzD,MAAOs3D,GAAWC,GAChEC,EACAz/E,EAAO2nC,UAAU4zC,EAAUtzD,MAAOu3D,EAAS1rB,iBAIjDzzD,KAAKsvE,YAAc6P,EACnB,MAEF,KAAK/8B,EAAAC,MAAMyW,QACL1uC,EAAOpqB,KAAK0wE,YACZmO,EAAqC,GAAd9D,EAC3BmE,EAAWl/E,KAAKs0E,kBAAkBvtC,EAAM67B,EAAemc,WAAYF,GACnEM,EAAWn/E,KAAKsvE,YAEZsS,EAAYx3D,EAAK89C,OAOrB,GANAloE,KAAK0wE,YAAckR,EACnBA,EAAU5W,sBAAsBkU,GAChCE,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOm4C,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRvc,GAAkBl1D,EAAAkH,KAAKhR,MAAQg/D,GAAkBl1D,EAAAkH,KAAKG,KACxDqqE,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWD,GACpEyC,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EACnBpqB,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxBgjC,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUC,GAC7Bx/E,EAAOyD,IAAI,GACXpD,KAAK85E,cAAcsF,EAAWC,SAI3B,GAAIF,EAASvM,UAAW,CACzBkP,EAAyB9hF,KAAK6vE,oBAAoBr7D,IAAI0qE,GACtD6C,EAA0B/hF,KAAK6vE,oBAAoBr7D,IAAI4qE,GACvDlJ,EAAO9rD,EAAKi+C,aAAa8W,GAC7BD,EAAWv/E,EAAO6nC,UAAU0uC,EAAKtuD,MAAOs3D,GAIxC,IAAIkD,GAAmB,EACnBN,GAA0BC,EACvBD,GAGH1C,EAAYp/E,KAAK6yE,WAAWuM,GAC5B2C,GAA0B,GAH1BK,GAAmB,EAKC,GAAXrH,IACXqE,EAAYp/E,KAAKiiF,gBAAgB7C,EAAWwC,EAAWx3D,IAGrD83D,EAAa,IAAIj7E,MACjB66E,GAGFI,EAAW/Q,QACTnxE,KAAKmiF,YACHxiF,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,kBAI5C2rB,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EAEnBwc,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUC,GAC7BiD,EACIpiF,KAAK6yE,WACHlzE,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,iBAExC9zD,EAAO2nC,UAAU4uC,EAAKtuD,MAAOu3D,EAAS1rB,gBAC1C2rB,IAEE0C,GAA0BC,IAAyB/hF,KAAK6vE,oBAAoB76D,IAAI4xB,GAChFsvC,GAAM9rD,EAAK0+C,cAAcoN,QAS7B,GALAkJ,EAAYp/E,KAAK6hF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUtY,mBACVtpE,KAAK0wE,YAActmD,EAGfwc,EAAOjnC,EAAO20C,gBAAgB4qC,GAAU,EAAM,GAChDt4C,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcoF,EAAUC,GAC7Bv4C,EACAw4C,OAIG,CACDlE,EAAY9wD,EAAK2+C,oBAAoBoW,GACpC/0D,EAAKihD,YAAY6T,EAAUC,IAAW/0D,EAAKw+C,aAAasS,EAAUtzD,MAAO/Z,EAAAw5D,WAAWiE,SACrFlhD,EAAKwgD,UAAUsU,EAAUC,IAAW/0D,EAAKw+C,aAAasS,EAAUtzD,MAAO/Z,EAAAw5D,WAAW9C,SACtF39B,EAAOjnC,EAAOyqC,GACZpqC,KAAK85E,cAAcn6E,EAAO6nC,UAAU0zC,EAAUtzD,MAAOs3D,GAAWC,GAChEx/E,EAAO2nC,UAAU4zC,EAAUtzD,MAAOu3D,EAAS1rB,gBAC3C2rB,GAINp/E,KAAKsvE,YAAc6P,EACnB,MAEF,QACE/0E,QAAO,GACPw8B,EAAO5mC,KAAKL,OAAO8rC,cAGvB,IAAK8zC,EAAU,OAAO34C,EACtB,IAAIv0B,EAAWrS,KAAKqS,SAChBgb,EAASrtB,KAAKqS,SAASywD,kBAAkB/7B,EAAM/mC,KAAK0wE,aACxD,OAAKrjD,EACErtB,KAAKqiF,eACVh1D,EACAuZ,EACAG,EACA10B,EAASiuD,sBACTjuD,EAASkuD,yBACTqC,GAAkBl1D,EAAAkH,KAAKG,MAPLpV,EAAO8rC,eAW7B0jC,EAAAltE,UAAAqgF,qBAAA,SACElb,EACA9lE,EACA0xE,EACAjN,GAIA,OAAO/lE,KAAK0gF,eAAetZ,EAAkB,CAAE4L,GAAajN,GAAY,IAG1EoJ,EAAAltE,UAAAu9E,sBAAA,SACEpY,EACArgC,EACAm4C,EACAl4C,EACA++B,GAEA,IAAIsZ,EACJ,GAAIjY,EAAiB9nD,GAAG9R,EAAAnL,YAAY4iB,UAAW,CAC7C,IAAItS,EAAgBvI,OAAOg9D,EAAiBlzD,QAAS9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,OAC9FwgE,EAAYjY,EAAiBnzD,UAAU+V,eAAe,QAUtDq1D,EAAYjY,EAAiBnzD,UAAU+V,eAAe,GAExD,IAAIo1D,EAAYp/E,KAAKs0E,kBAAkBttC,EAAOq4C,EAAS,GACvD,OAAOr/E,KAAK0gF,eAAetZ,EAAkB,CAAE8X,EAAUE,GAAarZ,IAGxEoJ,EAAAltE,UAAA69E,kBAAA,SAAkB91C,EAAwB8wC,EAA6BlY,GACrE,IACIvwD,EADUrS,KAAKwlB,QACInT,SACnB+X,EAAOpqB,KAAK0wE,YACZrjD,EAAShb,EAASywD,kBAAkB94B,EAAY5f,GACpD,IAAKiD,EAAQ,OAAOrtB,KAAKL,OAAO8rC,cAChC,IAIIonB,EAJA0vB,EAAiBlwE,EAASiuD,sBAC1Bna,EAAoB9zC,EAASkuD,yBAIjC,OAAQlzC,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAYmQ,OAEf,IAAKjhB,KAAKozE,cAAsB/lD,GAAS,OAAOrtB,KAAKL,OAAO8rC,cAG9D,KAAKmmB,EAAA9gD,YAAY8N,MAIjB,KAAKgzC,EAAA9gD,YAAY+W,MACfgrC,EAAmCxlC,EAAQpO,KAC3C,MAEF,KAAK2yC,EAAA9gD,YAAYyN,mBACf,IAAIE,EAAsC4O,EAAQ5O,gBAClD,IAAKA,EAKH,OAJAze,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACfx4C,EAAWj/B,MAAkBsiB,EAAQjb,cAEhCpS,KAAKL,OAAO8rC,cAGrB,KADI/f,EAAiB1rB,KAAKqS,SAAS4L,gBAAgBQ,EAAiB,KAAM5U,EAAA23D,UAAW5zD,EAAAwyD,WAAWO,SAC3E,OAAO3gE,KAAKL,OAAO8rC,cACxCrhC,OAAyD,GAAlDshB,EAAezX,UAAU+V,eAAe7d,QAC/C0mD,EAAannC,EAAezX,UAAU+V,eAAe,GACrD,MAEF,KAAK4nC,EAAA9gD,YAAY4N,SACf,IAAIgN,EACJ,KADIA,EAA4B2B,EAAQ3B,gBAMtC,OAJA1rB,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACfx4C,EAAWj/B,MAAkBsiB,EAAQjb,cAEhCpS,KAAKL,OAAO8rC,cAErBrhC,OAAyD,GAAlDshB,EAAezX,UAAU+V,eAAe7d,QAC/C0mD,EAAannC,EAAezX,UAAU+V,eAAe,GACrD,MAEF,KAAK4nC,EAAA9gD,YAAY+N,MACf,GAAIsnC,EAAmB,CACrB,IAAIs8B,EAAcr4D,EAAK9K,GAAE,OAcrBojE,EAAqBr1D,EAAQF,eAAeykC,EAAArkD,aAAauB,YAAa2zE,GAC1E,IAAKC,EAaH,OAZyBr1D,EAAQF,eAAeykC,EAAArkD,aAAasB,YAAa4zE,GAOxEziF,KAAKqN,MACHI,EAAAhD,eAAek4E,+CACf34C,EAAWj/B,MAAesiB,EAAQjb,cAPpCpS,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfj4B,EAAWj/B,MAAesiB,EAAQjb,cAQ/BpS,KAAKL,OAAO8rC,cAErBrhC,OAAqD,GAA9Cs4E,EAAWzuE,UAAU+V,eAAe7d,QAC3C0mD,EAAa6vB,EAAWzuE,UAAU+V,eAAe,GACjD,MAIJ,QAKE,OAJAhqB,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,cAMvB,OADArhC,OAAOyoD,GAAcnlD,EAAAkH,KAAKG,MACnB/U,KAAKqiF,eACVh1D,EACArtB,KAAKs0E,kBAAkBwG,EAAiBjoB,EAAY,IACpD7oB,EACAu4C,EACAp8B,EACAyc,GAAkBl1D,EAAAkH,KAAKG,OAK3Bo6D,EAAAltE,UAAAogF,eAAA,SAEEh1D,EAEA2lD,EAEA8H,EAEAyH,EAEAK,EAEAC,GAEA,IAAIljF,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAKhB,OAAQrjD,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAY+W,MACf,OAAIuC,EAAKo/C,YAAoBn8C,EAAQzF,MAAO/Z,EAAAw5D,WAAW6U,UAAU,IAC/Dl8E,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACf1H,EAAgB/vE,MAAOsiB,EAAOjb,cAEhCpS,KAAKsvE,YAAcuT,EAAcx1D,EAAQpO,KAAOvR,EAAAkH,KAAKG,KAC9CpV,EAAO8rC,eAETzrC,KAAK8iF,oBAA2Bz1D,EAAQ2lD,EAAW6P,GAE5D,KAAKjxB,EAAA9gD,YAAYmQ,OACf,OAAKjhB,KAAKozE,cAAsB/lD,GAC5BA,EAAOzL,MAAMpU,EAAAnL,YAAYod,MAAQjS,EAAAnL,YAAY+f,WAC/CpiB,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACf1H,EAAgB/vE,MAChBsiB,EAAOjb,cAETpS,KAAKsvE,YAAcuT,EAAex1D,EAAQpO,KAAOvR,EAAAkH,KAAKG,KAC/CpV,EAAO8rC,eAETzrC,KAAKu1E,qBAA6BloD,EAAQ2lD,EAAW6P,GAVZljF,EAAO8rC,cAYzD,KAAKmmB,EAAA9gD,YAAY8N,MACf,IAAIy1D,EAA0BhnD,EAAQgnD,gBACtC,OACUhnD,EAAQ/N,GAAG9R,EAAAnL,YAAY+f,WAE7BgI,EAAKg6C,eAAe9kD,GAAG9R,EAAAnL,YAAYugB,cACnCyxD,EASGr0E,KAAK+iF,oBAA2B11D,EACrC2lD,EAEAhzE,KAAKs0E,kBAAkBlqE,OAAOm4E,GAAiBviF,KAAK0U,QAAQI,WAC5D+tE,IAVA7iF,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACf1H,EAAgB/vE,MAAesiB,EAAQjb,cAElCzS,EAAO8rC,eASlB,KAAKmmB,EAAA9gD,YAAYyN,mBACXve,KAAK6vE,oBAAoBr7D,IAAIw+D,KAAYA,EAAYhzE,KAAKgjF,gBAAgBhQ,EAAW5oD,IACzF,IAAI3L,EAAsC4O,EAAQ5O,gBAClD,IAAKA,EAKH,OAJAze,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACf1H,EAAgB/vE,MAAOsiB,EAAOjb,cAEzBzS,EAAO8rC,cAGhB,KADI/f,EAAiB1rB,KAAKqS,SAAS4L,gBAAgBQ,EAAiB,KAAM5U,EAAA23D,UAAW5zD,EAAAwyD,WAAWO,SAC3E,OAAOhhE,EAAO8rC,cAEnC,IAAKo3C,EAAK,OAAO7iF,KAAK0gF,eAAeh1D,EAAgB,CAAEsnD,GAAa8H,GAEpE,IAAIt8D,EAAkBpU,OAA2BijB,EAAQ7O,iBAEzD,KADIiN,EAAiBzrB,KAAKqS,SAAS4L,gBAAgBO,EAAiB,KAAM3U,EAAA23D,UAAW5zD,EAAAwyD,WAAWO,SAC3E,OAAOhhE,EAAO8rC,cACnC,IACIw3C,GADA73C,EAAa3f,EAAexX,UAAUm3B,YACRqoB,eAClC,OAAO9zD,EAAO6pC,MAAM,KAAM,CACxBxpC,KAAK0gF,eAAeh1D,EAAgB,CAAEsnD,GAAa8H,GACnD96E,KAAK0gF,eAAej1D,EAAgB,KAAMqvD,IACzCmI,GAEL,KAAKrxB,EAAA9gD,YAAY4N,SAEf,IAAIgN,EACJ,GAFI1rB,KAAK6vE,oBAAoBr7D,IAAIw+D,KAAYA,EAAYhzE,KAAKgjF,gBAAgBhQ,EAAW5oD,MACrFsB,EAA4B2B,EAAQ3B,gBAMtC,OAJA1rB,KAAKqN,MACHI,EAAAhD,eAAe+3E,oEACf1H,EAAgB/vE,MAAOsiB,EAAOjb,cAEzBzS,EAAO8rC,cAGhB,IAAKo3C,EAAK,CACR,IAAIK,EAAWljF,KAAKs0E,kBAAkBlqE,OAAOm4E,GAAiBviF,KAAK0U,QAAQI,WAC3E,OAAO9U,KAAK0gF,eAAeh1D,EAAgB,CAAEw3D,EAAUlQ,GAAa8H,GAKlEmI,GADA73C,GADA3f,EAAiBrhB,OAAkBijB,EAAQ5B,iBACfxX,UAAUm3B,YACRqoB,eAFlC,IAAIhoC,EAGA03D,EAAWnjF,KAAKs0E,kBAAkBlqE,OAAOm4E,GAAiBviF,KAAK0U,QAAQI,WAEvEqmE,EADY/wD,EAAK2+C,oBAAoB39B,GACVxjB,MAC/B,OAAOjoB,EAAO6pC,MAAM,KAAM,CACxBxpC,KAAK0gF,eAAeh1D,EAAgB,CAClC/rB,EAAO6nC,UAAU2zC,EAAgBgI,GACjCnQ,GACC8H,GACH96E,KAAK0gF,eAAej1D,EAAgB,CAClC9rB,EAAO2nC,UAAU6zC,EAAgB8H,IAChCnI,IACFmI,GAEL,KAAKrxB,EAAA9gD,YAAY+N,MAEf,GADI7e,KAAK6vE,oBAAoBr7D,IAAIw+D,KAAYA,EAAYhzE,KAAKgjF,gBAAgBhQ,EAAW5oD,IACrFw4D,EAAiB,CACnB,IAAIH,EAAcr4D,EAAK9K,GAAE,OACrB0jD,EAAqB31C,EAAQF,eAAeykC,EAAArkD,aAAasB,YAAa4zE,GAC1E,IAAKzf,EAKH,OAJAhjE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACf6Y,EAAgB/vE,MAAOsiB,EAAOjb,cAEzBzS,EAAO8rC,cAEhB,IAAIi3C,EAAqBr1D,EAAQF,eAAeykC,EAAArkD,aAAauB,YAAa2zE,GAC1E,IAAKC,EAMH,OALA1iF,KAAKqN,MACHI,EAAAhD,eAAek4E,+CACf7H,EAAgB/vE,MAAOsiB,EAAOjb,cAEhCpS,KAAKsvE,YAAcuT,EAAM7f,EAAW/uD,UAAUm3B,WAAa19B,EAAAkH,KAAKG,KACzDpV,EAAO8rC,cAEhB,IAAIonB,EAAqBxlC,EAAQpO,KAE7BmkE,GADAD,EAAWnjF,KAAKs0E,kBAAkBlqE,OAAOm4E,GAAiBviF,KAAK0U,QAAQI,WACzD9U,KAAKs0E,kBAAkBsO,EAAiBl1E,EAAAkH,KAAKxR,IAAG,IAClE,GAAIy/E,EAAK,CACP,IAAIQ,EAAkBj5D,EAAKi+C,aAAaxV,GACpCywB,EAAmBl5D,EAAK2+C,oBAAoB/oE,KAAKsvE,aACjDlkC,EAAa43B,EAAW/uD,UAAUm3B,WAEtC,OADAhhB,EAAK0+C,cAAcua,GACZ1jF,EAAO6pC,MAAM,KAAM,CACxBxpC,KAAK0gF,eAAegC,EAAY,CAC9B/iF,EAAO6nC,UAAU67C,EAAgBz7D,MAAOu7D,GACxCxjF,EAAO6nC,UAAU87C,EAAiB17D,MAAOw7D,GACzCpQ,GACC8H,GACH96E,KAAK0gF,eAAe1d,EAAY,CAC9BrjE,EAAO2nC,UAAU+7C,EAAgBz7D,MAAOy7D,EAAgBpkE,KAAKw0C,gBAC7D9zD,EAAO2nC,UAAUg8C,EAAiB17D,MAAO07D,EAAiBrkE,KAAKw0C,iBAC9DqnB,IACF1vC,EAAWqoB,gBAEd,OAAOzzD,KAAK0gF,eAAegC,EAAY,CACrCS,EACAC,EACApQ,GACC8H,IAUX,OAJA96E,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfy5D,EAAgB/vE,OAEXpL,EAAO8rC,eAIR0jC,EAAAltE,UAAA6gF,oBAAR,SAEEh5D,EAEAkpD,EAEA6P,GAEA,IAAI5jE,EAAO6K,EAAM7K,KACjB7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACpB,IAAIqV,EAAOpqB,KAAK0wE,YACZ7mD,EAAaC,EAAMlC,MAQvB,GANI3I,EAAKK,GAAE,OACL8K,EAAKwgD,UAAUoI,EAAW/zD,GAAOmL,EAAKw+C,aAAa/+C,EAAYhc,EAAAw5D,WAAW9C,SACzEn6C,EAAKo+C,eAAe3+C,EAAYhc,EAAAw5D,WAAW9C,UAElDn6C,EAAKw+C,aAAa/+C,EAAYhc,EAAAw5D,WAAW8C,WAErClrD,EAAK2zD,UAAW,CAClB,IAAIjzE,EAASK,KAAKL,OACdmzE,EAAa7zD,EAAKw0C,eAEtB,OAAIrpC,EAAKs/C,eAAe7/C,EAAYhc,EAAAw5D,WAAW2T,cACzCh7E,KAAK6vE,oBAAoBr7D,IAAIw+D,IAC/BA,EAAYhzE,KAAKujF,mBACf5jF,EAAO2nC,UAAUzd,EAAYipD,GAC7BE,GAEE6P,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6nC,UAAU3d,EAAYmpD,KAEpChzE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAOypC,UAAUvf,EAAYmpD,MAGtCA,EAAYhzE,KAAKizE,kBACftzE,EAAO2nC,UAAUzd,EAAYipD,GAC7BE,GAEE6P,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6nC,UAAU3d,EAAYmpD,KAEpChzE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAOypC,UAAUvf,EAAYmpD,MAIxC5oD,EAAKo+C,eAAe3+C,EAAYhc,EAAAw5D,WAAW2C,wBAC3C5/C,EAAKw+C,aAAa/+C,EAAYhc,EAAAw5D,WAAWwB,UACpC7oE,KAAK6vE,oBAAoBr7D,IAAIw+D,KAAYA,EAAYhzE,KAAK6yE,WAAWG,IACtE6P,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6nC,UAAU3d,EAAYmpD,KAEpChzE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAOypC,UAAUvf,EAAYmpD,KAQxC,OAJI/zD,EAAKK,GAAG,MACL8K,EAAKihD,YAAY2H,EAAW/zD,GAC5BmL,EAAKo+C,eAAe3+C,EAAYhc,EAAAw5D,WAAWiE,SADRlhD,EAAKw+C,aAAa/+C,EAAYhc,EAAAw5D,WAAWiE,UAG/EuX,GACF7iF,KAAKsvE,YAAcrwD,EACZjf,KAAKL,OAAO6nC,UAAU3d,EAAYmpD,KAEzChzE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjB/U,KAAKL,OAAOypC,UAAUvf,EAAYmpD,KAMvC7D,EAAAltE,UAAAszE,qBAAR,SAEEh2D,EAEAyzD,EAEA6P,GAEA,IAAIljF,EAASK,KAAKL,OACdsf,EAAOM,EAAON,KAClB7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACpB,IAAI+9D,EAAa7zD,EAAKw0C,eAEtB,OAAIx0C,EAAK2zD,UACH5yE,KAAK6vE,oBAAoBr7D,IAAIw+D,GAC3B6P,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO2pC,WAAW/pB,EAAOnN,aACvBpS,KAAKujF,mBACH5jF,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,GACvCE,IAGJrzE,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,IACtCA,KAEH9yE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO2pC,WAAW/pB,EAAOnN,aAC9BpS,KAAKujF,mBACH5jF,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,GACvCE,KAKF6P,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO2pC,WAAW/pB,EAAOnN,aACvBpS,KAAKizE,kBACHtzE,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,GACvCE,IAGJrzE,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,IACtCA,KAEH9yE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO2pC,WAAW/pB,EAAOnN,aAC9BpS,KAAKizE,kBACHtzE,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,GACvCE,MAMRA,EAAYhzE,KAAKo9E,uBAAuBpK,EAAW/zD,GAC/C4jE,GACF7iF,KAAKsvE,YAAcrwD,EACZtf,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO2pC,WAAW/pB,EAAOnN,aAAc4gE,GACvCrzE,EAAO+nC,WAAWnoB,EAAOnN,aAAc0gE,IACtCA,KAEH9yE,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO2pC,WAAW/pB,EAAOnN,aAC9B4gE,MAOR7D,EAAAltE,UAAA8gF,oBAAA,SAEEp1D,EAEAqlD,EAEAmQ,EAEAN,GAEA,IAAIljF,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZ/J,EAAYh5C,EAAM1O,KAClBukE,EAAkB7c,EAAUlT,eAChCrpD,OAAOujB,EAAMzZ,OAAOuC,MAAQm7C,EAAA9gD,YAAY+N,OACxC,IAAIkL,EAAmB4D,EAAMzZ,OAAQ+K,KACjCwkE,EAAiB15D,EAAS0pC,eAE9B,GAAIkT,EAAUiM,WAAa7oD,EAAS6oD,UAAW,CAC7C,IAAI8Q,EAAWt5D,EAAKi+C,aAAat+C,GACjC,GAAI/pB,KAAK6vE,oBAAoBr7D,IAAIw+D,GAAY,CAC3C,GAAI6P,EAAK,CACP,IAAIc,EAAYv5D,EAAK2+C,oBAAoBpC,GAKzC,OAJKv8C,EAAKihD,YAAY2H,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAWiE,SACvFlhD,EAAKwgD,UAAUoI,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAW9C,SACxFn6C,EAAK0+C,cAAc4a,GACnB1jF,KAAKsvE,YAAc3I,EACZhnE,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO6mC,MAAMmgC,EAAUzU,SACrBvyD,EAAO6nC,UAAUk8C,EAAS97D,MAAOu7D,GACjCnjF,KAAKujF,mBACH5jF,EAAOioC,KAAK++B,EAAUzU,SAAUyU,EAAUrnD,GAAE,GAC1C3f,EAAO2nC,UAAUo8C,EAAS97D,MAAO67D,GACjCD,EAAiB71D,EAAMrC,cAEzB3rB,EAAO6nC,UAAUm8C,EAAU/7D,MAAOorD,IAEpCwQ,EAAiB71D,EAAMrC,cAEzB3rB,EAAO2nC,UAAUq8C,EAAU/7D,MAAO47D,IACjCA,GAIH,OAFAp5D,EAAK0+C,cAAc4a,GACnB1jF,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO6mC,MAAMmgC,EAAUzU,SAC5BvyD,EAAO6nC,UAAUk8C,EAAS97D,MAAOu7D,GACjCnjF,KAAKujF,mBACH5jF,EAAOioC,KAAK++B,EAAUzU,SAAUyU,EAAUrnD,GAAE,GAC1C3f,EAAO2nC,UAAUo8C,EAAS97D,MAAO67D,GACjCD,EAAiB71D,EAAMrC,cAEzB0nD,GAEFwQ,EAAiB71D,EAAMrC,cAI3B,GAAIu3D,EAAK,CACHc,EAAYv5D,EAAK2+C,oBAAoBpC,GAKzC,OAJKv8C,EAAKihD,YAAY2H,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAWiE,SACvFlhD,EAAKwgD,UAAUoI,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAW9C,SACxFn6C,EAAK0+C,cAAc4a,GACnB1jF,KAAKsvE,YAAc3I,EACZhnE,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO6mC,MAAMmgC,EAAUzU,SACrBvyD,EAAO6nC,UAAUk8C,EAAS97D,MAAOu7D,GACjCnjF,KAAKizE,kBACHtzE,EAAOioC,KAAK++B,EAAUzU,SAAUyU,EAAUrnD,GAAE,GAC1C3f,EAAO2nC,UAAUo8C,EAAS97D,MAAO67D,GACjCD,EAAiB71D,EAAMrC,cAEzB3rB,EAAO6nC,UAAUm8C,EAAU/7D,MAAOorD,IAEpCwQ,EAAiB71D,EAAMrC,cAEzB3rB,EAAO2nC,UAAUq8C,EAAU/7D,MAAO47D,IACjCA,GAIH,OAFAp5D,EAAK0+C,cAAc4a,GACnB1jF,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO6mC,MAAMmgC,EAAUzU,SAC5BvyD,EAAO6nC,UAAUk8C,EAAS97D,MAAOu7D,GACjCnjF,KAAKizE,kBACHtzE,EAAOioC,KAAK++B,EAAUzU,SAAUyU,EAAUrnD,GAAE,GAC1C3f,EAAO2nC,UAAUo8C,EAAS97D,MAAO67D,GACjCD,EAAiB71D,EAAMrC,cAEzB0nD,GAEFwQ,EAAiB71D,EAAMrC,cAK7B,GAAIu3D,EAAK,CACHc,EAAYv5D,EAAK2+C,oBAAoBpC,GAIzC,OAHKv8C,EAAKihD,YAAY2H,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAWiE,SACvFlhD,EAAKwgD,UAAUoI,EAAWrM,IAAYv8C,EAAKw+C,aAAa+a,EAAU/7D,MAAO/Z,EAAAw5D,WAAW9C,SACxFvkE,KAAKsvE,YAAc3I,EACZhnE,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO6mC,MAAMmgC,EAAUzU,SACrBixB,EACAxjF,EAAO6nC,UAAUm8C,EAAU/7D,MAAOorD,GAClCwQ,EAAiB71D,EAAMrC,cAEzB3rB,EAAO2nC,UAAUq8C,EAAU/7D,MAAO47D,IACjCA,GAGH,OADAxjF,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO6mC,MAAMmgC,EAAUzU,SAC5BixB,EACAnQ,EACAwQ,EAAiB71D,EAAMrC,eAO/B6jD,EAAAltE,UAAAq6E,sBAAA,SAEEtyC,EAEA44B,EAEAmY,GAGA,IAAIp7E,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAGhB,GAAI1mC,EAAWA,WAAWvzB,MAAQ9I,EAAA+I,SAASusC,MAAO,CAChD,IAAI2gC,EAAO5jF,KAAK0wE,YACZtM,EAAiBwf,EAAKxf,eAC1B,IAAKA,EAAe9kD,GAAG9R,EAAAnL,YAAYugB,aAKjC,OAJA5iB,KAAKqN,MACHI,EAAAhD,eAAeo5E,8FACf75C,EAAWj/B,OAENpL,EAAO8rC,cAGhB,IAAI94B,EAAgBvI,OAAOg6D,EAAelwD,QAAS9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,OAC5F,IAAIilE,EAAoB15E,OAAeuI,EAAeuZ,MAClDw4C,EAAYt6D,OAAOw5E,EAAKjf,YAAYn3D,EAAAxK,cAAcoC,QAClD2tE,EAAiB/yE,KAAK0U,QAAQq+D,eAO9BgR,EAAU/jF,KAAKgkF,kBACjBhkF,KAAKikF,kBAAkBH,EAAmB95C,GAC1CA,EAAWhnB,UACXgnB,EACArqC,EAAOyqC,GACLzqC,EAAO2nC,UAAUo9B,EAAU98C,MAAOmrD,GAClCpzE,EAAO2nC,UAAUo9B,EAAU98C,MAAOmrD,GAClC/yE,KAAK6yE,WACH7yE,KAAKm2E,eAAsBxjE,KAE9B,IAGHvI,OAAOpK,KAAK6vE,oBAAoBr7D,IAAIuvE,IACpC,IAAIpO,EAAyB,CAC3Bh2E,EAAOypC,UAAUs7B,EAAU98C,MAAOm8D,IAKpC,OAHA/jF,KAAKo2E,wBAA+BzjE,EAAegjE,GAG/CiO,EAAKhiE,MACP,QAGA5hB,KAAKqN,MACHI,EAAAhD,eAAey5E,kFACfl6C,EAAWj/B,OAENpL,EAAO8rC,gBAEhBm4C,EAAKzxE,IAAI,KACTnS,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACjBpV,EAAO6pC,MAAM,KAAMmsC,IAI5B,IAGI1hE,EACAkwE,EAJA92D,EAASrtB,KAAKqS,SAASywD,kBAAkB94B,EAAWA,WAAY5f,GACpE,IAAKiD,EAAQ,OAAO1tB,EAAO8rC,cAI3B,OAAQpe,EAAO5W,MAGb,KAAKm7C,EAAA9gD,YAAYkN,mBACf,IAAI/b,EAA+BorB,EAC/BpB,EAAgB+d,EAAW/d,cAG/B,GAAIhqB,EAAUoZ,aAAau2C,EAAA7gD,eAAeqE,SACxC,OAAOpV,KAAKokF,6BAA6BniF,EAAW+nC,EAAY44B,GAGlE,IAAIr6C,EAA4B,KAGhC,GAAI0D,EAAe,CACjB,IAAKhqB,EAAUqd,GAAG9R,EAAAnL,YAAY8S,SAK5B,OAJAnV,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACfr3B,EAAWA,WAAWj/B,MAAO9I,EAAUmQ,cAElCzS,EAAO8rC,cAEhBljB,EAAWvoB,KAAKqS,SAAS4yD,iCACvBhjE,EACAgqB,EACA7B,EAAKg6C,eAAelwD,OACpBrK,EAAA23D,QAAqBp3C,EAAK3B,yBAC1BuhB,OAIG,IAAI/nC,EAAUqd,GAAG9R,EAAAnL,YAAY8S,SAAU,CAI5C,IAHA,IAAIkvE,EAAgB,IAAIj9E,IACpB2lB,EAAqB3iB,OAAOnI,EAAU8qB,oBACtCk5C,EAAoBl5C,EAAmB5gB,OAClC9L,EAAI,EAAGA,EAAI4lE,IAAqB5lE,EACvCgkF,EAAclyE,IAAI4a,EAAmB1sB,GAAGO,KAAKqL,KAAM,MAGrD,IAAI20D,EAAiB3+D,EAAU0jE,iBAAiBpiB,WAC5CoR,EAAgBiM,EAAez0D,OAC/Bm4E,EAAgBt6C,EAAWhnB,UAC3B6rC,EAAey1B,EAAcn4E,OAC7Bo4E,EAAgB,IAAIt9E,MAAqB4nD,GAC7C,IAASxuD,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EAAG,CACtC,IAAI6gE,EAAWN,EAAevgE,GAAG4e,KAC7BulE,EAAetjB,EAASzqD,MAAQ9I,EAAA+I,SAASk3C,WAA8BsT,EAAUtgE,KAAKqX,KAEtF,KADgBipD,EAAUtgE,KAAK0S,WAAWrH,KAE1Cw4E,EAAqBpkF,EAAIwuD,EACzBy1B,EAAcjkF,GACdugE,EAAevgE,GAAG+mB,YACtB,IAAKq9D,EAKH,OAJAzkF,KAAKqN,MACHI,EAAAhD,eAAekZ,+BACfqmB,EAAWj/B,MAAO4pD,EAAcjpD,SAAS,IAAKmjD,EAAanjD,SAAS,KAE/D/L,EAAO8rC,cAEhB,GAAqB,OAAjB+4C,GAAyBH,EAAc7vE,IAAIgwE,GAAe,CAE5D,GADIE,EAAeL,EAAcnjF,IAAIsjF,GACnB,CAChBD,EAAclkF,GAAKL,KAAKs0E,kBAAkBmQ,EAAoBC,GAC9D,IAAIpF,OAAU,EACd,KAAMA,EAAa5xE,EAAAkH,KAAK2+C,kBAAkBmxB,EAAc1kF,KAAKsvE,aAAa,OAClEgQ,EAAa5xE,EAAAkH,KAAK2+C,kBAAkBmxB,EAAc1kF,KAAKsvE,aAAa,IAKxE,OAJAtvE,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACf3T,EAAevgE,GAAG4e,KAAKlU,MAAO/K,KAAKsvE,YAAY5jE,WAAYg5E,EAAah5E,YAEnE/L,EAAO8rC,cAGlBi5C,EAAepF,OAEfiF,EAAclkF,GAAKL,KAAKs0E,kBAAkBmQ,EAAoB/2E,EAAAkH,KAAK89C,MACnEgyB,EAAe1kF,KAAKsvE,YAGtB+U,EAAclyE,IAAIqyE,EAAcE,OAC3B,CACL,IAAIC,EAAe3kF,KAAKqS,SAASmuD,YAC/BI,EAAevgE,GAAG4e,KAClBmL,EAAKg6C,eACLh6C,EAAK3B,yBAEP,IAAKk8D,EAAc,OAAOhlF,EAAO8rC,cACjC84C,EAAclkF,GAAKL,KAAKs0E,kBAAkBmQ,EAAoBE,EAAY,IAG9E,IAAI3e,EAAwB,IAAI/+D,MAAYg/D,GAC5C,IAAS5lE,EAAI,EAAGA,EAAI4lE,IAAqB5lE,EAAG,CAC1C,IAAIqkF,EAAet6E,OAAOi6E,EAAcnjF,IAAI6rB,EAAmB1sB,GAAGO,KAAKqL,OACvE+5D,EAAsB3lE,GAAKqkF,EAO7B,OALAn8D,EAAWvoB,KAAKqS,SAAS4L,gBACvBhc,EACA+jE,EACAn8D,EAAA23D,QAAqBp3C,EAAK3B,2BAGrBzoB,KAAK0gF,eAAen4D,EAAUg8D,EAAev6C,EAAY44B,GAAkBl1D,EAAAkH,KAAKG,MADjE/U,KAAKL,OAAO8rC,cAQlCljB,EAAWvoB,KAAKqS,SAAS4L,gBAAgBhc,EAAW,MAEtD,IAAKsmB,EAAU,OAAOvoB,KAAKL,OAAO8rC,cAGlC,IAAI03C,EAA0B,EAK9B,OAJI56D,EAASjJ,GAAG9R,EAAAnL,YAAY4iB,YAC1Bk+D,EAAWnjF,KAAKs0E,kBAAkBlqE,OAAOpK,KAAKqS,SAASiuD,uBAAwBtgE,KAAK0U,QAAQI,YAGvF9U,KAAKgkF,kBACVz7D,EACAyhB,EAAWhnB,UACXgnB,EACAm5C,EACApI,GAKJ,KAAKnpB,EAAA9gD,YAAY+W,MACf,GAAI5T,EAAoBoZ,EAAQpO,KAAKmzC,mBAAoB,CAErD+xB,EADU92D,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,SACtB3nB,EAAOyD,IAAI8sC,QAAgB7iB,EAAQhG,uBAEnC1nB,EAAO2nC,UAAkBja,EAAQzF,MAAOiqC,EAAAriC,WAAWppB,KAEhE,MAMA,OAJApG,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfl7B,EAAWj/B,MAAesiB,EAAQpO,KAAKvT,YAElC/L,EAAO8rC,cAGlB,KAAKmmB,EAAA9gD,YAAYmQ,OACf,GAAIhN,EAAqBoZ,EAAQpO,KAAKmzC,mBAAoB,CACxD+xB,EAAWxkF,EAAO+nC,WAAoBra,EAAQjb,aAAuBib,EAAQpO,KAAKw0C,gBAClF,MAMA,OAJAzzD,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfl7B,EAAWj/B,MAAgBsiB,EAAQpO,KAAKvT,YAEnC/L,EAAO8rC,cAGlB,KAAKmmB,EAAA9gD,YAAY8N,MACf,IAAIK,EAAeoO,EAAQpO,KAC3B,GAAIhL,EAAYgL,EAAKmzC,mBAAoB,CACvC,IAAImwB,EAAiBn4E,OAAOpK,KAAKqS,SAASiuD,uBACtC6iB,EAAWnjF,KAAKs0E,kBAAkBiO,EAAgBviF,KAAK0U,QAAQI,WACnEqvE,EAAWxkF,EAAOioC,KAChB,GACA,EACAu7C,EACAtxB,EAAAriC,WAAWppB,IACHinB,EAAQ/B,cAElB,MAMA,OAJAtrB,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfl7B,EAAWj/B,MAAOkU,EAAKvT,YAElB/L,EAAO8rC,cAGlB,KAAKmmB,EAAA9gD,YAAYma,gBACfhX,EAA6BoZ,EAAQpZ,UACrCkwE,EAAWnkF,KAAKs0E,kBAAkBtqC,EAAWA,WAA6B3c,EAAQpO,KAAI,GACtF,MAGF,KAAK2yC,EAAA9gD,YAAYyN,mBACf,IAAIC,EAAkBpU,OAA2BijB,EAAQ7O,iBAEzD,KADIiN,EAAiBzrB,KAAKqS,SAAS4L,gBAAgBO,EAAiB,OAC/C,OAAO7e,EAAO8rC,cAGnC,GAFA04C,EAAWnkF,KAAKgkF,kBAAkBv4D,EAAgB,GAAIue,EAAWA,cACjE/1B,EAAYjU,KAAKsvE,YAAYld,oBAM3B,OAJApyD,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfl7B,EAAWj/B,MAAO/K,KAAKsvE,YAAY5jE,YAE9B/L,EAAO8rC,cAEhB,MAEF,KAAKmmB,EAAA9gD,YAAY4N,SACf,IAAI+M,EAAiBrhB,OAAkBijB,EAAQ5B,gBAK/C,GAJA04D,EAAWnkF,KAAKgkF,kBAAkBv4D,EAAgB,GAAIue,EAAWA,WAC/DhqC,KAAKs0E,kBAAkBlqE,OAAOpK,KAAKqS,SAASiuD,uBAAwBtgE,KAAK0U,QAAQI,cAEnFb,EAAYjU,KAAKsvE,YAAYld,oBAM3B,OAJApyD,KAAKqN,MACHI,EAAAhD,eAAey6D,uGACfl7B,EAAWj/B,MAAO/K,KAAKsvE,YAAY5jE,YAE9B/L,EAAO8rC,cAEhB,MAIF,QAKE,OAJAzrC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGlB,OAAOzrC,KAAK4kF,oBACV3wE,EACAkwE,EACAn6C,EAAWhnB,UACXgnB,EACA,EACA44B,GAAkBl1D,EAAAkH,KAAKG,OAInBo6D,EAAAltE,UAAAmiF,6BAAR,SACEniF,EACA+nC,EACA44B,GAEA,IAAI32C,EAA+B,KAI/Bc,EAAqB9qB,EAAU8qB,mBAC/Bo0C,EAAoBn3B,EAAW/d,cAC/B+d,EAAW/d,gBACRhqB,EAAUqd,GAAG9R,EAAAnL,YAAY8S,UAC5BnV,KAAKqN,MACHI,EAAAhD,eAAe42D,sBACfr3B,EAAWj/B,MAAO9I,EAAUmQ,cAGhC6Z,EAAgBjsB,KAAKqS,SAASwvD,qBAC5Bz3D,OAAO2iB,GACPo0C,EACAnhE,KAAK0wE,YAAYtM,eAAelwD,OAChCrK,EAAA23D,QAAqBxhE,KAAK0wE,YAAYjoD,yBACtCuhB,IAKJ,IAAIpD,EAAOy5B,EAAAwkB,YACT7kF,KACAiC,EACAgqB,EACA+d,EAAWhnB,UACX4/C,EACA54B,GAEF,OAAKpD,IACH5mC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,gBASvB0jC,EAAAltE,UAAA6iF,mBAAA,SACE7wE,EACA46C,EACAk2B,EACAhf,GAKA,GAAIgf,IAAwB,MADb9wE,EAAU8V,UAMvB,OAJA/pB,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,QAEN,EAIT,IAAIqpD,EAAUngD,EAAUmgD,QACxB,GAAIA,EAKF,OAJAp0D,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,QAEN,EAGT,IAAIi6E,EAAU/wE,EAAUkgD,mBACpBvkB,EAAU37B,EAAU+V,eAAe7d,OAGvC,OAAI0iD,EAAem2B,GACjBhlF,KAAKqN,MACH23E,EAAUp1C,EACNniC,EAAAhD,eAAew6E,wCACfx3E,EAAAhD,eAAekZ,+BACnBoiD,EAAWh7D,MAAOi6E,EAAQt5E,WAAYmjD,EAAanjD,aAE9C,KAILmjD,EAAejf,IAAYwkB,KAC7Bp0D,KAAKqN,MACHI,EAAAhD,eAAekZ,+BACfoiD,EAAWh7D,MAAO6kC,EAAQlkC,WAAYmjD,EAAanjD,aAE9C,IAOXyjE,EAAAltE,UAAA+hF,kBAAA,SACEz7D,EACA28D,EACAnf,EACAof,EACApK,QADA,IAAAoK,MAAA,QACA,IAAApK,MAAA,GAEA,IAAIlsB,EAAeq2B,EAAoB/4E,OACnC8H,EAAYsU,EAAStU,UACzB,IAAKjU,KAAK8kF,mBACR7wE,EACA46C,EACW,GAAXs2B,EACApf,GAGA,OADA/lE,KAAKsvE,YAAcr7D,EAAUm3B,WACtBprC,KAAKL,OAAO8rC,cAIrB,GAAIljB,EAASlN,aAAau2C,EAAA7gD,eAAesR,QAAS,CAEhD,GADAjY,QAAQme,EAASjJ,GAAG9R,EAAAnL,YAAY81E,cAC5Bn4E,KAAKovE,uBAAuB7oD,SAASgC,GAKlC,CACLvoB,KAAKovE,uBAAuB1iE,KAAK6b,GACjC,IAAI68D,EAAiBnxE,EAAU+V,eAC/B5f,OAAOykD,GAAgBu2B,EAAej5E,QAGtC,IADA,IAAI+3C,EAAO,IAAIj9C,MAAqB4nD,GAC3BxuD,EAAI,EAAGA,EAAIwuD,IAAgBxuD,EAClC6jD,EAAK7jD,GAAKL,KAAKs0E,kBAAkB4Q,EAAoB7kF,GAAI+kF,EAAe/kF,GACtE,IAIJ,IAAIumC,EAAO5mC,KAAKqlF,eAAe98D,EAAU27B,EAAMihC,EAAkD,IAA7B,EAAXpK,IASzD,OARI/6E,KAAKsvE,YAAYsD,YACF,GAAXmI,EAGJ/6E,KAAK6vE,oBAAoB76D,IAAI4xB,GAF7BA,EAAO5mC,KAAKgjF,gBAAgBp8C,EAAM5mC,KAAK0wE,cAK3C1wE,KAAKovE,uBAAuB3G,MACrB7hC,EAzBP5mC,KAAKmN,QACHM,EAAAhD,eAAe66E,yCACfvf,EAAWh7D,MAAOwd,EAASnW,cA4BjC,IAAImzE,EAAuBJ,EAAUt2B,EAAe,EAAIA,EACpD1nB,EAAW,IAAIlgC,MAAqBs+E,GACpC39D,EAAQ,EACRu9D,IACFh+C,EAAS,GAAKg+C,EACdv9D,EAAQ,GAEV,IAAIoC,EAAiB/V,EAAU+V,eAC/B,IAAS3pB,EAAI,EAAGA,EAAIwuD,IAAgBxuD,IAAKunB,EACvCuf,EAASvf,GAAS5nB,KAAKs0E,kBAAkB4Q,EAAoB7kF,GAAI2pB,EAAe3pB,GAAE,GAKpF,GADA+J,OAAOwd,GAAS29D,GACZtxE,EAAUm3B,WAAWwnC,UAAW,CAClC,GAAe,EAAXmI,EAEF,OAAO/6E,KAAK0gF,eAAen4D,EAAU4e,EAAU4+B,GAAY,GACtD,GAAe,GAAXgV,EAAuC,CAE5Cn0C,EAAO5mC,KAAK0gF,eAAen4D,EAAU4e,EAAU4+B,GAAY,GAAO,GAEtE,OADA/lE,KAAK6vE,oBAAoB76D,IAAI4xB,GACtBA,EAEP,OAAO5mC,KAAK0gF,eAAen4D,EAAU4e,EAAU4+B,GAAY,GAAO,GAGtE,OAAO/lE,KAAK0gF,eAAen4D,EAAU4e,EAAU4+B,EACJ,IAA7B,EAAXgV,KAIL5L,EAAAltE,UAAAojF,eAAA,SACE98D,EACA4e,EACAg+C,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAeA,IAbA,IAAI7lF,EAASK,KAAKL,OACdkvD,EAAe1nB,EAAWA,EAASh7B,OAAS,EAC5C8H,EAAYsU,EAAStU,UACrB+V,EAAiB/V,EAAU+V,eAC3B2qC,EAAgB3qC,EAAe7d,OAG/B4nE,EAAe/zE,KAAK0wE,YACpBtmD,EAAOvc,EAAAwc,KAAK49C,aAAa8L,EAAanM,eAAgBr/C,GACtDP,EAAO,GACPy9D,EAAa,IAAIt+E,IAGZ9G,EAAIwuD,EAAe,EAAGxuD,GAAK,IAAKA,EAAG,CAM1C,IAAIqlF,EAAYv+C,EAAU9mC,GACtBslF,EAAY37D,EAAe3pB,GAC3BulF,EAAgBx7D,EAAK6+C,eAAeh1D,EAAUkW,iBAAiB9pB,GAAIslF,EAAWF,GAClF53E,EAAA0gE,eAAemX,EAAWD,GAErB1R,EAAa1I,YAAYqa,EAAWC,IAAYv7D,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAWiE,SACnGlhD,EAAKwgD,UAAU8a,EAAWC,IAAYv7D,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAW9C,SAExFohB,EAAU/S,YACP5yE,KAAK6vE,oBAAoBr7D,IAAIkxE,KAAYA,EAAY1lF,KAAK6yE,WAAW6S,IAC1Et7D,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAWwB,WAEpD7gD,EAAKmpD,QACHxxE,EAAOypC,UAAUw8C,EAAch+D,MAAO89D,IAG1C,GAAIP,EAAS,CACX,IAAIxyE,EAAgBvI,OAAOme,EAASrU,QAAS9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,OACtF,IAAIkL,EAAW3f,OAAOme,EAAStU,UAAU8V,UACrC26C,EAAYt6C,EAAK6+C,eAAez7D,EAAAxK,cAAcoC,MAAO2kB,EAAU07D,GAEnEz9D,EAAKmpD,QACHxxE,EAAOypC,UAAUs7B,EAAU98C,MAAOu9D,IAEpC,IAAIU,EAAuBlzE,EAAeuZ,KACtC25D,GAAcz7D,EAAK++C,eAAe37D,EAAAxK,cAAcqC,OAAQwgF,EAAa5mE,KAAMylD,EAAU98C,YAEzFxd,QAAQme,EAAStU,UAAU8V,UAK7B/pB,KAAK0wE,YAActmD,EACnB,IAAS/pB,EAAIwuD,EAAcxuD,EAAIs0D,IAAiBt0D,EAAG,CACjD,IAAIylF,EAAW97D,EAAe3pB,GAC1B8zE,EAAWn0E,KAAKs0E,kBAClBlqE,OAAOme,EAAStmB,UAAU0jE,iBAAiBpiB,WAAWljD,GAAG+mB,aACzD0+D,EAAQ,GAGNF,EAAgBx7D,EAAK6+C,eAAeh1D,EAAUkW,iBAAiB9pB,GAAIylF,GAClE17D,EAAKihD,YAAY8I,EAAU2R,IAAW17D,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAWiE,SACzFlhD,EAAKwgD,UAAUuJ,EAAU2R,IAAW17D,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAW9C,SACtFuhB,EAASlT,WACXxoD,EAAKw+C,aAAagd,EAAch+D,MAAO/Z,EAAAw5D,WAAWwB,UAClD7gD,EAAKtb,KACH/M,EAAOypC,UAAUw8C,EAAch+D,MAC7B5nB,KAAK6yE,WAAWsB,MAIpBnsD,EAAKtb,KACH/M,EAAOypC,UAAUw8C,EAAch+D,MAAOusD,IAM5Cn0E,KAAK01E,oBAAoBntD,EAAUP,GAG9BoC,EAAK9K,GAAE,OACVtf,KAAKg2E,oBAAoB5rD,EAAMpC,GAC/BhoB,KAAKi0E,mBAAmB7pD,EAAMpC,IAEhCoC,EAAKk/C,mBACL,IAAIl+B,EAAahhB,EAAKghB,WACtBprC,KAAK0wE,YAAcqD,EAGnB,IAAIntC,EAAOjnC,EAAO6pC,MAAMpf,EAAK49C,kBAAmBhgD,EAAMojB,EAAWqoB,gBAQjE,OAPAzzD,KAAKsvE,YAAclkC,EACfA,EAAWwnC,WACT4S,IACF5+C,EAAO5mC,KAAKmiF,YAAYv7C,GACxB5mC,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,MAGrB6xB,GAITuoC,EAAAltE,UAAAmwE,iBAAA,SAAiBjtD,GAQf,IAAI6D,EAAa7D,EAAS6D,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAI+8D,EAAoB5gE,EAASlR,UAC7B+xE,EAAe7gE,EAAS/S,aACxB6zE,EAAyBF,EAAkB/7D,eAC3Ck8D,EAAgC/gE,EAASljB,UAAU0jE,iBAAiBpiB,WACpEnY,EAAa26C,EAAkB36C,WAC/BrhB,EAAWg8D,EAAkBh8D,SAC7BuF,EAAanK,EAAS7F,GAAG9R,EAAAnL,YAAY4iB,UAGrCkhE,EAAeJ,EAAkB5xB,mBACjCiyB,EAAcD,EACdE,EAAeJ,EAAuB95E,OACtCm6E,EAAcD,EACd/2D,MACA82D,IACAE,GAEJ,IAAIC,EAAcn8E,OAAOk8E,EAAcF,GAEnCI,EAAoB,IAAIv/E,MAAqBm/E,GAC7CK,EAAe,EAGf9mF,EAASK,KAAKL,OACd2vB,IACFk3D,EAAkB,GAAK7mF,EAAO2nC,UAAU,EAAGtnC,KAAK0U,QAAQq+D,gBACxD0T,EAAe,GAIjB,IAAK,IAAIpmF,EAAI,EAAGA,EAAI8lF,IAAgB9lF,IAAKomF,EACvCD,EAAkBC,GAAgB9mF,EAAO2nC,UAAUm/C,EAAcR,EAAuB5lF,GAAGozD,gBAE7FrpD,OAAOq8E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIh5E,EAAA0Y,UAAU6/D,EAAwB76C,EAAYrhB,GAC5E28D,EAAoBvyB,mBAAqBkyB,EACzCK,EAAoBxyB,eAAiB6xB,EAAkB7xB,gBACvDlrC,EAAa,IAAI4oC,EAAAx9C,SACf+Q,EAASvkB,KAAO,cAChBukB,EAASljB,UACTykF,EACAvhE,EAASsD,0BAEAtW,IAAIgT,EAASnS,MAAQxF,EAAAnL,YAAY81E,WAAa3qE,EAAAnL,YAAYiwE,UACrEntD,EAAS6D,WAAaA,EAItB,IAAI+qD,EAAe/zE,KAAK0wE,YACpBtmD,EAAOpB,EAAWoB,KACtBpqB,KAAK0wE,YAActmD,EAGnB,IAAI6gB,EAAWs7C,EAAc,EACzBx7C,EAAQ,IAAI9jC,MAAcgkC,GAC1B07C,EAAM,KAAOJ,EAAY76E,SAAS,IACtC,IAASrL,EAAI,EAAGA,EAAI4qC,IAAY5qC,EAAG,CACjC,IAAIopC,EAAQppC,EAAEqL,SAAS,IAAMi7E,EAC7B57C,EAAM1qC,GAAKopC,EAEb,IAAIzhB,EAAOroB,EAAO6pC,MAAMuB,EAAM,GAAI,CAChCprC,EAAO6pC,MAAM,aAAc,CACzB7pC,EAAOmrC,OAAOC,EAAO,aAEnBo7C,EACIxmF,EAAOmnC,OACL+qB,EAAAz5B,SAAS8nD,OACTvgF,EAAO+nC,WAAW24B,EAAA2E,eAAe4hB,KAAM/0B,EAAAriC,WAAWppB,KAClDzG,EAAOyD,IAAI+iF,IAEbxmF,EAAO+nC,WAAW24B,EAAA2E,eAAe4hB,KAAM/0B,EAAAriC,WAAWppB,QAG1DzG,EAAO8rC,gBAET,IAASprC,EAAI,EAAGA,EAAIkmF,IAAelmF,IAAKomF,EAAc,CACpD,IAAIxnE,EAAOgnE,EAAuBE,EAAe9lF,GAC7CkU,EAAc2xE,EAA8BC,EAAe9lF,GAC3D+mB,EAAc7S,EAAY6S,YAC1B+sD,OAAQ,EACR/sD,EACF+sD,EAAWx0E,EAAOypC,UAAUq9C,EAC1BzmF,KAAKs0E,kBACHltD,EACAnI,EAAI,KAKRjf,KAAKqN,MACHI,EAAAhD,eAAeo8E,4CACftyE,EAAYxJ,OAEdopE,EAAWx0E,EAAO8rC,eAEpBzjB,EAAOroB,EAAO6pC,MAAMuB,EAAM1qC,EAAI,GAAI,CAChC2nB,EACAmsD,IAEFqS,EAAkBC,GAAgB9mF,EAAO2nC,UAAUm/C,EAAcxnE,EAAKw0C,gBAExErpD,OAAOq8E,GAAgBH,GAEvB,IAAI3Q,EAAyB,CAAE3tD,GAC3B+7D,EAAUpkF,EAAOa,KAAKwlF,EAAcQ,EAAmBp7C,EAAWqoB,gBAClEroB,GAAc19B,EAAAkH,KAAKG,KACrB/U,KAAK6hF,6BAA6Bz3D,EAAM25D,EAAS34C,EAAYuqC,IAE7DA,EAAMjpE,KAAKq3E,GACX/jF,KAAKg2E,oBAAoB5rD,EAAMurD,IAEjCvrD,EAAKk/C,mBACLtpE,KAAK0wE,YAAcqD,EAEnB,IAAI3C,EAAUzxE,EAAO2tC,YACnBtkB,EAAW5W,aACXpS,KAAKqxE,mBACHqV,EAAoB18D,eACpBohB,EACArhB,GAEFrc,EAAAmmD,mBAAmB7qC,EAAWJ,kBAC9BjpB,EAAO6pC,MAAM,KAAMmsC,EAAOvqC,EAAWqoB,iBAGvC,OADAzqC,EAAWyB,SAAS9qB,EAAQyxE,GACrBpoD,GAIDmmD,EAAAltE,UAAA6kF,cAAR,WACE,IAAK9mF,KAAK0vE,QAAS,CACjB,IAAI/vE,EAASK,KAAKL,OAClBK,KAAK0vE,QAAU/vE,EAAOstC,UACpBozB,EAAA2E,eAAe4hB,KACf/0B,EAAAriC,WAAWppB,KACX,EACAzG,EAAOyD,IAAI,IAGf,OAAOi9D,EAAA2E,eAAe4hB,MAIhBzX,EAAAltE,UAAAowE,cAAR,WACE,IAAKryE,KAAK2vE,QAAS,CACjB,IAAIhwE,EAASK,KAAKL,OAClBK,KAAK2vE,QAAUhwE,EAAO2tC,YAAY+yB,EAAA2E,eAAe+hB,QAC/C/mF,KAAKqxE,mBAAmB,CAAE3jE,EAAAkH,KAAKnR,KAAOiK,EAAAkH,KAAKG,MAC3C,KACApV,EAAO2pC,WAAWtpC,KAAK8mF,gBACrBnnF,EAAO2nC,UAAU,EAAGuqB,EAAAriC,WAAWppB,OAGnCzG,EAAOouC,kBAAkBsyB,EAAA2E,eAAe+hB,QAAS,aAEnD,OAAO1mB,EAAA2E,eAAe+hB,SAMxB5X,EAAAltE,UAAA4wE,WAAA,SAAWjsC,GACT,IAAI7pB,EAAiB/c,KAAKwlB,QAAQzI,eAElC,OADA/c,KAAKw1E,gBAAgBz4D,GACd/c,KAAKL,OAAOa,KAAKuc,EAAe3K,aAAc,CAAEw0B,GAAQ5mC,KAAK0U,QAAQq+D,iBAI9E5D,EAAAltE,UAAAgxE,kBAAA,SAAkB+T,EAAwBC,GAKxC,IAAItnF,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZ57D,EAAY9U,KAAK0U,QAAQI,UACzBi+D,EAAiB/yE,KAAK0U,QAAQq+D,eAC9BmU,EAAQ98D,EAAKi+C,aAAavzD,EAAWjH,EAAA0gE,eAAeyY,IACpDG,EAAQ/8D,EAAK2+C,oBAAoBj0D,GAErC,OADAsV,EAAK0+C,cAAcoe,GACZvnF,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOyqC,GACLzqC,EAAOmnC,OAAOisC,GAAkBlhB,EAAAriC,WAAWnpB,IAAMwrD,EAAAz5B,SAASgzC,MAAQvZ,EAAAz5B,SAAS+yC,MACzExrE,EAAO6nC,UAAU0/C,EAAMt/D,MAAOq/D,GAC9BtnF,EAAO6nC,UAAU2/C,EAAMv/D,MAAOo/D,IAEhCrnF,EAAO6pC,MAAM,KAAM,CACjB7pC,EAAOoqC,KACL/pC,KAAK6yE,WAAWlzE,EAAO2nC,UAAU4/C,EAAMt/D,MAAOmrD,KAEhD/yE,KAAKmiF,YAAYxiF,EAAO2nC,UAAU6/C,EAAMv/D,MAAOmrD,OAGnDpzE,EAAO2nC,UAAU4/C,EAAMt/D,MAAOmrD,IAC7BA,IAIL5D,EAAAltE,UAAAshF,mBAAA,SAAmByD,EAAwBC,GAGzC,IAAItnF,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZ57D,EAAY9U,KAAK0U,QAAQI,UACzBi+D,EAAiB/yE,KAAK0U,QAAQq+D,eAC9BmD,EAAO9rD,EAAK2+C,oBAAoBj0D,EAAWjH,EAAA0gE,eAAeyY,IAC9D,OAAOrnF,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOypC,UAAU8sC,EAAKtuD,MAAOq/D,GAC7BjnF,KAAKmiF,YAAY6E,GACjBrnF,EAAO2nC,UAAU4uC,EAAKtuD,MAAOmrD,IAC5BA,IAIL5D,EAAAltE,UAAAkgF,YAAA,SAAYv7C,GACV,IAAI5pB,EAAkBhd,KAAKwlB,QAAQxI,gBAEnC,OADAhd,KAAKw1E,gBAAgBx4D,GACdhd,KAAKL,OAAOa,KAAKwc,EAAgB5K,aAAc,CAAEw0B,GAAQirB,EAAAriC,WAAWyY,OAI7EknC,EAAAltE,UAAA+gF,gBAAA,SAAgBp8C,EAAqBxc,GAEnC,YAFmC,IAAAA,MAAapqB,KAAK0wE,aAE9C1wE,KAAKL,OAAO6nC,UAAUpd,EAAKs+C,oBAAoB1oE,KAAK0U,QAAQI,WAAW8S,MAAOgf,IAIvFuoC,EAAAltE,UAAAmlF,gBAAA,SAAgBxgD,EAAqBxc,GAInC,OAAQynC,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,GAAI0S,EAAAla,WAAW/Q,GAAO,CACpB,IAAIhf,EAAQiqC,EAAAta,iBAAiB3Q,GAC7B,GAAIxc,EAAKs/C,eAAe9hD,EAAO/Z,EAAAw5D,WAAW2T,cAKxC,OADA5wD,EAAKo+C,eAAe5gD,EAAO/Z,EAAAw5D,WAAW2T,cAC/BpzD,EAGX,MAEF,KAAKiqC,EAAApiC,aAAa8uB,MAChB,GAA2B,OAAvBsT,EAAA9Y,aAAanS,GAAgB,CAC/B,IAAI+0C,EAAQ9pB,EAAA5Y,mBAAmBrS,GAC/B,GAAI+0C,EACF,OAAO37E,KAAKonF,gBAAgBv1B,EAAA1Y,cAAcvS,EAAM+0C,EAAQ,GAAIvxD,IAMpE,OAAQ,GAQV+kD,EAAAltE,UAAAggF,gBAAA,SAAgBr7C,EAAqBygD,EAAqBC,GAKxD,OADYtnF,KAAKonF,gBAAgBxgD,EAAMygD,GAEnCrnF,KAAKgjF,gBAAgBp8C,EAAM0gD,GAC3BtnF,KAAKgjF,gBAAgBhjF,KAAK6yE,WAAWjsC,GAAO0gD,IAIlDnY,EAAAltE,UAAA+zE,oBAAA,SAAoB5rD,EAAYurD,EAAwB4R,gBAAA,IAAAA,OAAA,GACtD,IAAI7f,EAAet9C,EAAKs9C,aACxB,GAAIA,EAAc,CAChB,IAAI/nE,EAASK,KAAKL,WAClB,IAAkB,IAAA+mB,EAAA3O,EAAA2vD,EAAanqD,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAApC,IAAI6R,EAAK1L,EAAA9c,MACZ,GAAIwoB,EAAMxK,GAAG9R,EAAAnL,YAAYsmE,QAAS,CAChC,IAAI9+C,EAAaC,EAAMlC,MACnBwC,EAAKs/C,eAAe7/C,EAAYhc,EAAAw5D,WAAW2T,gBACzCuM,GAAYn9D,EAAKo+C,eAAe3+C,EAAYhc,EAAAw5D,WAAW2T,cAC3DrF,EAAMjpE,KACJ1M,KAAKmiF,YACHxiF,EAAO2nC,UAAUzd,EAAYC,EAAM7K,KAAKw0C,yHAUtD0b,EAAAltE,UAAA4/E,6BAAA,SACEz3D,EACA4oD,EACAjnB,EACA4pB,EACA4R,QADA,IAAA5R,MAAA,WACA,IAAA4R,OAAA,GAEK5R,IAAOA,EAAQ,IAAI1uE,OACxB0uE,EAAMjpE,KACJ1M,KAAKL,OAAO6qC,OAEd,IAAIg9C,EAAe7R,EAAMxpE,OAEzB,GADAnM,KAAKg2E,oBAAoB5rD,EAAMurD,EAAO4R,GAClC5R,EAAMxpE,OAASq7E,EAAc,CAC/B,IAAI1U,EAAa/mB,EAAU0H,eACvByiB,EAAO9rD,EAAK2+C,oBAAoBhd,GAC/B3hC,EAAKihD,YAAY2H,EAAWjnB,IAAY3hC,EAAKw+C,aAAasN,EAAKtuD,MAAO/Z,EAAAw5D,WAAWiE,SAClFlhD,EAAKwgD,UAAUoI,EAAWjnB,IAAY3hC,EAAKw+C,aAAasN,EAAKtuD,MAAO/Z,EAAAw5D,WAAW9C,SACnF,IAAI5kE,EAASK,KAAKL,OAKlB,OAJAg2E,EAAM6R,EAAe,GAAK7nF,EAAOypC,UAAU8sC,EAAKtuD,MAAOorD,GACvD2C,EAAMjpE,KACJ/M,EAAO2nC,UAAU4uC,EAAKtuD,MAAOkrD,IAExBnzE,EAAO6pC,MAAM,KAAMmsC,EAAO7C,GAC5B,OAAI6C,EAAMxpE,OAAS,GACxBwpE,EAAM6R,EAAe,GAAKxU,EACnBhzE,KAAKL,OAAO6pC,MAAM,KAAMmsC,EAAO5pB,EAAU0H,iBAE3Cuf,GAIT7D,EAAAltE,UAAAgyE,mBAAA,SAAmB7pD,EAAYurD,WACzBh2E,EAASK,KAAKL,OAClB,GAAIyqB,EAAK9K,GAAE,OAA4B,CAIrC,IADA,IAAIpL,OAAM,EACHA,EAASkW,EAAKlW,QAAQkW,EAAOlW,EACpClU,KAAKg2E,oBAAoB5rD,EAAMurD,GAAO,YAEtC,IAAkB,IAAAjvD,EAAA3O,EAAAqS,EAAKw9C,eAAej/C,eAAavK,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAAhD,IAAI6R,EAAK1L,EAAA9c,MACRuoB,EAAaC,EAAMlC,MACnBwC,EAAKs/C,eAAe7/C,EAAYhc,EAAAw5D,WAAW2T,gBAC7C5wD,EAAKo+C,eAAe3+C,EAAYhc,EAAAw5D,WAAW2T,cAC3CrF,EAAMjpE,KACJ1M,KAAKmiF,YACHxiF,EAAO2nC,UAAUzd,EAAYC,EAAM7K,KAAKw0C,uHAWpD0b,EAAAltE,UAAAy+E,eAAA,SACEn4D,EACA4e,EACA4+B,EACAyf,EAEAiC,QAFA,IAAAjC,OAAA,QAEA,IAAAiC,OAAA,GAEIl/D,EAASlN,aAAau2C,EAAA7gD,eAAesR,SACvCriB,KAAKmN,QACHM,EAAAhD,eAAei9E,6DACf3hB,EAAWh7D,MAAOwd,EAASnW,cAG/B,IAAIu1E,EAAcxgD,EAAWA,EAASh7B,OAAS,EAC3C0iD,EAAe84B,EAEfvB,EADe79D,EAAStU,UAAUkgD,mBAElCkyB,EAAe99D,EAAStU,UAAU+V,eAAe7d,OACjDm6E,EAAcD,EACd99D,EAASjJ,GAAG9R,EAAAnL,YAAY4iB,cACxBmhE,IACAE,IACAz3B,GAEJzkD,OAAOu9E,GAAevB,GAEtB,IAAIzmF,EAASK,KAAKL,OAClB,IAAKK,KAAKw1E,gBAAgBjtD,GAAW,OAAO5oB,EAAO8rC,cACnD,IAAIL,EAAa7iB,EAAStU,UAAUm3B,WAChCw8C,EAAer/D,EAASjJ,GAAG9R,EAAAnL,YAAYqyE,eAG3C,GAAIiT,EAAcrB,EAAa,CACxBn/C,KACHA,EAAW,IAAIlgC,MAAMq/E,IACZn6E,OAAS,GAEpB,IAAI6d,EAAiBzB,EAAStU,UAAU+V,eACpC42C,EAAiBr4C,EAAStmB,UAAU0jE,iBAAiBpiB,WACzDn5C,OAAOw2D,EAAez0D,QAAU6d,EAAe7d,QAE/C,IADA,IAAI07E,GAA0B,EACrBxnF,EAAIwuD,EAAcxuD,EAAIgmF,IAAgBhmF,EAAG,CAChD,IAAI+mB,EAAcw5C,EAAevgE,GAAG+mB,YACpC,GAAIA,EAAa,CACf,GAAIzZ,EAAA20C,oBAAoBl7B,EAAY3Q,MAAO,CACzC0wB,EAASz6B,KAAK1M,KAAKs0E,kBACL1T,EAAevgE,GAAG+mB,YAC9B4C,EAAe3pB,GAAE,IAGnB,SAEF,IAAIyd,EAAW9d,KAAKqS,SAASywD,kBAAkB17C,EAAamB,EAAS6B,KAAMJ,EAAe3pB,IAC1F,GAAIyd,GACEA,EAASrH,MAAQm7C,EAAA9gD,YAAYmQ,OAAQ,CACvC,IAAIuqD,EAAiB1tD,EACrB,GAAI9d,KAAKozE,cAAc5H,GAAS,CAC1BA,EAAOlsD,GAAG9R,EAAAnL,YAAYilB,SACxB6f,EAASz6B,KACP1M,KAAKm8E,sBAAsB3Q,EAAQxhD,EAAe3pB,GAAE,IAGtD8mC,EAASz6B,KACP1M,KAAKm9E,kBACHx9E,EAAO+nC,WAAW8jC,EAAOp5D,aAAco5D,EAAOvsD,KAAKw0C,gBACnD+X,EAAOvsD,KAAM+K,EAAe3pB,IAAI,GAAO,EAAO+mB,IAIpD,WAKR+f,EAASz6B,KAAKsd,EAAe3pB,GAAGqzD,aAAa/zD,IAC7CkoF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAIziE,EAAWoD,EAEf,GADAA,EAAWvoB,KAAKoyE,iBAAiB7pD,IAC5BvoB,KAAKw1E,gBAAgBjtD,GAAW,OAAO5oB,EAAO8rC,cACnDljB,EAAS6B,KAAKpX,MAAQmS,EAASiF,KAAKpX,MACpC,IAAIiwE,EAAmB73C,EAAWqoB,eAC9Bq0B,EAAOnoF,EAAOa,KAAK+nB,EAASnW,aAAc+0B,EAAU87C,GAYxD,OAXAjjF,KAAKsvE,YAAclkC,EACfA,EAAWwnC,YACT4S,GACFsC,EAAO9nF,KAAKmiF,YAAY2F,GACxB9nF,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,MACd0yE,EAGVznF,KAAK6vE,oBAAoB76D,IAAI8yE,GAF7BA,EAAO9nF,KAAKgjF,gBAAgB8E,IAKzBnoF,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO2pC,WAAWtpC,KAAK8mF,gBAAiBnnF,EAAOyD,IAAIyrD,IACnDi5B,GACC9nF,KAAKsvE,YAAY7b,iBAQ1B,IAAI7sB,EAAOjnC,EAAOa,KAAK+nB,EAASnW,aAAc+0B,EAAUiE,EAAWqoB,gBAUnE,OATAzzD,KAAKsvE,YAAclkC,EACfA,EAAWwnC,YACT4S,GACF5+C,EAAO5mC,KAAKmiF,YAAYv7C,GACxB5mC,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,MACd0yE,IACV7gD,EAAO5mC,KAAKgjF,gBAAgBp8C,KAGzBA,GAITuoC,EAAAltE,UAAA2iF,oBAAA,SACE3wE,EACAkwE,EACAe,EACAnf,EACAof,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAEA,IAAI32B,EAAeq2B,EAAoB/4E,OAEvC,IAAKnM,KAAK8kF,mBACR7wE,EACA46C,EACW,GAAXs2B,EACApf,GAEA,OAAO/lE,KAAKL,OAAO8rC,cAGrB,IAAI85C,EAAuBJ,EAAUt2B,EAAe,EAAIA,EACpD1nB,EAAW,IAAIlgC,MAAqBs+E,GACpC39D,EAAQ,EACRu9D,IACFh+C,EAAS,GAAKg+C,EACdv9D,EAAQ,GAGV,IADA,IAAIoC,EAAiB/V,EAAU+V,eACtB3pB,EAAI,EAAGA,EAAIwuD,IAAgBxuD,IAAKunB,EACvCuf,EAASvf,GAAS5nB,KAAKs0E,kBAAkB4Q,EAAoB7kF,GAAI2pB,EAAe3pB,GAAE,GAKpF,OADA+J,OAAOwd,GAAS29D,GACTvlF,KAAK+nF,iBAAiB9zE,EAAWkwE,EAAUh9C,EAAUq+C,IAI9DrW,EAAAltE,UAAA8lF,iBAAA,SACE9zE,EACAkwE,EACAh9C,EACAq+C,QADA,IAAAr+C,MAAA,WACA,IAAAq+C,OAAA,GAEA,IAAImC,EAAcxgD,EAAWA,EAASh7B,OAAS,EAC3C0iD,EAAe84B,EAEfvB,EADenyE,EAAUkgD,mBAEzBkyB,EAAepyE,EAAU+V,eAAe7d,OACxCm6E,EAAcD,EACdpyE,EAAU8V,aACVq8D,IACAE,IACAz3B,GAEJzkD,OAAOu9E,GAAevB,GAEtBpmF,KAAKqxE,mBAAmBp9D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAClF,IAAIpqB,EAASK,KAAKL,OAGlB,GAAIgoF,EAAcrB,EAAa,CACxBn/C,KACHA,EAAW,IAAIlgC,MAAMq/E,IACZn6E,OAAS,GAGpB,IADA,IAAI6d,EAAiB/V,EAAU+V,eACtB3pB,EAAIwuD,EAAcxuD,EAAIgmF,IAAgBhmF,EAC7C8mC,EAASz6B,KAAKsd,EAAe3pB,GAAGqzD,aAAa/zD,IAIjD,IAAIyrC,EAAan3B,EAAUm3B,WACvBxE,EAAOjnC,EAAO2rC,cAAc64C,EAAUh9C,EAAUlzB,EAAUiX,qBAU9D,OATAlrB,KAAKsvE,YAAclkC,EACfA,EAAWwnC,YACT4S,GACF5+C,EAAO5mC,KAAKmiF,YAAYv7C,GACxB5mC,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,MAExB6xB,EAAO5mC,KAAKgjF,gBAAgBp8C,IAGzBjnC,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAO2pC,WAAWtpC,KAAK8mF,gBACrBnnF,EAAOyD,IAAIyrD,IAEbjoB,GACC5mC,KAAKsvE,YAAY7b,iBAGtB0b,EAAAltE,UAAAs6E,uBAAA,SACEvyC,EACA44B,EACAmY,GAKA,IAHA,IAAIl1B,EAAc7b,EAAW6b,YACzBmiC,EAAiBniC,EAAY15C,OAC7B87E,EAAQ,IAAIhhF,MAAqB+gF,KAC5B3nF,EAAI,EAAGA,EAAI2nF,IAAkB3nF,EACpC4nF,EAAM5nF,GAAKL,KAAKs0E,kBAAkBzuB,EAAYxlD,GAAIqN,EAAAkH,KAAKG,KACrD,GAIJ,OADAkzE,EAAMD,GAAkBhoF,KAAKs0E,kBAAkBzuB,EAAYmiC,GAAiBplB,EAAgBmY,GACrF/6E,KAAKL,OAAO6pC,MAAM,KAAMy+C,EAAOjoF,KAAKsvE,YAAY7b,iBAGzD0b,EAAAltE,UAAAu6E,+BAAA,SACExyC,EACA44B,EACAmY,GAEA,IAAI1tD,EAASrtB,KAAKqS,SAAS8wD,+BACzBn5B,EACAhqC,KAAK0wE,YACL9N,GAEF,IAAKv1C,EAAQ,OAAOrtB,KAAKL,OAAO8rC,cAChC,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAY+N,MACf,IAAImkD,EAAqB31C,EAAQF,eAAeykC,EAAArkD,aAAasB,YAAa7O,KAAK0wE,YAAYpxD,GAAE,QAC7F,IAAK0jD,EAKH,OAJAhjE,KAAKqN,MACHI,EAAAhD,eAAew3D,qCACfj4B,EAAWA,WAAWj/B,MAAesiB,EAAQjb,cAExCpS,KAAKL,OAAO8rC,cAErB,IAAI05C,EAAUnlF,KAAKs0E,kBAAkBtqC,EAAWA,WAAoB3c,EAAQpO,KAAI,GAGhF,OAAOjf,KAAKgkF,kBAAkBhhB,EAAY,CACxCh5B,EAAWmc,mBACVnc,EAAYm7C,EAASpK,GAO5B,OAJA/6E,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,eAGrB0jC,EAAAltE,UAAAw6E,0BAAA,SACEzyC,EACAk+C,EACAnN,GAEA,IAAIxmE,EAAcy1B,EAAWz1B,YAAYw8C,QACzC3mD,QAAQmK,EAAYuS,gBACpB,IAUIyB,EAVA6B,EAAOpqB,KAAK0wE,YACZtM,EAAiBh6C,EAAKg6C,eACtBniE,EAAY,IAAI2vD,EAAAv9C,kBAClBE,EAAY3T,KAAKqL,KAAKE,OAClBoI,EAAY3T,KAAKqL,KACjB,cAAgBm4D,EAAel7C,mBAAmBxd,SAAS,IAC/D04D,EACA7vD,EACAq9C,EAAA7gD,eAAekC,MAGbwV,EAA0B5e,EAAA23D,QAAQp3C,EAAK3B,yBAI3C,GAAIy/D,EAAqB,CACvB,IAAIxiB,EAAgBzjE,EAAU0jE,iBAC1B/E,EAAiB8E,EAAcniB,WAC/B4kC,EAAuBvnB,EAAez0D,OAGtC6d,EAAiBk+D,EAAoBl+D,eACrC2qC,EAAgB3qC,EAAe7d,OACnC,GAAIg8E,EAAuBxzB,EAKzB,OAJA30D,KAAKqN,MACHI,EAAAhD,eAAekZ,+BACfqmB,EAAWj/B,MAAO4pD,EAAcjpD,WAAYy8E,EAAqBz8E,YAE5D1L,KAAKL,OAAO8rC,cAKrB,IADA,IAAIyoB,EAAiB,IAAIjtD,MAAckhF,GAC9B9nF,EAAI,EAAGA,EAAI8nF,IAAwB9nF,EAAG,CAC7C,IAAIwgE,EAAgBD,EAAevgE,GAEnC,GADA6zD,EAAe7zD,GAAKwgE,EAAcjgE,KAAKqL,MAClC0B,EAAAgkD,cAAckP,EAAc5hD,MAAO,CAMtC,KALIikD,EAAeljE,KAAKqS,SAASmuD,YAC/BK,EAAc5hD,KACdmlD,EAAelwD,OACfuU,IAEiB,OAAOzoB,KAAKL,OAAO8rC,cACtC,IAAKzhB,EAAe3pB,GAAGizD,uBAAuB4P,GAK5C,OAJAljE,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACf1T,EAAc91D,MAAOif,EAAe3pB,GAAGqL,WAAYw3D,EAAax3D,YAE3D1L,KAAKL,OAAO8rC,eAOzB,IAAIL,EAAa88C,EAAoB98C,WACrC,IAAKz9B,EAAAgkD,cAAc+T,EAAct6B,YAAa,CAM5C,KALI83B,EAAeljE,KAAKqS,SAASmuD,YAC/BkF,EAAct6B,WACdg5B,EAAelwD,OACfuU,IAEiB,OAAOzoB,KAAKL,OAAO8rC,cACtC,GACEL,GAAc19B,EAAAkH,KAAKG,KACfmuD,GAAgBx1D,EAAAkH,KAAKG,MACpBmuD,EAAa5P,uBAAuBloB,GAMzC,OAJAprC,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACf7O,EAAct6B,WAAWrgC,MAAOm4D,EAAax3D,WAAY0/B,EAAW1/B,YAE/D1L,KAAKL,OAAO8rC,cAKvB,IAAI1hB,EAAWm+D,EAAoBn+D,SAC/Bq+D,EAAe1iB,EAAcliB,iBACjC,GAAI4kC,EAAc,CAChB,IAAKr+D,EAKH,OAJA/pB,KAAKqN,MACHI,EAAAhD,eAAem6D,+CACfwjB,EAAar9E,OAER/K,KAAKL,OAAO8rC,cAErB,IAAIy3B,EAKJ,KALIA,EAAeljE,KAAKqS,SAASmuD,YAC/B4nB,EACAhkB,EAAelwD,OACfuU,IAEiB,OAAOzoB,KAAKL,OAAO8rC,cACtC,IAAK1hB,EAASupC,uBAAuB4P,GAKnC,OAJAljE,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACf6T,EAAar9E,MAAOgf,EAASre,WAAYw3D,EAAax3D,YAEjD1L,KAAKL,OAAO8rC,cAIvB,IAAIx3B,EAAY,IAAIvG,EAAA0Y,UAAU4D,EAAgBohB,EAAYrhB,GAS1D,GARA9V,EAAUkgD,mBAAqBQ,EAC/B1gD,EAAUigD,eAAiBA,EAC3B3rC,EAAW,IAAIqpC,EAAAx9C,SACbnS,EAAUrB,KACVqB,EACAgS,EACAwU,IAEGzoB,KAAKw1E,gBAAgBjtD,GAAW,OAAOvoB,KAAKL,OAAO8rC,cACxDzrC,KAAKsvE,YAAc4Y,EAAoBjpE,SAGlC,CAML,KALAsJ,EAAWvoB,KAAKszE,kCACdrxE,EACA,GACAwmB,IAEa,OAAOzoB,KAAKL,OAAO8rC,cAClCzrC,KAAKsvE,YAAc/mD,EAAStU,UAAUgL,KAGxC,IAAI2I,EAAQ5nB,KAAKk4E,yBAAyB3vD,GAC1C,OAAOX,EAAQ,EACX5nB,KAAKL,OAAO8rC,cACZzrC,KAAKL,OAAOyD,IAAIwkB,IAIdunD,EAAAltE,UAAAomF,4BAAR,SAAoCr+C,GAClC,IAAI3lB,EAAe2lB,EAAWj/B,MAAMY,OAAO0Y,aACvChT,EAAcrR,KAAKwlB,QAAQnU,YAC/BjH,OAAOiH,EAAYmD,IAAI6P,IACHhT,EAAYnQ,IAAImjB,GACjB/E,GAAG9R,EAAAnL,YAAYiwE,WAChCtyE,KAAK2zE,kBAAkBtvD,EAAc2lB,IASzCmlC,EAAAltE,UAAAy6E,4BAAA,SACE1yC,EACA44B,EACAmY,GAEA,IAAIp7E,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZtM,EAAiBh6C,EAAKg6C,eAG1B,OAAQp6B,EAAWvzB,MACjB,KAAK9I,EAAA+I,SAAS6rC,KACZ,IAAI7tC,EAAU1U,KAAK0U,QAInB,OAHKkuD,EAAej0C,iBAClB3uB,KAAKsvE,YAAc56D,EAAQI,WAEtBJ,EAAQc,SACX7V,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAKuK,EAAA+I,SAAS8rC,KAEZ,OADAxiD,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKuK,EAAA+I,SAAS+rC,MAEZ,OADAziD,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKuK,EAAA+I,SAAS44C,KACZ,GAAI8U,EAAe9kD,GAAG9R,EAAAnL,YAAY4iB,UAAW,CAC3C,IAAIy/C,EAAYt6D,OAAOggB,EAAKu6C,YAAYn3D,EAAAxK,cAAcoC,QAClDuN,EAAgBvI,OAAOg6D,EAAelwD,QAAS9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,OAC5F,IAAIk0D,EAAiB/yE,KAAK0U,QAAQq+D,eAClC,GAAI3O,EAAe9kD,GAAG9R,EAAAnL,YAAYugB,eAC3BwH,EAAK9K,GAAE,IAAuB,CACjC8K,EAAKjY,IAAG,IAOR,IAAIwjE,EAAyB,CAC3Bh2E,EAAOyqC,GACLzqC,EAAO+mC,MAAMqsC,GAAkBlhB,EAAAriC,WAAWnpB,IAAMwrD,EAAA/+B,QAAQi4C,OAASlZ,EAAA/+B,QAAQg4C,OACvEnrE,EAAO2nC,UAAUo9B,EAAU98C,MAAOmrD,IAEpCpzE,EAAOypC,UAAUs7B,EAAU98C,MACzB5nB,KAAK6yE,WACH7yE,KAAKm2E,eAAsBxjE,OAUnC,OALA3S,KAAKo2E,wBAA+BzjE,EAAegjE,GACnDA,EAAMjpE,KACJ/M,EAAO2nC,UAAUo9B,EAAU98C,MAAOmrD,IAEpC/yE,KAAKsvE,YAAc5K,EAAUzlD,KACtBtf,EAAO6pC,MAAM,KAAMmsC,EAAO5C,GAIrC,IAAIhpD,EAAW3f,OAAOg6D,EAAenwD,UAAU8V,UAE/C,OADA/pB,KAAKsvE,YAAcvlD,EACZpqB,EAAO2nC,UAAUo9B,EAAU98C,MAAOmC,EAAS0pC,gBAOpD,OALAzzD,KAAKqN,MACHI,EAAAhD,eAAem6D,+CACf56B,EAAWj/B,OAEb/K,KAAKsvE,YAActvE,KAAK0U,QAAQI,UACzBnV,EAAO8rC,cAEhB,KAAK99B,EAAA+I,SAASusC,MACZ,IAAIqlC,EAAOtoF,KAAK0wE,YACZ6X,EAAiBD,EAAKlkB,eAU1B,GATImkB,EAAejpE,GAAG9R,EAAAnL,YAAYugB,eAC3B0lE,EAAKhpE,GAAE,MAEVtf,KAAKqN,MACHI,EAAAhD,eAAe+9E,iGACfx+C,EAAWj/B,QAIbu9E,EAAKhpE,GAAE,OAA4B,CACrC,IAAImpE,EAAaH,EAAK3jB,YAAYn3D,EAAAxK,cAAcoC,OAChD,GAAIqjF,EAAY,CACd,IACIv8D,EADkB9hB,OAAOq+E,EAAWxpE,KAAK0P,gBAClBzC,KAC3B,GAAIA,EAEF,OADAlsB,KAAKsvE,YAAcpjD,EAAKjN,KACjBtf,EAAO2nC,UAAUmhD,EAAW7gE,MAAOsE,EAAKjN,KAAKw0C,iBAI1D,GAAI80B,EAAejpE,GAAG9R,EAAAnL,YAAY4iB,UAAW,CACvCtS,EAAgBvI,OAAOm+E,EAAer0E,QAAS9J,OAAOuI,EAAc8D,MAAQm7C,EAAA9gD,YAAY+N,OAC5F,IAAIilE,EAA4BnxE,EAAeuZ,KAC/C,GAAI43D,EAAmB,CACrB,IAAI4E,EAAY5E,EAAkB7kE,KAElC,OADAjf,KAAKsvE,YAAcoZ,EACZ/oF,EAAO2nC,UAAU,EAAGohD,EAAUj1B,iBAQzC,OALAzzD,KAAKqN,MACHI,EAAAhD,eAAeq6D,iDACf96B,EAAWj/B,OAEb/K,KAAKsvE,YAActvE,KAAK0U,QAAQI,UACzBnV,EAAO8rC,cAIlBzrC,KAAKqoF,4BAA4Br+C,GAGjC,IAAI3c,EAASrtB,KAAKqS,SAASmwD,kBACzBx4B,EACA5f,EACApqB,KAAKqvE,aAAejL,GAEtB,IAAK/2C,EAAQ,OAAO1tB,EAAO8rC,cAE3B,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAY+W,MACf,IAAI5I,EAAeoO,EAAQpO,KAE3B,GADA7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACRsY,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,SACjC,OAAOtnB,KAAKm8E,sBAA6B9uD,EAAQu1C,EAAgBmY,GAEnE,IAAIlxD,EAAqBwD,EAAQzF,MAMjC,OALAxd,OAAOyf,GAAc,GACjB5K,EAAKK,GAAE,MAAwB8K,EAAKo/C,YAAY3/C,EAAYhc,EAAAw5D,WAAW9C,SAAS,KAClFtlD,EAAOA,EAAKozC,iBAEdryD,KAAKsvE,YAAcrwD,EACZjf,KAAKL,OAAO2nC,UAAUzd,EAAY5K,EAAKw0C,gBAEhD,KAAK7B,EAAA9gD,YAAYmQ,OACf,IAAKjhB,KAAKozE,cAAsB/lD,GAC9B,OAAOrtB,KAAKL,OAAO8rC,cAEjBxsB,EAAgBoO,EAAQpO,KAE5B,OADA7U,OAAO6U,GAAQvR,EAAAkH,KAAKG,MACPsY,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,SAC3BtnB,KAAKm8E,sBAA8B9uD,EAAQu1C,EAAgBmY,IAEpE/6E,KAAKsvE,YAAcrwD,EACZjf,KAAKL,OAAO+nC,WAAoBra,EAAQjb,aAAc6M,EAAKw0C,iBAEpE,KAAK7B,EAAA9gD,YAAY0W,UACf,OAAK6F,EAAO/N,GAAG9R,EAAAnL,YAAYiwE,WAQ3BtyE,KAAKsvE,YAAc5hE,EAAAkH,KAAKxR,IACRiqB,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,UACrCld,OAA4C,GAAzBijB,EAAQlG,mBACpBnnB,KAAKL,OAAOyD,IAAI8sC,QAAoB7iB,EAAQhG,wBAE9CrnB,KAAKL,OAAO+nC,WAAuBra,EAAQjb,aAAcy/C,EAAAriC,WAAWppB,OAZzEpG,KAAKqN,MACHI,EAAAhD,eAAek+E,+HACf3+C,EAAWj/B,OAEb/K,KAAKsvE,YAAc5hE,EAAAkH,KAAKxR,IACjBpD,KAAKL,OAAO8rC,eASvB,KAAKmmB,EAAA9gD,YAAYkN,mBACf,IAAIuK,EAAWvoB,KAAKqS,SAAS4L,gBACRoP,EACnB,KACAxjB,EAAA23D,QAAqBp3C,EAAK3B,0BAE5B,IAAMF,IAAYvoB,KAAKw1E,gBAAgBjtD,GAAY,OAAO5oB,EAAO8rC,cACjE,IAAI7jB,EAAQ5nB,KAAKk4E,yBAAyB3vD,GAE1C,OADAvoB,KAAKsvE,YAAc/mD,EAAStU,UAAUgL,KAC/Bjf,KAAKL,OAAOyD,IAAIwkB,GAO3B,OAJA5nB,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEN/K,KAAKL,OAAO8rC,eAGrB0jC,EAAAltE,UAAA06E,4BAAA,SACE3yC,EACA44B,EACAmY,GAEA,IAAIp7E,EAASK,KAAKL,OAKdinC,EAAO5mC,KAAKs0E,kBAAkBtqC,EAAWA,WAAYhqC,KAAK0U,QAAQI,WAClE8zE,EAAa5oF,KAAKsvE,YAClBvmC,EAAe/oC,KAAKqS,SAASmuD,YAAYx2B,EAAW2c,OAAQ3mD,KAAK0wE,YAAYtM,gBAEjF,GADApkE,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,MACnBmlC,EAAc,OAAOppC,EAAO8rC,cAGjC,IAAK1C,EAAazpB,GAAE,KAClB,OAAO3f,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOoqC,KAAKnD,GACZjnC,EAAOyD,IAAIwlF,GAAc7/C,EAAe,EAAI,IAC3C8oB,EAAAriC,WAAWppB,KAIhB,IAAKwiF,EAAWtpE,GAAE,KAChB,OAAO3f,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOoqC,KAAKnD,GACZjnC,EAAOyD,IAAI,IACVyuD,EAAAriC,WAAWppB,KAIhB,IAAI2sE,EAAiB6V,EAAWn1B,eAGhC,GAAIm1B,EAAWtpE,GAAE,OAAyBypB,EAAazpB,GAAE,KAAsB,CAG7E,GAAIspE,EAAWv2B,gBAAgBjlC,eAAe2b,GAC5C,OAAOppC,EAAOmnC,OACZisC,GAAkBlhB,EAAAriC,WAAWnpB,IACzBwrD,EAAAz5B,SAASgzC,MACTvZ,EAAAz5B,SAAS+yC,MACbvkC,EACAgiD,EAAWl1B,aAAa/zD,IAK5B,GAAIopC,EAAa3b,eAAew7D,GAAa,CAC3C,IAAIpjE,EAAUxlB,KAAKwlB,QACnB,IAAMojE,EAAWnW,cAAe1pC,EAAa0pC,YAAc,CACzD,IACIyI,EADOl7E,KAAK0wE,YACK3H,oBAAoB6f,GACrCzrE,EAAqB/S,OAAOob,EAAQrI,oBAExC,OADAnd,KAAKw1E,gBAAgBr4D,GACdxd,EAAOyqC,GACZzqC,EAAO+mC,MACLqsC,GAAkBlhB,EAAAriC,WAAWnpB,IACzBwrD,EAAA/+B,QAAQi4C,OACRlZ,EAAA/+B,QAAQg4C,OACZnrE,EAAO6nC,UAAU0zC,EAAUtzD,MAAOgf,IAEpCjnC,EAAOyD,IAAI,GACXpD,KAAK0gF,eAAevjE,EAAoB,CACtCxd,EAAO2nC,UAAU4zC,EAAUtzD,MAAOmrD,GAClCpzE,EAAOyD,IAAI2lC,EAAapa,eAAgB7b,KACvCk3B,IAGLhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,YAMZ,CAGL,GAAI69E,EAAWx7D,eAAe2b,GAC5B,OAAOppC,EAAO6pC,MAAM,KAAM,CACxBxpC,KAAKm9E,kBAAkBv2C,EAAMgiD,EAAYl7E,EAAAkH,KAAKG,MAAM,GAAO,EAAOi1B,EAAWA,YAC7ErqC,EAAOyD,IAAI,IACVyuD,EAAAriC,WAAWppB,KAGT,GAAI2iC,EAAa3b,eAAew7D,GAAa,CAC9CpjE,EAAUxlB,KAAKwlB,QACnB,IAAMojE,EAAWnW,cAAe1pC,EAAa0pC,YAAc,CAKrDyI,EADOl7E,KAAK0wE,YACK3H,oBAAoB6f,GACrCzrE,EAAqB/S,OAAOob,EAAQrI,oBAExC,OADAnd,KAAKw1E,gBAAgBr4D,GACdxd,EAAOyqC,GACZzqC,EAAO+mC,MACLqsC,GAAkBlhB,EAAAriC,WAAWnpB,IACzBwrD,EAAA/+B,QAAQi4C,OACRlZ,EAAA/+B,QAAQg4C,OACZnrE,EAAO6nC,UAAU0zC,EAAUtzD,MAAOgf,IAEpCjnC,EAAOyD,IAAI,GACXpD,KAAK0gF,eAAevjE,EAAoB,CACtCxd,EAAO2nC,UAAU4zC,EAAUtzD,MAAOmrD,GAClCpzE,EAAOyD,IAAI2lC,EAAapa,eAAgB7b,KACvCk3B,IAGLhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,QAOnB,OAAOpL,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOoqC,KAAKnD,GACZjnC,EAAOyD,IAAI,IACVyuD,EAAAriC,WAAWppB,MAGhB+oE,EAAAltE,UAAA26E,yBAAA,SACE5yC,EACA44B,EACAmY,EACA8N,QAAA,IAAAA,OAAA,GAEA,IAAIlpF,EAASK,KAAKL,OAClB,OAAQqqC,EAAW7mB,aACjB,KAAKxV,EAAAyV,YAAYsrC,MACftkD,QAAQy+E,GACR,IAAI91B,EAAY6P,EAAej0C,eAC/B,OAAIokC,GACEA,EAAU9wD,WAAajC,KAAKwlB,QAAQnJ,eAC/Brc,KAAK8oF,oBACV1+E,OAAO2oD,EAAU9mC,eAAe,GACP+d,EAAY+a,mBACrCg2B,EACA/wC,IAINhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,eAEhB,KAAK99B,EAAAyV,YAAY2rC,MACf,IAAIg6B,EAAsC/+C,EAAY1oC,MAItD,OAHIunF,IACFE,GAAcA,GAEZnmB,GAAkBl1D,EAAAkH,KAAK/Q,IAClBlE,EAAOkE,IAASklF,IAEzB/oF,KAAKsvE,YAAc5hE,EAAAkH,KAAK9Q,IACjBnE,EAAOmE,IAAIilF,IAEpB,KAAKp7E,EAAAyV,YAAY6rC,QACf,IAAIqU,EAAsCt5B,EAAY1oC,MAClDunF,IACFvlB,EAAWkB,QACTjvD,QAAQ,GACR+tD,IAGJ,IAAIrkD,EAAOjf,KAAKqS,SAASgxD,4BAA4BC,EAAUV,GAE/D,OADA5iE,KAAKsvE,YAAcrwD,EACXA,EAAKxI,MACX,OAAqB,IAAKzW,KAAK0U,QAAQc,SAAU,OAAO7V,EAAOyD,IAAI8sC,QAAQozB,IAC3E,OAAmB,OAAO3jE,EAAO0D,IAAI6sC,QAAQozB,GAAWnzB,SAASmzB,IACjE,OAAqB,IAAKtjE,KAAK0U,QAAQc,SAAU,OAAO7V,EAAOyD,IAAI8sC,QAAQozB,IAC3E,OAAmB,OAAO3jE,EAAO0D,IAAI6sC,QAAQozB,GAAWnzB,SAASmzB,IACjE,QAAmB,OAAO3jE,EAAOkE,IAAImlF,WAAW1lB,IAChD,QAAmB,OAAO3jE,EAAOmE,IAAImlF,WAAW3lB,IAChD,QAAS,OAAO3jE,EAAOyD,IAAI8sC,QAAQozB,IAGvC,KAAK31D,EAAAyV,YAAYC,OAEf,OADAjZ,QAAQy+E,GACD7oF,KAAKkpF,qBAA8Cl/C,GAE5D,KAAKr8B,EAAAyV,YAAY+rC,OAEf,OADA/kD,QAAQy+E,GACD7oF,KAAKmpF,qBAA8Cn/C,EAAY44B,GAS1E,OALA5iE,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAEb/K,KAAKsvE,YAAc1M,EACZjjE,EAAO8rC,eAGhB0jC,EAAAltE,UAAAinF,qBAAA,SAAqBl/C,GACnB,OAAOhqC,KAAKg3E,mBAAmBhtC,EAAW1oC,QAG5C6tE,EAAAltE,UAAA6mF,oBAAA,SACExR,EACAzxB,EACAk1B,EACAhV,GAmBA,IAjBA,IAAIpmE,EAASK,KAAKL,OACd6lB,EAAUxlB,KAAKwlB,QACfnJ,EAAiBjS,OAAOob,EAAQnJ,gBAChCw7D,EAAgBztE,OAAOpK,KAAKqS,SAAS0L,aAAa1B,EAAgB,CAAEi7D,KACpEv9D,EAAsB3P,OAAOob,EAAQzL,qBACrCkpD,EAAY4U,EAAc54D,KAC1BmL,EAAOpqB,KAAK0wE,YAGZgT,EAAWt5D,EAAKi+C,aAAapF,GAC7BmmB,EAAgBh/D,EAAKi+C,aAAatuD,EAAoBkF,MAGtD9S,EAAS05C,EAAY15C,OACrBoR,EAAS,IAAItW,MAAqBkF,GAClCwW,GAAW,EACX0mE,EAAoB/R,EAAY7jB,eAC3BpzD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAI2pC,EAAa6b,EAAYxlD,GACzBumC,EAAOoD,EACPrqC,EAAO6yC,qBACLxyC,KAAKs0E,kBAA8BtqC,EAAYstC,EAAW,IAI5DA,EAAY5jB,aAAa/zD,GACzBkyD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MACxCzqC,OAAOynD,EAAA7a,kBAAkBpQ,IAASyiD,GAElC1mE,GAAW,EAEbpF,EAAOld,GAAKumC,EAId,GAAIjkB,EAAU,CACZyH,EAAK0+C,cAAc4a,GACnBt5D,EAAK0+C,cAAcsgB,GAEnB,IAAIhS,EAAoB5xD,EAAQ4xD,kBAC5BQ,EAAgB53E,KAAKq3E,wBAAwBC,EAAa/5D,GAC1D+rE,EAAgB3qB,QAAQiZ,EAAcllE,OAAQ6C,QAAQ6hE,IAI1D,GAAe,GAAX2D,EAAyC,CAC3C,IAAIwO,EAAevpF,KAAK23E,wBAAwBL,EAAaM,GACzD4R,EAAe7qB,QAAQ4qB,EAAa72E,OAAQ6C,QAAQ6hE,IAExD,OADAp3E,KAAKsvE,YAAcrM,EACZz9C,EAAQ9Q,QAAQc,SACnBxV,KAAKL,OAAO0D,IAAI6sC,QAAQs5C,GAAer5C,SAASq5C,IAChDxpF,KAAKL,OAAOyD,IAAI8sC,QAAQs5C,IAKxB5iD,EAAO5mC,KAAK0gF,eAAel7D,EAAQnI,mBAAoB,CACzD1d,EAAOyD,IAAI+I,GACXqZ,EAAQ9Q,QAAQc,SACZ7V,EAAO0D,IAAIi0E,EAAYmS,WACvB9pF,EAAOyD,IAAIk0E,EAAYmS,WAC3B9pF,EAAOyD,IAAIy0E,EAAc/kE,IACzB0S,EAAQ9Q,QAAQc,SACZ7V,EAAO0D,IAAI6sC,QAAQo5C,GAAgBn5C,SAASm5C,IAC5C3pF,EAAOyD,IAAI8sC,QAAQo5C,KACtBvjB,GAEH,OADA/lE,KAAKsvE,YAAcrM,EACZjjE,KAAKgjF,gBAAgBhjF,KAAK6yE,WAAWjsC,IAMhD,IADaixC,EAAc1qD,eAAeykC,EAAArkD,aAAauB,aAAa,GASlE,OAPAsb,EAAK0+C,cAAc4a,GACnBt5D,EAAK0+C,cAAcsgB,GACnBppF,KAAKqN,MACHI,EAAAhD,eAAek4E,+CACf5c,EAAWh7D,MAAO8sE,EAAczlE,cAElCpS,KAAKsvE,YAAcrM,EACZtjE,EAAO8rC,cAEhB,IAAIi+C,EAAkBzmB,EAAUxP,eAE5BkiB,EAAQ,IAAI1uE,MAEhB0uE,EAAMjpE,KACJ/M,EAAOypC,UAAUs6C,EAAS97D,MACxB5nB,KAAK0gF,eAAel7D,EAAQnI,mBAAoB,CAC9C1d,EAAOyD,IAAI+I,GACXqZ,EAAQ9Q,QAAQc,SACZ7V,EAAO0D,IAAIi0E,EAAYmS,WACvB9pF,EAAOyD,IAAIk0E,EAAYmS,WAC3B9pF,EAAOyD,IAAIy0E,EAAc/kE,IACzB0S,EAAQ9Q,QAAQc,SACZ7V,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACd2iE,KAIP,IAAI4jB,EAAYv/E,OAAOytE,EAAcl+D,aAAa,cAClDvP,OAAOu/E,EAAUlzE,MAAQm7C,EAAA9gD,YAAY8N,OACrC+2D,EAAMjpE,KACJ/M,EAAOypC,UAAUggD,EAAcxhE,MAC7BjoB,EAAOioC,KAAKq7B,EAAU/Q,UAAU,EAC9BvyD,EAAO2nC,UAAUo8C,EAAS97D,MAAO8hE,GACjCA,EACQC,EAAWr+D,gBAKzB,IADA,IAAIsnD,EAAY0E,EAAY1E,UACZ6W,GAAPppF,EAAI,EAAei3E,EAAYmS,WAAWppF,EAAI8L,IAAU9L,EAAG,CAClE,IAAI2yE,EAAYz1D,EAAOld,GACnBuyE,IAEFI,EAAYhzE,KAAK6yE,WAAWG,IAG9B2C,EAAMjpE,KACJ/M,EAAO6mC,MAAM8wC,EAAYplB,SACvBvyD,EAAO2nC,UAAU8hD,EAAcxhE,MAAO8hE,GACtC1W,EACAqW,EACAhpF,GAAKopF,IAWX,OANA9T,EAAMjpE,KACJ/M,EAAO2nC,UAAUo8C,EAAS97D,MAAO8hE,IAEnCt/D,EAAK0+C,cAAc4a,GACnBt5D,EAAK0+C,cAAcsgB,GACnBppF,KAAKsvE,YAAcrM,EACZtjE,EAAO6pC,MAAM,KAAMmsC,EAAO+T,IAGnCva,EAAAltE,UAAAknF,qBAAA,SAAqBn/C,EAAqC44B,GACxD,IAAIjjE,EAASK,KAAKL,OAGdgvB,EAAiBi0C,EAAej0C,eACpC,IAAKA,GAAkBA,EAAerP,GAAG9R,EAAAnL,YAAYmgB,UAKnD,OAJAxiB,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfvqC,EAAWj/B,MAAO,WAAY63D,EAAel3D,YAExC/L,EAAO8rC,cAIhB,IAAIm+C,EAAOj7D,EAAetC,oBAC1B,GAAIu9D,EAAM,CAGR,GAAIA,EAAK31E,UAAUkgD,mBAKjB,OAJAn0D,KAAKqN,MACHI,EAAAhD,eAAeo/E,sDACf7/C,EAAWj/B,MAAO4jB,EAAejjB,YAE5B/L,EAAO8rC,cAEhB,GAAIm+C,EAAKtqE,GAAG9R,EAAAnL,YAAYq0D,SAKtB,OAJA12D,KAAKqN,MACHI,EAAAhD,eAAeq/E,mFACf9/C,EAAWj/B,MAAO4jB,EAAejjB,YAE5B/L,EAAO8rC,cAEhB,GAAIm+C,EAAKtqE,GAAG9R,EAAAnL,YAAYs0D,WAKtB,OAJA32D,KAAKqN,MACHI,EAAAhD,eAAes/E,qFACf//C,EAAWj/B,MAAO4jB,EAAejjB,YAE5B/L,EAAO8rC,cAKlB,IAAIV,EAAQf,EAAWe,MACnBE,EAAWF,EAAM5+B,OACjBoR,EAASysB,EAAWzsB,OACpBuB,EAAU6P,EAAe7P,QACzBkrE,GAAY,EACZ/B,EAAQ,IAAIhhF,MAAqBgkC,EAAW,GAE5CiwC,EADOl7E,KAAK0wE,YACKhI,oBAAoB1oE,KAAK0U,QAAQI,WACtD1K,OAAO6gC,GAAY1tB,EAAOpR,QAC1B,IAAK,IAAI9L,EAAI,EAAG+V,EAAI60B,EAAU5qC,EAAI+V,IAAK/V,EAAG,CACxC,IAAIie,EAASQ,EAAUA,EAAQ5d,IAAI6pC,EAAM1qC,GAAG4L,MAAQ,KACpD,GAAKqS,GAAUA,EAAO7H,MAAQm7C,EAAA9gD,YAAY8N,MAA1C,CAQA,IAAIK,EAAeX,EAAQW,KAC3BgpE,EAAM5nF,EAAI,GAAKL,KAAKL,OAAO6mC,MACzBvnB,EAAKizC,SACLlyD,KAAKL,OAAO2nC,UAAU4zC,EAAUtzD,MAAO5nB,KAAK0U,QAAQq+D,gBACpD/yE,KAAKs0E,kBAAkB/2D,EAAOld,GAAYie,EAAQW,KAAI,GACtDA,EAAKw0C,eACGn1C,EAAQgN,mBAbhBtrB,KAAKqN,MACHI,EAAAhD,eAAe03D,oCACfp3B,EAAM1qC,GAAG0K,MAAOggC,EAAM1qC,GAAG4L,KAAM0iB,EAAejjB,YAEhDs+E,GAAY,EAahB,OADAhqF,KAAKsvE,YAAc3gD,EAAe1P,KAAKozC,gBACnC23B,EAAkBrqF,EAAO8rC,eAG7Bw8C,EAAM,GAAKtoF,EAAOypC,UAChB8xC,EAAUtzD,MACV5nB,KAAK6yE,WACH7yE,KAAKm2E,eAAexnD,KAKxBs5D,EAAMA,EAAM97E,OAAS,GAAKxM,EAAO2nC,UAAU4zC,EAAUtzD,MAAO5nB,KAAK0U,QAAQq+D,gBAEzE/yE,KAAKsvE,YAAc3gD,EAAe1P,KAC3Btf,EAAO6pC,MAAM,KAAMy+C,EAAOjoF,KAAK0U,QAAQq+D,kBAGhD5D,EAAAltE,UAAA46E,qBAAA,SACE7yC,EACA44B,EACAmY,GAEA,IAAIp7E,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAGZrjD,EAASrtB,KAAKqS,SAASywD,kBACzB94B,EAAWA,WACX5f,GAEF,IAAKiD,EAAQ,OAAO1tB,EAAO8rC,cAC3B,GAAIpe,EAAO5W,MAAQm7C,EAAA9gD,YAAYuJ,gBAK7B,OAJAra,KAAKqN,MACHI,EAAAhD,eAAew/E,yEACfjgD,EAAWA,WAAWj/B,OAEjB/K,KAAKL,OAAO8rC,cAErB,IAGI9c,EAHA7L,EAAiCuK,EACjC1a,EAA8B,KAC9BsZ,EAAgB+d,EAAW/d,cAqB/B,OAdEtZ,GAJCsZ,GACoD,QAApD0C,EAAiBi0C,EAAej0C,iBACjCA,EAAerP,GAAG9R,EAAAnL,YAAY8S,SAEdnV,KAAKqS,SAAS0L,aAC5B+E,EACA6L,EAAe1C,cACfpiB,EAAA23D,QAAqBp3C,EAAK3B,0BAGZzoB,KAAKqS,SAASkvD,8BAC5Bz+C,EACAmJ,EACA7B,EAAKg6C,eAAelwD,OACpBrK,EAAA23D,QAAqBp3C,EAAK3B,yBAC1BuhB,KAIA44B,GAAkBl1D,EAAAkH,KAAKG,OAAMgmE,GAAW,GACrC/6E,KAAKkqF,mBAAmBv3E,EAAeq3B,EAAWhnB,UAAW+3D,EAAa/wC,IAFtDrqC,EAAO8rC,eAMpC0jC,EAAAltE,UAAAgiF,kBAAA,SAAkBtxE,EAAsBozD,GACtC,IAAIx9C,EAAW5V,EAAc0Z,oBAC7B,GAAI9D,EAGF,OADKA,EAASlN,aAAau2C,EAAA7gD,eAAesR,SAASriB,KAAKw1E,gBAAgBjtD,GACjEA,EAIT,IAAI29C,EAAYvzD,EAAcuZ,KAC9B,GAAIg6C,EAAW,CACb,IAAIikB,EAAWnqF,KAAKikF,kBAAkB/d,EAAWH,GACjDx9C,EAAW,IAAIqpC,EAAAx9C,SACb5G,EAAAxK,cAAcsC,YACd,IAAIssD,EAAAv9C,kBACF7G,EAAAxK,cAAcsC,YACdqN,EAEsBw3E,EAAS51E,YAAaw8C,SAE9Co5B,EAASl2E,UACT,WAKFsU,EAAW,IAAIqpC,EAAAx9C,SACb5G,EAAAxK,cAAcsC,YACd,IAAIssD,EAAAv9C,kBACF7G,EAAAxK,cAAcsC,YACdqN,EACA3S,KAAKwlB,QAAQ/R,8BAA8BjG,EAAAxK,cAAcsC,YACvDkI,EAAAnL,YAAY4iB,SAAWzX,EAAAnL,YAAYugB,cAGvC,IAAIlV,EAAA0Y,UAAU,KAAMzT,EAAcsM,KAAMtM,EAAcsM,MACtD,MAIJsJ,EAASnW,aAAeO,EAAcP,aAAe5E,EAAA9K,mBAAqB,cAC1E6lB,EAASpW,IAAI3E,EAAAnL,YAAYiwE,UACzB/pD,EAAStmB,UAAUqmB,oBAAoB,GAAIC,GAC3C5V,EAAc0Z,oBAAsB9D,EACpC,IAAIwrD,EAAe/zE,KAAK0wE,YACpBtmD,EAAO7B,EAAS6B,KACpBpqB,KAAK0wE,YAActmD,EAGnB,IAAInW,EAAYsU,EAAStU,UACrBtU,EAASK,KAAKL,OACdozE,EAAiB/yE,KAAK0U,QAAQq+D,eAC9B4C,EAAQ,IAAI1uE,MAqBhB,GAZA0uE,EAAMjpE,KACJ/M,EAAOyqC,GACLzqC,EAAO+mC,MAAMqsC,GAAkBlhB,EAAAriC,WAAWnpB,IAAMwrD,EAAA/+B,QAAQi4C,OAASlZ,EAAA/+B,QAAQg4C,OACvEnrE,EAAO2nC,UAAU,EAAGyrC,IAEtBpzE,EAAOypC,UAAU,EACfppC,KAAK6yE,WACH7yE,KAAKm2E,eAAexjE,OAKxBuzD,EAAW,CACb,IAAIl8C,EAAiB/V,EAAU+V,eAC3B2qC,EAAgB3qC,EAAe7d,OAC/Bg7B,EAAW,IAAIlgC,MAAqB,EAAI0tD,GAC5CxtB,EAAS,GAAKxnC,EAAO2nC,UAAU,EAAGyrC,GAClC,IAAK,IAAI1yE,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EACnC8mC,EAAS9mC,EAAI,GAAKV,EAAO2nC,UAAUjnC,EAAI,EAAG2pB,EAAe3pB,GAAGozD,gBAG9DkiB,EAAMjpE,KACJ/M,EAAOypC,UAAU,EACfppC,KAAK0gF,eAAet2E,OAAO87D,EAAU75C,qBAAsB8a,EAAU4+B,GAAY,GAAO,KAI9F/lE,KAAKo2E,wBAAwBzjE,EAAegjE,GAC5C,IAAI3tD,EAAOhoB,KAAK6hF,6BAA6Bz3D,EAAMzqB,EAAO2nC,UAAU,EAAGyrC,GAAiBpgE,EAAcsM,KAAM02D,GAC5GvrD,EAAKk/C,mBACLtpE,KAAK0wE,YAAcqD,EAGnB,IAAIlmC,EAAU7tC,KAAKqxE,mBAAmBp9D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAC5FS,EAASjC,EAASI,cAClB4kB,EAAW,IAAItmC,MACf0gF,EAAc,EAAI1zE,EAAU+V,eAAe7d,OAC3C+nE,EAAY1pD,EAAOre,OACvB,GAAI+nE,EAAYyT,EACd,IAAStnF,EAAIsnF,EAAatnF,EAAI6zE,IAAa7zE,EAAGktC,EAAS7gC,KAAK8d,EAAOnqB,GAAG4e,KAAKw0C,gBAE7E,IAAI2d,EAAUzxE,EAAO2tC,YAAY/kB,EAASnW,aAAcy7B,EAASN,EAAUvlB,GAE3E,OADAO,EAASkC,SAAS9qB,EAAQyxE,GACnB7oD,GAGT4mD,EAAAltE,UAAAioF,mBAAA,SAEEv3E,EAEAuyE,EAEAnK,EAEAhV,GAEA,IAAI6jB,EAAO5pF,KAAKikF,kBAAkBtxE,EAAeozD,GAC7Cn/B,EAAO5mC,KAAKgkF,kBACd4F,EACA1E,EACAnf,EACA/lE,KAAK0U,QAAQI,UAAU4+C,aAAa1zD,KAAKL,QACzCo7E,GAKF,OAHIlpB,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWyY,OACxCjoC,KAAKsvE,YAAc38D,EAAcsM,MAE5B2nB,GAQTuoC,EAAAltE,UAAA66E,gCAAA,SACEna,EACAC,EACAmY,GAEA,IAAIp7E,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAEhB1wE,KAAKqoF,4BAA4B1lB,GAEjC,IAAIt1C,EAASrtB,KAAKqS,SAASqwD,gCAAgCC,EAAgBv4C,EAAMw4C,GACjF,IAAKv1C,EAAQ,OAAO1tB,EAAO8rC,cAE3B,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA9gD,YAAYmQ,OACf,IAAKjhB,KAAKozE,cAAsB/lD,GAC9B,OAAO1tB,EAAO8rC,cAEhB,IAAI+D,EAAsBniB,EAAQpO,KAElC,OADA7U,OAAOolC,GAAc9hC,EAAAkH,KAAKG,MACbsY,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,SAC3BtnB,KAAKm8E,sBAA8B9uD,EAAQu1C,EAAgBmY,IAEpE/6E,KAAKsvE,YAAc9/B,EACZ7vC,EAAO+nC,WAAoBra,EAAQjb,aAAco9B,EAAWikB,iBAErE,KAAK7B,EAAA9gD,YAAY0W,UACf,IAAI4iE,EAAUhgF,OAAmBijB,EAAQnZ,QACzC,OADkD9J,OAAOggF,EAAQ3zE,MAAQm7C,EAAA9gD,YAAYkW,MAChFhnB,KAAKqzE,YAAkB+W,IAI5BpqF,KAAKsvE,YAAc5hE,EAAAkH,KAAKxR,IACRiqB,EAAQ/N,GAAG9R,EAAAnL,YAAYilB,UACrCld,OAA4C,GAAzBijB,EAAQlG,mBACpBxnB,EAAOyD,IAAI8sC,QAAoB7iB,EAAQhG,wBAEzC1nB,EAAO+nC,WAAuBra,EAAQjb,aAAcy/C,EAAAriC,WAAWppB,OARpEpG,KAAKsvE,YAAc5hE,EAAAkH,KAAKxR,IACjBpD,KAAKL,OAAO8rC,eASvB,KAAKmmB,EAAA9gD,YAAY8N,MACfxU,OAAeijB,EAAQ/B,cAAgB,GACvC,IAAI63D,EAAWnjF,KAAKs0E,kBAAkBlqE,OAAOpK,KAAKqS,SAASiuD,uBAAwBtgE,KAAK0U,QAAQI,WAEhG,OADA9U,KAAKsvE,YAAsBjiD,EAAQpO,KAC5Btf,EAAOioC,KACJva,EAAQpO,KAAKizC,SACb7kC,EAAQpO,KAAKK,GAAG,GACxB6jE,EACQ91D,EAAQpO,KAAKw0C,eACbpmC,EAAQ/B,cAGpB,KAAKsmC,EAAA9gD,YAAYyN,mBACf,IAAIC,EAAsC6O,EAAQ7O,gBAClD,GAAIA,EAAiB,CACnB,IAAI3d,EAASb,KAAKqS,SAAS4L,gBAAgBO,EAAiB,MAC5D,GAAI3d,EAAQ,OAAOb,KAAKgkF,kBAAkBnjF,EAAQ,GAAI8hE,EAAgB,GAExE,OAAOhjE,EAAO8rC,cAEhB,KAAKmmB,EAAA9gD,YAAY4N,SACf,IAAI+M,EAAiBrhB,OAAkBijB,EAAQ5B,gBAC/C,OAAOzrB,KAAKgkF,kBAAkBv4D,EAAgB,GAAIk3C,EAChD3iE,KAAKs0E,kBAAkBlqE,OAAOpK,KAAKqS,SAASiuD,uBAAwBtgE,KAAK0U,QAAQI,YAGrF,KAAK88C,EAAA9gD,YAAYkN,mBAKf,OAJAhe,KAAKqN,MACHI,EAAAhD,eAAe4/E,wEACf1nB,EAAe53D,MAA2BsiB,EAAQzsB,MAE7CjB,EAAO8rC,cAOlB,OAJAzrC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfshD,EAAe53D,OAEVpL,EAAO8rC,eAGhB0jC,EAAAltE,UAAA86E,yBAAA,SACE/yC,EACA44B,EACAmY,GAEA,IAAIjzB,EAAS9d,EAAW8d,OACpBC,EAAS/d,EAAW+d,OACpB0xB,EAAYz5E,KAAK0wE,YAEjBmJ,EAAW75E,KAAKL,OAAO6yC,qBACzBxyC,KAAK85E,cACH95E,KAAKs0E,kBAAkBtqC,EAAWH,UAAWn8B,EAAAkH,KAAKhR,MAClD5D,KAAKsvE,cAKT,GACEzd,EAAA9a,gBAAgB8iC,IAAahoB,EAAApiC,aAAaolB,OAC1Cgd,EAAA7a,kBAAkB6iC,IAAahoB,EAAAriC,WAAWppB,IAE1C,OAAOyrD,EAAA5a,iBAAiB4iC,GACpB75E,KAAKs0E,kBAAkBxsB,EAAQ8a,GAC/B5iE,KAAKs0E,kBAAkBvsB,EAAQ6a,GAGrC,IAAIic,EAAkC,GAAX9D,EAEvBuP,EAAa7Q,EAAUvR,OAC3BloE,KAAK0wE,YAAc4Z,EACnB,IAAIC,EAAavqF,KAAKs0E,kBAAkBxsB,EAAQ8a,EAAgBic,GAC5D2L,EAAaxqF,KAAKsvE,YAClBmb,EAA2BzqF,KAAK6vE,oBAAoBr7D,IAAI+1E,GAExDG,EAAajR,EAAUvR,OAC3BloE,KAAK0wE,YAAcga,EACnB,IAAIC,EAAa3qF,KAAKs0E,kBAAkBvsB,EAAQ6a,EAAgBic,GAC5D+L,EAAa5qF,KAAKsvE,YAClBub,EAA2B7qF,KAAK6vE,oBAAoBr7D,IAAIm2E,GAExDrL,EAAa5xE,EAAAkH,KAAK2+C,kBAAkBi3B,EAAYI,GAAY,GAChE,IAAKtL,EAMH,OALAt/E,KAAKqN,MACHI,EAAAhD,eAAe8pE,mCACfxsB,EAAOh9C,MAAO6/E,EAAWl/E,WAAY8+E,EAAW9+E,YAElD1L,KAAKsvE,YAAc1M,EACZ5iE,KAAKL,OAAO8rC,cAErB8+C,EAAavqF,KAAKm9E,kBAChBoN,EACAC,EAAYlL,GACZ,GAAO,EACPx3B,GAEF6iC,EAAa3qF,KAAKm9E,kBAChBwN,EACAC,EAAYtL,GACZ,GAAO,EACPv3B,GAEF/nD,KAAKsvE,YAAcgQ,EAEfmL,GAA4BI,EACzBJ,GAIHE,EAAa3qF,KAAK6yE,WAAW8X,GAC7BE,GAA2B,IAJ3BN,EAAavqF,KAAK6yE,WAAW0X,GAC7BE,GAA2B,IAKnBA,GAA4BnL,EAAW1M,YAE/C2X,EAAavqF,KAAKiiF,gBAAgBsI,EAAYD,EAAY7Q,GAC1DkR,EAAa3qF,KAAKiiF,gBAAgB0I,EAAYD,EAAYjR,IAI9D8Q,EAAavqF,KAAK6hF,6BAA6ByI,EAAYC,EAAYjL,GACvEgL,EAAWhhB,mBAEXqhB,EAAa3qF,KAAK6hF,6BAA6B6I,EAAYC,EAAYrL,GACvEoL,EAAWphB,mBAEXtpE,KAAK0wE,YAAc+I,EACnBA,EAAUpP,cAAcigB,EAAYI,GAEpC,IAAI9jD,EAAO5mC,KAAKL,OAAOyqC,GAAGyvC,EAAU0Q,EAAYI,GAGhD,OAFAvgF,OAAOqgF,GAA4BI,GAC/BJ,GAA0BzqF,KAAK6vE,oBAAoB76D,IAAI4xB,GACpDA,GAGTuoC,EAAAltE,UAAA+6E,8BAAA,SACEhzC,EACA44B,EACAmY,GAEA,IAAIp7E,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAGZoa,EAAW9qF,KAAKs0E,kBAClBtqC,EAAW0e,QACXka,EAAemc,WAAU,GAK3B,GAAIltB,EAAA9a,gBAAgB+zC,IAAaj5B,EAAApiC,aAAa2uB,YAAa,OAAO0sC,EAGlE,IASIlkD,EATAs0C,EAA0B,KAW9B,OAVItY,GAAkBl1D,EAAAkH,KAAKG,OACzBmmE,EAAY9wD,EAAKi+C,aAAaroE,KAAKsvE,aACnCwb,EAAWnrF,EAAO6nC,UAChB0zC,EAAUtzD,MACVkjE,IAMI9gD,EAAWqb,UACjB,KAAKjD,EAAAC,MAAM8V,UACT,OAAQn4D,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAASk9C,OACTwV,EACAnrF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaoD,aAC5C,CACZi2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAASoiC,EAAU9gD,GACzE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGlB,OACE,IAAI/2B,EAAU1U,KAAK0U,QACnBkyB,EAAOjnC,EAAOmnC,OACZpyB,EAAQc,SACJq8C,EAAAz5B,SAAS2nD,OACTluB,EAAAz5B,SAASk9C,OACbwV,EACA9qF,KAAKsvE,YAAY3b,YAAYh0D,IAE/B,MAEF,OACA,OACEinC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAAS2nD,OACT+K,EACAnrF,EAAO0D,IAAI,IAEb,MAEF,QACEujC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAAS4nD,OACT8K,EACAnrF,EAAOkE,IAAI,IAEb,MAEF,QACE+iC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAAS6nD,OACT6K,EACAnrF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAsG,QAAO,GACAzK,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM+V,YACT,OAAQp4D,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAAS8nD,OACT4K,EACAnrF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAC5C,IAAIqP,EAEEnB,EADN,GADImB,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaqD,aAC5C,CACZg2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAASoiC,EAAU9gD,GACzE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGlB,OACM/2B,EAAU1U,KAAK0U,QACnBkyB,EAAOjnC,EAAOmnC,OACZpyB,EAAQc,SACJq8C,EAAAz5B,SAAS+nD,OACTtuB,EAAAz5B,SAAS8nD,OACb4K,EACA9qF,KAAKsvE,YAAY3b,YAAYh0D,IAE/B,MAEF,OACA,OACEinC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAAS+nD,OACT2K,EACAnrF,EAAO0D,IAAI,IAEb,MAEF,QACEujC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAASgoD,OACT0K,EACAnrF,EAAOkE,IAAI,IAEb,MAEF,QACE+iC,EAAOjnC,EAAOmnC,OACZ+qB,EAAAz5B,SAASioD,OACTyK,EACAnrF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAsG,QAAO,GACAzK,EAAO8rC,cAGlB,MAEF,QAEE,OADArhC,QAAO,GACAzK,EAAO8rC,cAIlB,IAAIp5B,EAAWrS,KAAKqS,SAChBgb,EAAShb,EAASywD,kBAAkB94B,EAAW0e,QAASt+B,GAG5D,IAAK8wD,EAEH,OADAl7E,KAAKsvE,YAAc5hE,EAAAkH,KAAKG,KACnBsY,EACErtB,KAAKqiF,eACVh1D,EACAuZ,EACAoD,EAAW0e,QACXr2C,EAASiuD,sBACTjuD,EAASkuD,0BACT,GAPkB5gE,EAAO8rC,cAStB,IAAKpe,EACV,OAAO1tB,EAAO8rC,cAIhB,IAAIs/C,EAAW/qF,KAAKqiF,eAClBh1D,EACAuZ,EACAoD,EAAW0e,QACXr2C,EAASiuD,sBACTjuD,EAASkuD,0BACT,GAGFvgE,KAAKsvE,YAAc4L,EAAUj8D,KAC7BmL,EAAK0+C,cAAcoS,GACnB,IAAIpI,EAAaoI,EAAUj8D,KAAKw0C,eAEhC,OAAO9zD,EAAO6pC,MAAM,KAAM,CACxBuhD,EACAprF,EAAO2nC,UAAU4zC,EAAUtzD,MAAOkrD,IACjCA,IAGL3D,EAAAltE,UAAAg7E,6BAAA,SACEjzC,EACA44B,EACAmY,GAEA,IAEIn0C,EAFAjnC,EAASK,KAAKL,OACd4/E,GAAW,EAGf,OAAQv1C,EAAWqb,UACjB,KAAKjD,EAAAC,MAAMjyC,KAQT,GAPAw2B,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,EAAemc,WAAU,GAKvB/+E,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa6C,MAC5C,CACZw2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAIhB,MAEF,KAAK2W,EAAAC,MAAM/xC,MACT,GAAI05B,EAAW0e,QAAQjyC,MAAQ9I,EAAA+I,SAASwM,UAClB8mB,EAAW0e,QAASvlC,aAAexV,EAAAyV,YAAY6rC,SAC/CjlB,EAAW0e,QAASvlC,aAAexV,EAAAyV,YAAY2rC,OAClE,CAEDnoB,EAAO5mC,KAAK48E,yBAA4C5yC,EAAW0e,QAASka,EAAc,GAAoB,GAE1G5iE,KAAK0U,QAAQgW,WAAW1qB,KAAKs5E,iBAAiB1yC,EAAMoD,EAAWj/B,OACnE,MAUF,GAPA67B,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,EAAemc,WAAU,GAKvB/+E,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa+C,OAC5C,CACZs2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGhB,OAAQzrC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8nD,OAAQvgF,EAAOyD,IAAI,GAAIwjC,GACrD,MAEF,OACA,OACEA,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS+nD,OACTtuB,EAAAz5B,SAAS8nD,OACblgF,KAAKsvE,YAAY5b,aAAa/zD,GAC9BinC,GAEF,MAEF,OACA,OACEA,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+nD,OAAQxgF,EAAO0D,IAAI,GAAIujC,GACrD,MAEF,QACEA,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQk4D,OAAQpkD,GACpC,MAEF,QACEA,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQm4D,OAAQrkD,GACpC,MAEF,QACEx8B,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM8V,UAST,GARAonB,GAAW,EACX34C,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,EAAemc,WAAU,GAKvB/+E,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAa8C,YAC5C,CACZu2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGhB,OAAQzrC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk9C,OAAQ1uC,EAAM5mC,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,OACA,OACEwjC,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS2nD,OACTluB,EAAAz5B,SAASk9C,OACb1uC,EACA5mC,KAAKsvE,YAAY3b,YAAYh0D,IAE/B,MAEF,OACA,OACEinC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS2nD,OAAQn5C,EAAMjnC,EAAO0D,IAAI,IACvD,MAEF,QACEujC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS4nD,OAAQp5C,EAAMjnC,EAAOkE,IAAI,IACvD,MAEF,QACE+iC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6nD,OAAQr5C,EAAMjnC,EAAOmE,IAAI,IACvD,MAEF,QACEsG,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM+V,YAST,GARAmnB,GAAW,EACX34C,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,EAAemc,WAAU,GAKvB/+E,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAE5C,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAagD,YAC5C,CACZq2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAGhB,OAAQzrC,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8nD,OAAQt5C,EAAMjnC,EAAOyD,IAAI,IACvD,MAEF,OACA,OACEwjC,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAAS+nD,OACTtuB,EAAAz5B,SAAS8nD,OACbt5C,EACA5mC,KAAKsvE,YAAY3b,YAAYh0D,IAE/B,MAEF,OACA,OACEinC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+nD,OAAQv5C,EAAMjnC,EAAO0D,IAAI,IACvD,MAEF,QACEujC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgoD,OAAQx5C,EAAMjnC,EAAOkE,IAAI,IACvD,MAEF,QACE+iC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASioD,OAAQz5C,EAAMjnC,EAAOmE,IAAI,IACvD,MAEF,QACEsG,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMsW,YAQT,GAPA/xB,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,EAAemc,WAAU,GAKvB/+E,KAAKsvE,YAAYhwD,GAAE,KAErB,GADIqP,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAaiD,KAC5C,CACZo2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAMNpD,EAAO5mC,KAAKkrF,eAAetkD,EAAM5mC,KAAKsvE,aACtCtvE,KAAKsvE,YAAc5hE,EAAAkH,KAAKhR,KACxB,MAEF,KAAKw+C,EAAAC,MAAMuW,MAYT,GAXAhyB,EAAO5mC,KAAKs0E,kBACVtqC,EAAW0e,QACXka,GAAkBl1D,EAAAkH,KAAKG,KACnBrH,EAAAkH,KAAKxR,IACLw/D,EAAetjD,GAAE,GACf5R,EAAAkH,KAAKvR,IACLu/D,EAAc,GAKlB5iE,KAAKsvE,YAAYhwD,GAAE,KAAuB,CAC5C,IAAIqP,EAEEnB,EADN,GADImB,EAAiB3uB,KAAKsvE,YAAY3gD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAArkD,aAAakD,aAC5C,CACZm2B,EAAO5mC,KAAKsiF,qBAAqB90D,EAAUwc,EAAW0e,QAAS9hB,EAAMoD,GACrE,MAOJ,OAJAhqC,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAShB,OAPE7E,EAAO5mC,KAAKm9E,kBAAkBv2C,EAC5B5mC,KAAKsvE,YAAatvE,KAAKsvE,YAAY4R,SACnC,GAAO,EACPl3C,EAAW0e,SAIP1oD,KAAKsvE,YAAY74D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASspD,OAAQ96C,EAAMjnC,EAAOyD,KAAK,IACxD,MAEF,OACA,OACEwjC,EAAOjnC,EAAOmnC,OACZ9mC,KAAK0U,QAAQc,SACTq8C,EAAAz5B,SAASupD,OACT9vB,EAAAz5B,SAASspD,OACb96C,EACA5mC,KAAKsvE,YAAY1b,eAAej0D,IAElC,MAEF,OACA,OACEinC,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASupD,OAAQ/6C,EAAMjnC,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACE+G,QAAO,GACPw8B,EAAOjnC,EAAO8rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMyU,OAKT,OAJA92D,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf2oB,EAAWj/B,OAENpL,EAAO8rC,cAEhB,QAEE,OADArhC,QAAO,GACAzK,EAAO8rC,cAGlB,IAAK8zC,EAAU,OAAO34C,EACtB,IAAIv0B,EAAWrS,KAAKqS,SAChBgb,EAAShb,EAASywD,kBAAkB94B,EAAW0e,QAAS1oD,KAAK0wE,aACjE,OAAKrjD,EACErtB,KAAKqiF,eACVh1D,EACAuZ,EACAoD,EAAW0e,QACXr2C,EAASiuD,sBACTjuD,EAASkuD,yBACTqC,GAAkBl1D,EAAAkH,KAAKG,MAPLpV,EAAO8rC,eAY7B0jC,EAAAltE,UAAAm7E,uBAAA,SAAuBx2C,EAAqB3nB,GAC1C,IAAItf,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YAChB,OAAQzxD,EAAKxI,MACX,OACM2T,EAAKihD,YAAYzkC,EAAM3nB,KACzB2nB,EAAO5mC,KAAK0U,QAAQW,WAAU,GAC1B1V,EAAO+mC,MAAMmrB,EAAA/+B,QAAQq4D,cAAevkD,GACpCjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASo1C,OACrB7tE,EAAOmnC,OAAO+qB,EAAAz5B,SAASm1C,OACrB3mC,EACAjnC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMgnB,EAAKihD,YAAYzkC,EAAM3nB,KACzB2nB,EAAO5mC,KAAK0U,QAAQW,WAAU,GAC1B1V,EAAO+mC,MAAMmrB,EAAA/+B,QAAQs4D,eAAgBxkD,GACrCjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASo1C,OACrB7tE,EAAOmnC,OAAO+qB,EAAAz5B,SAASm1C,OACrB3mC,EACAjnC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACMgnB,EAAKihD,YAAYzkC,EAAM3nB,KACzB2nB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk1C,OAC5B1mC,EACAjnC,EAAOyD,IAAI,OAGf,MAEF,OACMgnB,EAAKihD,YAAYzkC,EAAM3nB,KACzB2nB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASk1C,OAC5B1mC,EACAjnC,EAAOyD,IAAI,SAGf,MAEF,QACMgnB,EAAKihD,YAAYzkC,EAAM3nB,KAEzB2nB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+yC,MAC5BvkC,EACAjnC,EAAOyD,IAAI,KAMnB,OAAOwjC,GAITuoC,EAAAltE,UAAAq3E,iBAAA,SAAiB1yC,EAAqB77B,GACpC,IAAI68D,EAAiB5nE,KAAK0wE,YAAY9I,eAClCj8D,EAASZ,EAAMY,OACfA,EAAOmf,eAAiB,IAAGnf,EAAOmf,eAAiB9qB,KAAKL,OAAO22C,iBAAiB3qC,EAAOC,iBAC3Fb,EAAM8f,aAAe+b,EACrBghC,EAAe/+C,eAAenc,KAAK3B,IAMrCokE,EAAAltE,UAAAipF,eAAA,SAAetkD,EAAqB3nB,GAClC,IAAItf,EAASK,KAAKL,OAClB,OAAQsf,EAAKxI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAO5mC,KAAKo9E,uBAAuBx2C,EAAM3nB,GAG3C,OACA,OACE,OAAOtf,EAAO+mC,MAAMmrB,EAAA/+B,QAAQg4C,OAAQlkC,GAEtC,OACA,OACE,OAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQi4C,OAAQnkC,GAEtC,OAAyB5mC,KAAK6vE,oBAAoBr7D,IAAIoyB,KAAOA,EAAO5mC,KAAKgjF,gBAAgBp8C,IACzF,OACE,OAAOjnC,EAAO+mC,MAAmB,IAAbznB,EAAK2sB,KAAaimB,EAAA/+B,QAAQi4C,OAASlZ,EAAA/+B,QAAQg4C,OAAQlkC,GAEzE,QACE,OAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASqzC,MAAO7kC,EAAMjnC,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOmnC,OAAO+qB,EAAAz5B,SAASszC,MAAO9kC,EAAMjnC,EAAOmE,IAAI,IAExD,QAEE,OADAsG,QAAO,GACAzK,EAAOyD,IAAI,KAMxB+rE,EAAAltE,UAAA63E,cAAA,SAAclzC,EAAqB3nB,GACjC,IAAItf,EAASK,KAAKL,OAClB,OAAQsf,EAAKxI,MACX,OACA,OACA,OACA,OACEmwB,EAAO5mC,KAAKo9E,uBAAuBx2C,EAAM3nB,GAG3C,QACA,OACA,OACE,OAAO2nB,EAET,OACA,OACE,OAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgzC,MAAOxkC,EAAMjnC,EAAO0D,IAAI,IAExD,OAAyBrD,KAAK6vE,oBAAoBr7D,IAAIoyB,KAAOA,EAAO5mC,KAAKgjF,gBAAgBp8C,IACzF,OACE,OAAoB,IAAb3nB,EAAK2sB,KACRjsC,EAAOmnC,OAAO+qB,EAAAz5B,SAASgzC,MAAOxkC,EAAMjnC,EAAO0D,IAAI,IAC/CujC,EAEN,QACE,OAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASuzC,MAAO/kC,EAAMjnC,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOmnC,OAAO+qB,EAAAz5B,SAASwzC,MAAOhlC,EAAMjnC,EAAOmE,IAAI,IAExD,QAEE,OADAsG,QAAO,GACAzK,EAAOyD,IAAI,KAMxB+rE,EAAAltE,UAAAk0E,eAAA,SACExjE,GAGA,IAAI6S,EAAUxlB,KAAKwlB,QACnBpb,OAAOuI,EAAc6S,SAAWA,GAChC,IAAI7lB,EAASK,KAAKL,OACd+U,EAAU1U,KAAK0U,QACnB1U,KAAKsvE,YAAc38D,EAAcsM,KACjC,IAAItC,EAAgB6I,EAAQ7I,cAE5B,OADA3c,KAAKw1E,gBAAgB74D,GACdhd,EAAOa,KAAKmc,EAAcvK,aAAc,CAC7CsC,EAAQc,SACJ7V,EAAO0D,IAAIsP,EAAcyZ,qBACzBzsB,EAAOyD,IAAIuP,EAAcyZ,qBAC7BzsB,EAAOyD,IACLuP,EAAc0I,aAAau2C,EAAA7gD,eAAe0K,WACtC,EACA9I,EAAcG,KAEnB4B,EAAQq+D,iBAIb5D,EAAAltE,UAAAm0E,wBAAA,SACEzjE,EACAgjE,gBAAA,IAAAA,MAAA,IAEA,IAAI72D,EAAUnM,EAAcmM,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAInf,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZuE,EAAW7qD,EAAK9K,GAAE,OAClB+rE,EAAiBpW,EACjB7qE,OAAOggB,EAAKu6C,YAAYn3D,EAAAxK,cAAcoC,QAAQwiB,MAC9C,EACAmrD,EAAiB/yE,KAAK0U,QAAQq+D,mBAElC,IAAmB,IAAArsD,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAAhC,IAAIqG,EAAMF,EAAA9c,MACb,GACEgd,EAAO7H,MAAQm7C,EAAA9gD,YAAY8N,OAC3BN,EAAOpK,QAAUvB,EAFnB,CAKA,IAAIgb,EAAerP,EAAQlU,QAAQujB,EAAM/L,MAAMpU,EAAAnL,YAAYod,QAC3D,IAAIknD,EAAYh5C,EAAM1O,KAClBukE,EAAkB7c,EAAUlT,eAC5B4gB,EAAkB1mD,EAAM1rB,UAAUoyE,gBACtC,GAAIA,EAAiB,CACnB,IAAIF,EAAWn0E,KAAKs0E,kBAAkBD,EAAiB1N,EACrD,IAEEA,EAAUiM,YAAc5yE,KAAK6vE,oBAAoBr7D,IAAI2/D,KACvDA,EAAWn0E,KAAK6yE,WAAWsB,IAE7BwB,EAAMjpE,KACJ/M,EAAO6mC,MAAMmgC,EAAUzU,SACrBvyD,EAAO2nC,UAAU+jD,EAAgBtY,GACjCoB,EACAqP,EACA71D,EAAMrC,mBAGL,CACL,IAAIF,EAAiBuC,EAAM1rB,UAAUmpB,eACrCuqD,EAAMjpE,KACJ/M,EAAO6mC,MAAMmgC,EAAUzU,SACrBvyD,EAAO2nC,UAAU+jD,EAAgBtY,GACjC3nD,GAAkB,EACdzrB,EAAO2nC,UACL2tC,EACI7qE,OAAOggB,EAAKu6C,YAAYh3C,EAAM/sB,OAAOgnB,MACrC,EAAIwD,EACRo4D,GAEF7c,EAAUjT,aAAa/zD,GAC3B6jF,EACA71D,EAAMrC,mHAKd,OAAOqqD,GAGTxG,EAAAltE,UAAAqpF,oBAAA,SACE1kD,EACAj0B,GAEA,IAAIhT,EAASK,KAAKL,OACdyqB,EAAOpqB,KAAK0wE,YACZ6a,EAASnhE,EAAKi+C,aAAa36D,EAAAkH,KAAKxR,KAChCooF,EAAS7rF,EAAOioC,KAAK,GAAG,EAC1BjoC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8nD,OACrBt5C,EACAjnC,EAAOyD,IAAIpD,KAAKwlB,QAAQ4xD,oBAE1BvlB,EAAAriC,WAAWppB,KAETqjC,EAAQ,cAAgB92B,EAAc/R,KAAO,IAAMwpB,EAAKu/C,iBACxD8hB,EAA8B,GAmBlC,OAlBAA,EAAW/+E,KACT/M,EAAOoqC,KACLpqC,EAAOiqC,GAAGH,EACR9pC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS6yC,MACrBtrE,EAAO6nC,UAAU+jD,EAAO3jE,MAAO4jE,GAC/B7rF,EAAOyD,IAAIuP,EAAcG,KAE3BnT,EAAOyD,IAAI,MAMjBqoF,EAAW/+E,KACT/M,EAAOyD,IAAI,IAEbgnB,EAAK0+C,cAAcyiB,GACnBnhE,EAAKy/C,gBACElqE,EAAO6pC,MAAMC,EAAOgiD,EAAY55B,EAAAriC,WAAWppB,MAEtD+oE,EAt+QA,CAA8B1hE,EAAAX,mBA0+Q9B,SAAS6nE,EACP/7D,EACArE,GAQA,GALA06D,EAA8B16D,EAAYxJ,MAAMY,OAAOskD,WAEvDif,EAA+Btd,EAAA/qC,mBAC7BjO,EAAQhY,KAAMgY,EAAQ1E,OAAQ0E,EAAQ0G,GAAG9R,EAAAnL,YAAY4iB,WAAW,GAE7DrM,EAAQyC,aAAau2C,EAAA7gD,eAAeiU,UAAzC,CAEA,IAAIQ,EAAU5M,EAAQ4M,QAClB/E,EAAYrW,OAAOuD,EAAA+jD,cAAc/jD,EAAAe,cAAcsW,SAAUzQ,EAAYgM,aACrE2jC,EAAOzjC,EAAUuC,UACrB,GAAIkhC,GAAQA,EAAK/3C,OAAQ,CACvB,IAAIsC,EAAMy1C,EAAK,GAGXz1C,EAAIgI,MAAQ9I,EAAA+I,SAASwM,SAA+BzU,EAAK0U,aAAexV,EAAAyV,YAAYC,QACtF6rD,EAAyDzgE,EAAKnN,MAC1D4iD,EAAK/3C,QAAU,KACjBsC,EAAMy1C,EAAK,IACHztC,MAAQ9I,EAAA+I,SAASwM,SAA+BzU,EAAK0U,aAAexV,EAAAyV,YAAYC,QACtF4rD,EAA8BC,EAC9BA,EAAyDzgE,EAAKnN,MAC1D4iD,EAAK/3C,OAAS,GAChBqZ,EAAQnY,MACNI,EAAAhD,eAAekZ,+BACflD,EAAU1V,MAAO,IAAKm5C,EAAK/3C,OAAOT,aAItC8Z,EAAQnY,MACNI,EAAAhD,eAAeiZ,wBACfjV,EAAI1D,SAKVya,EAAQnY,MACNI,EAAAhD,eAAeiZ,wBACfjV,EAAI1D,YAIRya,EAAQnY,MACNI,EAAAhD,eAAew6E,wCACfxkE,EAAU1V,MAAO,IAAK,MAS5B,SAAgB0rE,EAAQ92E,EAAgBg2E,EAAwB12D,GAC9D,IAAI9S,EAASwpE,EAAMxpE,OACnB,GAAc,GAAVA,EAAa,OAAOxM,EAAO6qC,MAC/B,GAAc,GAAVr+B,EAAa,CACf,IAAIu/E,EAAS/V,EAAM,GACnB,GAAI9jB,EAAA7a,kBAAkB00C,IAAWzsE,EAAM,OAAOysE,EAC9C,GAAI75B,EAAA9a,gBAAgB20C,IAAW75B,EAAApiC,aAAa8uB,MAAO,CAGjD,IAFA,IAAIo9B,EAAQ9pB,EAAA5Y,mBAAmByyC,GAC3BhiD,EAAW,IAAIziC,MAAqB00E,GAC/Bt7E,EAAI,EAAGA,EAAIs7E,IAASt7E,EAAGqpC,EAASrpC,GAAKwxD,EAAA1Y,cAAcuyC,EAAQrrF,GACpE,OAAOV,EAAO6pC,MAAMqoB,EAAA9Y,aAAa2yC,GAAShiD,EAAUzqB,IAGxD,OAAOtf,EAAO6pC,MAAM,KAAMmsC,EACxB12D,GAAQ4yC,EAAAriC,WAAWm8D,KACf95B,EAAA7a,kBAAkB2+B,EAAMxpE,EAAS,IACjC8S,GAnjRKvf,EAAAyvE,WAmiRbzvE,EAAA+2E,yFCvyRA,SAAYhsE,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,uEACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,mFACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,iIACAA,IAAA,yDACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,8FACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,wDACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAtIF,CAAY/K,EAAA+K,iBAAA/K,EAAA+K,eAAc,KA0I1B/K,EAAAgL,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,mkBCrRnB,IAoFgBm6D,EApFhB4mB,EAAAzrF,EAAA,IAODsN,EAAAtN,EAAA,GAIAwN,EAAAxN,EAAA,GAUAuN,EAAAvN,EAAA,GAOA0xD,EAAA1xD,EAAA,GAsBAyxD,EAAAzxD,EAAA,GASA0N,EAAA1N,EAAA,IAKAyN,EAAAzN,EAAA,GAIAqN,EAAArN,EAAA,GAMA0J,EAAA1J,EAAA,GAubA,SAAgB0kF,EAEdgH,EAEA5pF,EAEAgqB,EAEAkb,EAEAy7B,EAEAmD,EAEA+lB,QAAA,IAAAA,OAAA,GAEA,IAAInsF,EAASksF,EAASlsF,OAUlBosF,GAAY,EAEhB,OAAQ9pF,EAAUmQ,cAIhB,KAAK4yD,EAAegnB,UAClB,IAAI/sE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEA,EAAKK,GAAE,KAAwBL,EAAKK,GAAE,KACzC3f,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO8rC,cAK3B,KAAKu5B,EAAeknB,QACdjtE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEA,EAAKK,GAAE,GACV3f,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO8rC,cAK3B,KAAKu5B,EAAemnB,UACdltE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEA,GAAQvR,EAAAkH,KAAKhR,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO8rC,cAK3B,KAAKu5B,EAAeonB,SACdntE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEA,EAAKK,GAAE,GACV3f,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO8rC,cAK3B,KAAKu5B,EAAeqnB,YACdptE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEA,EAAKK,GAAE,KACV3f,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO8rC,cAK3B,KAAKu5B,EAAesnB,SACdrtE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,GADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,MACvBqb,EAAM,OAAOtf,EAAO8rC,cAEzB,GADIsnB,EAAY9zC,EAAK0P,eACN,CACb,IAAI1U,EAAiB4xE,EAASrmE,QAAQvL,eACtC,GAAIA,GAAkB84C,EAAU3lC,eAAenT,GAAiB,OAAOta,EAAOyD,IAAI,GAEpF,OAAOzD,EAAOyD,IAAI,GAEpB,KAAK4hE,EAAeunB,QACdttE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,GADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,MACvBqb,EAAM,OAAOtf,EAAO8rC,cAEzB,KADI9c,GAAiB1P,EAAK0P,gBACL,OAAOhvB,EAAOyD,IAAI,GACvC,IAAI0f,EAAiB6L,GAAe1sB,UACpC,OAAOtC,EAAOyD,IAAI0f,EAAegJ,QAAQ+/D,EAASrmE,QAAQnJ,gBAAkB,EAAI,GAElF,KAAK2oD,EAAewnB,YACdvtE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,GACD0P,GAAiB1P,EAAK0P,gBAEnBhvB,EAAOyD,IAAIurB,GAAe69D,YAAc,EAAI,GADvB7sF,EAAOyD,IAAI,GAFrBzD,EAAO8rC,cAK3B,KAAKu5B,EAAeynB,WACdxtE,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEtf,EAAOyD,IAAI6b,EAAKmzC,mBAAqB,EAAI,GAD9BzyD,EAAO8rC,cAG3B,KAAKu5B,EAAe3hB,WACdpkC,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEtf,EAAOyD,IAAI6b,EAAKK,GAAE,KAAuB,EAAI,GADlC3f,EAAO8rC,cAG3B,KAAKu5B,EAAe0nB,UAElB,GADAb,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KAE1B+oF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAI7yB,EAAUizE,EAASx5E,SAASywD,kBAC9B37B,EAAS,GACT0kD,EAASnb,YACThjE,EAAAkH,KAAKG,KACLnH,EAAAwyD,WAAWysB,SAEb,OAAOltF,EAAOyD,IAAIwV,EAAU,EAAI,GAElC,KAAKosD,EAAe8nB,WAElB,GADAjB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KAE1B+oF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAI7E,EAAOilD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK89C,MAExD,OADAm5B,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACrBjE,EAAOyD,IAAIyuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAAQ,EAAI,GAEtE,KAAKmwB,EAAe4N,UACd3zD,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACvBqb,EACEtf,EAAOyD,IAAI6b,EAAK2zD,UAAY,EAAI,GADrBjzE,EAAO8rC,cAG3B,KAAKu5B,EAAe+nB,OAElB,GADAlB,EAASvc,YAAcuc,EAASn3E,QAAQI,UAEtCk4E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAIymB,EAAoBjmC,EAAe,GAAGimC,SACtCtrB,OAAI,EAkBR,OAjBIilD,EAASn3E,QAAQc,SAEfotD,EAAetjD,GAAE,IAAuBsjD,EAAeh3B,MAAQ,IACjEigD,EAASvc,YAAc5hE,EAAAkH,KAAKnR,IAC5BmjC,EAAOjnC,EAAOyD,IAAI8uD,IAElBtrB,EAAOjnC,EAAO0D,IAAI6uD,EAAU,GAI1B0Q,EAAetjD,GAAE,IAA8C,IAAvBsjD,EAAeh3B,MACzDigD,EAASvc,YAAc5hE,EAAAkH,KAAKlR,IAC5BkjC,EAAOjnC,EAAO0D,IAAI6uD,EAAU,IAE5BtrB,EAAOjnC,EAAOyD,IAAI8uD,GAGftrB,EAET,KAAKo+B,EAAeioB,QAElB,GADApB,EAASvc,YAAcuc,EAASn3E,QAAQI,UAEtCk4E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZymB,EAAoBjmC,EAAe,GAAGimC,SAC1C9nD,OAAOP,EAAAJ,WAAWyoD,IAClB,IAAIu3B,EAAYyD,IAASh7B,GACrBtrB,OAAI,EAkBR,OAjBIilD,EAASn3E,QAAQc,SAEfotD,EAAetjD,GAAE,IAAuBsjD,EAAeh3B,MAAQ,IACjEigD,EAASvc,YAAc5hE,EAAAkH,KAAKnR,IAC5BmjC,EAAOjnC,EAAOyD,IAAIqmF,IAElB7iD,EAAOjnC,EAAO0D,IAAIomF,EAAW,GAI3B7mB,EAAetjD,GAAE,IAA8C,IAAvBsjD,EAAeh3B,MACzDigD,EAASvc,YAAc5hE,EAAAkH,KAAKlR,IAC5BkjC,EAAOjnC,EAAO0D,IAAIomF,EAAW,IAE7B7iD,EAAOjnC,EAAOyD,IAAIqmF,GAGf7iD,EAET,KAAKo+B,EAAev3C,SAElB,GADAo+D,EAASvc,YAAcuc,EAASn3E,QAAQI,UAEtCk4E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7CsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cAChB,IAAIsnB,EACJ,KADIA,EAAY9mC,EAAe,GAAG0C,gBAMhC,OAJAk9D,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEhB,IAAI/4B,OAAM,EACV,GAAIy0B,EAASh7B,OAAQ,CACnB,GACEg7B,EAAS,GAAG1wB,MAAQ9I,EAAA+I,SAASwM,SACTikB,EAAS,GAAIhkB,aAAexV,EAAAyV,YAAYC,OAM5D,OAJAwoE,EAASx+E,MACPI,EAAAhD,eAAeiZ,wBACfyjB,EAAS,GAAGp8B,OAEPpL,EAAO8rC,cAEhB,IAAI/d,EAAsCyZ,EAAS,GAAI7lC,MACnDqsB,EAAQolC,EAAUj0C,QAAUi0C,EAAUj0C,QAAQ5d,IAAIwsB,GAAa,KACnE,IAAMC,GAASA,EAAMlX,MAAQm7C,EAAA9gD,YAAY8N,MAKvC,OAJAitE,EAASx+E,MACPI,EAAAhD,eAAe4iF,yBACflmD,EAAS,GAAGp8B,MAAOgoD,EAAU3gD,aAAcsb,GAEtC/tB,EAAO8rC,cAEhB/4B,EAAiBib,EAAOrC,kBAExB5Y,EAASqgD,EAAU3mC,oBAErB,OAAIy/D,EAASn3E,QAAQc,SAEfotD,EAAetjD,GAAE,IAAuBsjD,EAAeh3B,MAAQ,IACjEigD,EAASvc,YAAc5hE,EAAAkH,KAAKnR,IACrB9D,EAAOyD,IAAIsP,IAEX/S,EAAO0D,IAAIqP,GAIhBkwD,EAAetjD,GAAE,IAA8C,IAAvBsjD,EAAeh3B,MACzDigD,EAASvc,YAAc5hE,EAAAkH,KAAKlR,IACrB/D,EAAO0D,IAAIqP,IAEX/S,EAAOyD,IAAIsP,GAOxB,KAAKsyD,EAAerS,IACpB,KAAKqS,EAAekoB,IACpB,KAAKloB,EAAesoB,OAClB,GACEC,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAIxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAEpD,IADI6b,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEhB,IAAI9E,GAAe,EACnB,OAAQ1kC,EAAUmQ,cAChB,KAAK4yD,EAAerS,IAClB,OAAQ1zC,EAAKxI,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ+6C,OAAQ,MAC1C,OACA,OACElnC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQ06D,OACR37B,EAAA/+B,QAAQ+6C,OACZ,MAEF,OACA,OAAqBlnC,EAAKkrB,EAAA/+B,QAAQ06D,OAEpC,MAEF,KAAKxoB,EAAekoB,IAClB,OAAQjuE,EAAKxI,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQg7C,OAAQ,MAC1C,OACA,OACEnnC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQ26D,OACR57B,EAAA/+B,QAAQg7C,OACZ,MAEF,OACA,OAAqBnnC,EAAKkrB,EAAA/+B,QAAQ26D,OAEpC,MAEF,KAAKzoB,EAAesoB,OAClB,OAAQzB,EAASvc,YAAY74D,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQi7C,UAAW,MAC7C,OACA,OACEpnC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQ46D,UACR77B,EAAA/+B,QAAQi7C,UACZ,MAEF,OACA,OAAqBpnC,EAAKkrB,EAAA/+B,QAAQ46D,WAKxC,OAAW,GAAP/mD,GACFklD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,eAET9rC,EAAO+mC,MAAMC,EAAI17B,GAE1B,KAAK+5D,EAAe2oB,KAClB,GACEJ,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAEpD,IADI6b,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEhB,IAAIvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GACnD2nB,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAOilD,EAASzO,uBACdz9E,EAAOmnC,OAAO+qB,EAAAz5B,SAASw1D,QAAS3iF,EAAMC,GACtC+T,GAIJ,OACA,OACE2nB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASw1D,QAAS3iF,EAAMC,GAC7C,MAEF,OACA,OACE07B,EAAOjnC,EAAOmnC,OACZ+kD,EAASn3E,QAAQc,SACbq8C,EAAAz5B,SAASy1D,QACTh8B,EAAAz5B,SAASw1D,QACb3iF,EAAMC,GAER,MAEF,OACA,OACE07B,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASy1D,QAAS5iF,EAAMC,GAC7C,MAEF,QACE2gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAET,KAAKo+B,EAAe8oB,KAClB,GACEP,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAEpD,IADI6b,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GACnD2nB,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAOilD,EAASzO,uBACdz9E,EAAOmnC,OAAO+qB,EAAAz5B,SAAS21D,QAAS9iF,EAAMC,GACtC+T,GAEF,MAEF,OACA,OACE2nB,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS21D,QAAS9iF,EAAMC,GAC7C,MAEF,OACA,OACE07B,EAAOjnC,EAAOmnC,OACZ+kD,EAASn3E,QAAQc,SACbq8C,EAAAz5B,SAAS41D,QACTn8B,EAAAz5B,SAAS21D,QACb9iF,EAAMC,GAER,MAEF,OACA,OACE07B,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAAS41D,QAAS/iF,EAAMC,GAC7C,MAEF,QACE2gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAET,KAAKo+B,EAAeipB,IAClB,GACEV,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ7E,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACA,OACE,IAGIy3E,GAHA9jE,EAAOyhE,EAASnb,aAGErI,aAAa36D,EAAAkH,KAAKxR,KACpC+qF,EAAkB/jE,EAAK2+C,oBAAoBr7D,EAAAkH,KAAKxR,KAAKwkB,MACrDwmE,EAAkBF,EAAWtmE,MAGjCgf,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASspD,OAC5B/hF,EAAOmnC,OAAO+qB,EAAAz5B,SAASk9C,OACrB31E,EAAO6nC,UACL2mD,EACAxuF,EAAOmnC,OAAO+qB,EAAAz5B,SAASo1C,OACrB7tE,EAAO6nC,UAAU4mD,EAAiBnjF,GAClCtL,EAAOyD,IAAI,MAGfzD,EAAO2nC,UAAU8mD,EAAiBv8B,EAAAriC,WAAWppB,MAE/CzG,EAAO2nC,UAAU6mD,EAAiBt8B,EAAAriC,WAAWppB,MAG/CgkB,EAAK0+C,cAAcolB,GACnB,MAEF,OACE,IAAIx5E,EAAUm3E,EAASn3E,QACnB0V,EAAOyhE,EAASnb,YAChB2d,EAAS35E,EAAQc,SAEjB04E,EAAa9jE,EAAKi+C,aAAa3zD,EAAQI,WACvCq5E,EAAkB/jE,EAAK2+C,oBAAoBr0D,EAAQI,WAAW8S,MAC9DwmE,EAAkBF,EAAWtmE,MAEjCgf,EAAOjnC,EAAOmnC,OAAOunD,EAASx8B,EAAAz5B,SAASupD,OAAS9vB,EAAAz5B,SAASspD,OACvD/hF,EAAOmnC,OAAOunD,EAASx8B,EAAAz5B,SAAS2nD,OAASluB,EAAAz5B,SAASk9C,OAChD31E,EAAO6nC,UACL2mD,EACAxuF,EAAOmnC,OAAOunD,EAASx8B,EAAAz5B,SAASipD,OAASxvB,EAAAz5B,SAASo1C,OAChD7tE,EAAO6nC,UAAU4mD,EAAiBnjF,GAClCojF,EAAS1uF,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAGzCzD,EAAO2nC,UAAU8mD,EAAiB15E,EAAQq+D,iBAE5CpzE,EAAO2nC,UAAU6mD,EAAiBz5E,EAAQq+D,iBAG5C3oD,EAAK0+C,cAAcolB,GACnB,MAEF,OAGMA,GAFA9jE,EAAOyhE,EAASnb,aAEErI,aAAa36D,EAAAkH,KAAKvR,KACpC8qF,EAAkB/jE,EAAK2+C,oBAAoBr7D,EAAAkH,KAAKvR,KAAKukB,MACrDwmE,EAAkBF,EAAWtmE,MAGjCgf,EAAOjnC,EAAOmnC,OAAO+qB,EAAAz5B,SAASupD,OAC5BhiF,EAAOmnC,OAAO+qB,EAAAz5B,SAAS2nD,OACrBpgF,EAAO6nC,UACL2mD,EACAxuF,EAAOmnC,OAAO+qB,EAAAz5B,SAASipD,OACrB1hF,EAAO6nC,UAAU4mD,EAAiBnjF,GAClCtL,EAAO0D,IAAI,MAGf1D,EAAO2nC,UAAU8mD,EAAiBv8B,EAAAriC,WAAWnpB,MAE/C1G,EAAO2nC,UAAU6mD,EAAiBt8B,EAAAriC,WAAWnpB,MAG/C+jB,EAAK0+C,cAAcolB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACEtnD,EAAO37B,EACP,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQw7D,OAAQrjF,GACpC,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQy7D,OAAQtjF,GACpC,MAEF,QACE4gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAET,KAAKo+B,EAAe2F,IAClB,GACE4iB,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAM,GACrD0nB,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OACA,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASq0C,MAAO,MAC1C,OACA,OACA,OACA,QAAsB9lC,EAAKkrB,EAAAz5B,SAASs0C,MAAO,MAC3C,OAAqB/lC,EAAKkrB,EAAAz5B,SAASu0C,MAAO,MAC1C,OAAqBhmC,EAAKkrB,EAAAz5B,SAASw0C,MAAO,MAC1C,OACEjmC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAASu0C,MACT9a,EAAAz5B,SAASq0C,MACb,MAEF,OACE9lC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAASw0C,MACT/a,EAAAz5B,SAASs0C,MACb,MAEF,QACE,OAAO/sE,EAAOmnC,OAAO+qB,EAAAz5B,SAASo2D,OAAQvjF,EAAMC,GAE9C,QACE,OAAOvL,EAAOmnC,OAAO+qB,EAAAz5B,SAASq2D,OAAQxjF,EAAMC,GAE9C,QAKE,OAJA2gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAGdrhB,EAAOyhE,EAASnb,YAApB,IACIoC,EAAa7zD,EAAKw0C,eAClBi7B,EAAatkE,EAAKi+C,aAAappD,GACnCmL,EAAKw+C,aAAa8lB,EAAW9mE,MAAO/Z,EAAAw5D,WAAWiE,SAC3C4iB,EAAa9jE,EAAK2+C,oBAAoB9pD,GAG1C,OAFAmL,EAAKw+C,aAAaslB,EAAWtmE,MAAO/Z,EAAAw5D,WAAWiE,SAC/ClhD,EAAK0+C,cAAc4lB,GACZ/uF,EAAOirC,OACZjrC,EAAO6nC,UAAUknD,EAAW9mE,MAAO3c,GACnCtL,EAAO6nC,UAAU0mD,EAAWtmE,MAAO1c,GACnCvL,EAAOmnC,OAAOH,EACZhnC,EAAO2nC,UAAUonD,EAAW9mE,MAAOkrD,GACnCnzE,EAAO2nC,UAAU4mD,EAAWtmE,MAAOkrD,KAIzC,KAAK9N,EAAe2pB,IAClB,GACEpB,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAM,GACrD0nB,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OACA,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASyzC,MAAO,MAC1C,OACA,OACA,OACA,QAAsBllC,EAAKkrB,EAAAz5B,SAAS0zC,MAAO,MAC3C,OAAsBnlC,EAAKkrB,EAAAz5B,SAAS2zC,MAAO,MAC3C,OAAsBplC,EAAKkrB,EAAAz5B,SAAS4zC,MAAO,MAC3C,OACErlC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAAS2zC,MACTla,EAAAz5B,SAASyzC,MACb,MAEF,OACEllC,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAAS4zC,MACTna,EAAAz5B,SAAS0zC,MACb,MAEF,QACE,OAAOnsE,EAAOmnC,OAAO+qB,EAAAz5B,SAASw2D,OAAQ3jF,EAAMC,GAE9C,QACE,OAAOvL,EAAOmnC,OAAO+qB,EAAAz5B,SAASy2D,OAAQ5jF,EAAMC,GAE9C,QAKE,OAJA2gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAGdrhB,EAAOyhE,EAASnb,YAChBoC,EAAa7zD,EAAKw0C,eAClBi7B,EAAatkE,EAAKi+C,aAAappD,GACnCmL,EAAKw+C,aAAa8lB,EAAW9mE,MAAO/Z,EAAAw5D,WAAWiE,SAC3C4iB,EAAa9jE,EAAK2+C,oBAAoB9pD,GAG1C,OAFAmL,EAAKw+C,aAAaslB,EAAWtmE,MAAO/Z,EAAAw5D,WAAWiE,SAC/ClhD,EAAK0+C,cAAc4lB,GACZ/uF,EAAOirC,OACZjrC,EAAO6nC,UAAUknD,EAAW9mE,MAAO3c,GACnCtL,EAAO6nC,UAAU0mD,EAAWtmE,MAAO1c,GACnCvL,EAAOmnC,OAAOH,EACZhnC,EAAO2nC,UAAUonD,EAAW9mE,MAAOkrD,GACnCnzE,EAAO2nC,UAAU4mD,EAAWtmE,MAAOkrD,KAIzC,KAAK9N,EAAe7S,KACpB,KAAK6S,EAAe8pB,MAClB,GACEvB,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ9E,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAOxL,EAC3B,QACE07B,EAAK1kC,EAAUmQ,cAAgB4yD,EAAe7S,KAC1CN,EAAA/+B,QAAQi8D,QACRl9B,EAAA/+B,QAAQk8D,SACZ,MAEF,QACEroD,EAAK1kC,EAAUmQ,cAAgB4yD,EAAe7S,KAC1CN,EAAA/+B,QAAQm8D,QACRp9B,EAAA/+B,QAAQo8D,SACZ,MAEF,QAKE,OAJArD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAGlB,OAAO9rC,EAAO+mC,MAAMC,EAAI17B,GAE1B,KAAK+5D,EAAemqB,SAClB,GACE5B,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GACnD0nB,OAAE,EACN,OAAQ1nB,EAAKxI,MAEX,QAAqBkwB,EAAKkrB,EAAAz5B,SAASg3D,YAAa,MAChD,QAAqBzoD,EAAKkrB,EAAAz5B,SAASi3D,YAAa,MAChD,QAKE,OAJAxD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAGlB,OAAO9rC,EAAOmnC,OAAOH,EAAI17B,EAAMC,GAEjC,KAAK85D,EAAesqB,QAClB,GACE/B,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ7E,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAO37B,EACP,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQy8D,WAAYtkF,GACxC,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ08D,WAAYvkF,GACxC,MAEF,QACE4gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAET,KAAKo+B,EAAeyqB,YAClB,GACEzC,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAEhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASvc,YAAcrwD,EACvB4sE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ7E,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACMxL,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK/Q,IAAG,GAC3D+iC,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ48D,eAAgBzkF,GAC5C,MAEF,OACA,OACMA,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAC3D8iC,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ68D,eAAgB1kF,GAC5C,MAEF,OACA,OACMA,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQc,SACb9H,EAAAkH,KAAK9Q,IACL4J,EAAAkH,KAAK/Q,IAAG,GAGd+iC,EAAOjnC,EAAO+mC,MACZmlD,EAASn3E,QAAQc,SACbq8C,EAAA/+B,QAAQ68D,eACR99B,EAAA/+B,QAAQ48D,eACZzkF,GAEF,MAEF,QACMA,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAC3DwjC,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ88D,eAAgB3kF,GAC5C,MAEF,QACMA,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKvR,IAAG,GAC3DujC,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQ+8D,eAAgB5kF,GAC5C,MAEF,QACE4gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAKlB,OADAogD,EAASvc,YAAcrwD,EAChB2nB,EAET,KAAKo+B,EAAe8qB,KAClB,GACEvC,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAMT,OALAusE,EAASvc,YAAcrwD,EACvB4sE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ7E,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,QACEmwB,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQi9D,QAAS9kF,GACrC,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQk9D,QAAS/kF,GACrC,MAEF,QACE4gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAET,KAAKo+B,EAAeirB,MAClB,GACE1C,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAEpD,IADImb,EAAO4sE,EAASvc,aACXhwD,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,OAENpL,EAAO8rC,cAEZ7E,OAAI,EACR,OAAQ3nB,EAAKxI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAO37B,EACP,MAGF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQo9D,SAAUjlF,GACtC,MAEF,QACE27B,EAAOjnC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQq9D,SAAUllF,GACtC,MAEF,QACE4gF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOjnC,EAAO8rC,cAIlB,OAAO7E,EAKT,KAAKo+B,EAAep9B,KAClB,GACEolD,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cACZxsB,EAAOgN,EAAe,GAA1B,IACImkE,EACFxtB,GAAkBl1D,EAAAkH,KAAK89C,MACvBzzC,EAAKK,GAAE,IACPsjD,EAAetjD,GAAE,IACjBsjD,EAAeh3B,KAAO3sB,EAAK2sB,KACzBg3B,EAAiB3jD,EACjBhU,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAK5B,IADIu7E,GADA1I,GAAcxgD,EAASh7B,SACI,EAAImkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACpE,EAEd,OADAA,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,cAEhB,IAAI8kD,OAAQ,EACRC,EAAevxE,EAAKizC,SACxB,GAAmB,GAAfy1B,GAAkB,CAEpB,IADA4I,EAAWD,EAAwBnpD,EAAS,GAAI0kD,IACjC,EAEb,OADAA,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,cAEhB,GAAI8kD,EAAWC,EAMb,OALA3E,EAASx+E,MACPI,EAAAhD,eAAegmF,6CACftpD,EAAS,GAAGp8B,MAAO,YAAa,IAAKylF,EAAa9kF,YAEpDmgF,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,cAEhB,IAAK5hC,EAAAJ,WAAW8mF,GAMd,OALA1E,EAASx+E,MACPI,EAAAhD,eAAeimF,0BACfvpD,EAAS,GAAGp8B,MAAO,aAErB8gF,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,mBAGhB8kD,EAAWC,EAGb,OADA3E,EAASvc,YAAc8gB,EAChBzwF,EAAOioC,KACZ3oB,EAAKizC,SACLjzC,EAAKK,GAAG,GACRrU,EACAmlF,EAAQ38B,eACR48B,EACAE,GAGJ,KAAKvrB,EAAex+B,MAElB,GADAqlD,EAASvc,YAAc5hE,EAAAkH,KAAKG,KAE1Bi4E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7CsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cACZxsB,EAAOgN,EAAe,GACtBhhB,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO4gF,EACPD,EAASvX,kBAAkBntC,EAAS,GAClCy7B,EAAc,GAGhBipB,EAASvX,kBACPntC,EAAS,GACTloB,EACAA,EAAKK,GAAE,GACJ,EACA,GAfT,IAiBIqxE,EAAS9E,EAASvc,YAgBtB,GAdErwD,EAAKK,GAAE,MAEJqxE,EAAOrxE,GAAE,IACVqxE,EAAO/kD,KAAO3sB,EAAK2sB,QAGrB1gC,EAAO2gF,EAAS1O,kBAAkBjyE,EAChCylF,EAAQ1xE,GACR,GAAO,EACPkoB,EAAS,IAEXwpD,EAAS1xE,IAEPoxE,EAAYlpD,EAASh7B,QAAU,EAAImkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACxE,EAEd,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,cAEZ8kD,OAAQ,EACRC,EAAevxE,EAAKizC,SACxB,GAAuB,GAAnB/qB,EAASh7B,OAAa,CAExB,IADAokF,EAAWD,EAAwBnpD,EAAS,GAAI0kD,IACjC,EAEb,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,cAEhB,GAAI8kD,EAAWC,EAMb,OALA3E,EAASx+E,MACPI,EAAAhD,eAAegmF,6CACftpD,EAAS,GAAGp8B,MAAO,YAAa,IAAKylF,EAAa9kF,YAEpDmgF,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,cAEhB,IAAK5hC,EAAAJ,WAAW8mF,GAMd,OALA1E,EAASx+E,MACPI,EAAAhD,eAAeimF,0BACfvpD,EAAS,GAAGp8B,MAAO,aAErB8gF,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,mBAGhB8kD,EAAWC,EAGb,OADA3E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO6mC,MAAMvnB,EAAKizC,SAAUjnD,EAAMC,EAAMylF,EAAOl9B,eAAgB48B,EAAWE,GAKnF,KAAKvrB,EAAe78B,YAClB,IAAK0jD,EAASn3E,QAAQW,WAAU,IAAmB,MACnD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cAEZ2kD,GADAnxE,EAAOgN,EAAe,IAEnB3M,GAAE,IACPsjD,EAAetjD,GAAE,IACjBsjD,EAAeh3B,KAAO3sB,EAAK2sB,KACzBg3B,EAAiB3jD,EACrB,IAAKA,EAAKK,GAAE,GAMV,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAI5B,OADIu7E,EAA+B,GAAnBlpD,EAASh7B,OAAcmkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACxE,GACdA,EAASvc,YAAc8gB,EAChBzwF,EAAO8rC,gBAEhBogD,EAASvc,YAAc8gB,EAChBzwF,EAAOwoC,YACZlpB,EAAKizC,SACLjnD,EACAmlF,EAAQ38B,eACR48B,IAGJ,KAAKrrB,EAAe38B,aAClB,IAAKwjD,EAASn3E,QAAQW,WAAU,IAAmB,MAEnD,GADAw2E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KAE1Bi4E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7CsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cAEhB,KADIxsB,EAAOgN,EAAe,IAChB3M,GAAE,IAAuBL,EAAK2sB,KAAO,EAK7C,OAJAigD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO4gF,EACPD,EAASvX,kBACPntC,EAAS,GACTy7B,EAAc,GAGhBipB,EAASvX,kBACPntC,EAAS,GACTloB,EACAA,EAAKK,GAAE,GACJ,EACA,GAELqxE,EAAS9E,EAASvc,YAgBtB,OAdErwD,EAAKK,GAAE,MAEJqxE,EAAOrxE,GAAE,IACVqxE,EAAO/kD,KAAO3sB,EAAK2sB,QAGrB1gC,EAAO2gF,EAAS1O,kBAAkBjyE,EAChCylF,EAAQ1xE,GACR,GAAO,EACPkoB,EAAS,IAEXwpD,EAAS1xE,IAEPoxE,EAA+B,GAAnBlpD,EAASh7B,OAAcmkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACxE,GACdA,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,gBAEhBogD,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO0oC,aAAappB,EAAKizC,SAAUjnD,EAAMC,EAAMylF,EAAOl9B,eAAgB48B,IAE/E,KAAKrrB,EAAe4rB,WACpB,KAAK5rB,EAAe6rB,WACpB,KAAK7rB,EAAe8rB,WACpB,KAAK9rB,EAAe+rB,UACpB,KAAK/rB,EAAegsB,WACpB,KAAKhsB,EAAeisB,YAClB,IAAKpF,EAASn3E,QAAQW,WAAU,IAAmB,MACnD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cAEhB,KADIxsB,EAAOgN,EAAe,IAChB3M,GAAE,IAAuBL,EAAK2sB,KAAO,EAK7C,OAJAigD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO4gF,EACPD,EAASvX,kBAAkBntC,EAAS,GAClCy7B,EAAc,GAGhBipB,EAASvX,kBACPntC,EAAS,GACTloB,EACAA,EAAKK,GAAE,GACJ,EACA,GAELqxE,EAAS9E,EAASvc,YAgBtB,GAdErwD,EAAKK,GAAE,MAEJqxE,EAAOrxE,GAAE,IACVqxE,EAAO/kD,KAAO3sB,EAAK2sB,QAGrB1gC,EAAO2gF,EAAS1O,kBAAkBjyE,EAChCylF,EAAQ1xE,GACR,GAAO,EACPkoB,EAAS,IAEXwpD,EAAS1xE,IAEPoxE,EAA+B,GAAnBlpD,EAASh7B,OAAcmkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACxE,EAEd,OADAA,EAASvc,YAAcqhB,EAChBhxF,EAAO8rC,cAEZ9E,OAAE,EACN,OAAQ1kC,EAAUmQ,cAChB,QAAShI,QAAO,GAChB,KAAK46D,EAAe4rB,WAAejqD,EAAKkrB,EAAA7vB,YAAYkvD,IAAM,MAC1D,KAAKlsB,EAAe6rB,WAAelqD,EAAKkrB,EAAA7vB,YAAYmvD,IAAM,MAC1D,KAAKnsB,EAAe8rB,WAAenqD,EAAKkrB,EAAA7vB,YAAYovD,IAAM,MAC1D,KAAKpsB,EAAe+rB,UAAepqD,EAAKkrB,EAAA7vB,YAAYqvD,GAAM,MAC1D,KAAKrsB,EAAegsB,WAAerqD,EAAKkrB,EAAA7vB,YAAYsvD,IAAM,MAC1D,KAAKtsB,EAAeisB,YAAetqD,EAAKkrB,EAAA7vB,YAAYuvD,KAGtD,OADA1F,EAASvc,YAAcqhB,EAChBhxF,EAAO4oC,WACZ5B,EAAI1nB,EAAKizC,SAAUm+B,EAAWplF,EAAMC,EAAMylF,EAAOl9B,gBAGrD,KAAKuR,EAAev8B,eAClB,IAAKojD,EAASn3E,QAAQW,WAAU,IAAmB,MACnD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAC9C,OAAOlsF,EAAO8rC,cAEhB,KADIxsB,EAAOgN,EAAe,IAChB3M,GAAE,IAAuBL,EAAK2sB,KAAO,EAK7C,OAJAigD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO4gF,EACPD,EAASvX,kBAAkBntC,EAAS,GAClCy7B,EAAc,GAGhBipB,EAASvX,kBACPntC,EAAS,GACTloB,EACAA,EAAKK,GAAE,GACJ,EACA,GAELqxE,EAAS9E,EAASvc,YAhBtB,IAwCI+gB,EAvBAllF,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAC7CwpD,EAAM,GAuBR,OAnBE1xE,EAAKK,GAAE,MAEJqxE,EAAOrxE,GAAE,IACVqxE,EAAO/kD,KAAO3sB,EAAK2sB,QAGrB1gC,EAAO2gF,EAAS1O,kBAAkBjyE,EAChCylF,EAAQ1xE,GACR,GAAO,EACPkoB,EAAS,IAEXh8B,GAAO0gF,EAAS1O,kBAAkBhyE,GAChCwlF,EAAQ1xE,GACR,GAAO,EACPkoB,EAAS,IAEXwpD,EAAS1xE,IAEPoxE,EAA+B,GAAnBlpD,EAASh7B,OAAcmkF,EAAwBnpD,EAAS,GAAI0kD,GAAY,GACxE,GACdA,EAASvc,YAAcqhB,EAChBhxF,EAAO8rC,gBAEhBogD,EAASvc,YAAcqhB,EAChBhxF,EAAO8oC,eACZxpB,EAAKizC,SAAUm+B,EAAWplF,EAAMC,EAAMC,GAAMwlF,EAAOl9B,iBAGvD,KAAKuR,EAAen8B,YAClB,IAAKgjD,EAASn3E,QAAQW,WAAU,IAAmB,MAEnD,GADAw2E,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IAE1B4pF,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAEhB,KADIxsB,EAAOgN,EAAe,IAChB3M,GAAE,IAAuBL,EAAK2sB,KAAO,GAK7C,OAJAigD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GAGnD9T,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAC7Cz5B,EAAAkH,KAAKvR,IAAG,GAIV,OADAwoF,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IACrBzD,EAAOkpC,YAAY59B,EAAMC,EAAMC,GAAM8T,EAAKw0C,gBAEnD,KAAKuR,EAAe/7B,cAClB,IAAK4iD,EAASn3E,QAAQW,WAAU,IAAmB,MAEnD,GADAw2E,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IAE1BupF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAC7C0kD,EAASn3E,QAAQI,UAAS,GAGxB5J,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAC7Cz5B,EAAAkH,KAAKxR,IAAG,GAIV,OADAyoF,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IACrBzD,EAAOspC,cAAch+B,EAAMC,GAKpC,KAAK85D,EAAep6B,OAClB,GACE2iD,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cACZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,GACxD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK89C,MAEjD,KADIzzC,EAAO4sE,EAASvc,aACV1tD,MAAM,KAKd,OAJAiqE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZvgC,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GACnD9T,GAAO0gF,EAAS/R,cAClB+R,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKhR,MAC7CioF,EAASvc,aAGX,OADAuc,EAASvc,YAAcrwD,EAChBtf,EAAOirC,OAAO3/B,EAAMC,EAAMC,IAEnC,KAAK65D,EAAev5B,YAQlB,OAPIxf,GACF4/D,EAASx+E,MACPI,EAAAhD,eAAe42D,sBACf0E,EAAWqnB,mBAAoBnrF,EAAUmQ,cAG7Cw6E,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GACpClsF,EAAO8rC,cAKhB,KAAKu5B,EAAewsB,YAElB,OADA3F,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IAE1BupF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GACpClsF,EAAO8rC,cACT9rC,EAAOunC,KAAK2qB,EAAAhwB,OAAO4vD,YAE5B,KAAKzsB,EAAe0sB,YAElB,OADA7F,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IAE1BupF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GACpClsF,EAAO8rC,cACT9rC,EAAOunC,KAAK2qB,EAAAhwB,OAAO8vD,WAAY,KAAM,CAC1C9F,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,KAGpD,KAAK4hE,EAAer5B,YAElB,GADAkgD,EAASvc,YAAc5hE,EAAAkH,KAAKG,KAE1B43E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAKogD,EAASn3E,QAAQW,WAAU,GAAuB,CACrD,IAAIkT,GAAWsjE,EAASx5E,SAAS4L,gBAAgBhc,EAAW,MAE5D,OADA4pF,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACvBwT,GACEsjE,EAAS7H,kBAAkBz7D,GAAU4e,EAAU4+B,GADhCpmE,EAAO8rC,cAG/B,IAAI32B,GAAY+2E,EAASn3E,QAAQI,UAC7B7J,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GACxD5J,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GACxD3J,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GAE5D,OADA+2E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAOgsC,YAAY1gC,EAAMC,EAAMC,IAExC,KAAK65D,EAAel5B,YAElB,GADA+/C,EAASvc,YAAc5hE,EAAAkH,KAAKG,KAE1B43E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAKogD,EAASn3E,QAAQW,WAAU,GAAuB,CACjDkT,GAAWsjE,EAASx5E,SAAS4L,gBAAgBhc,EAAW,MAE5D,OADA4pF,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACvBwT,GACEsjE,EAAS7H,kBAAkBz7D,GAAU4e,EAAU4+B,GADhCpmE,EAAO8rC,cAG3B32B,GAAY+2E,EAASn3E,QAAQI,UAC7B7J,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GACxD5J,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKrR,GAAE,GACtD4H,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GAE5D,OADA+2E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAOmsC,YAAY7gC,EAAMC,EAAMC,IAKxC,KAAK65D,EAAe7/B,WAClB,GACE6nD,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IAAIyZ,GAASj5B,EAAe,GAExBgiD,IADAhjE,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAI+d,IACpC2mC,EAASvc,aAExB,OADAuc,EAASvc,YAAcpqB,GACnB+oB,GAASriC,MAAQsZ,GAAOtZ,MAC1BigD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,OAENpL,EAAO8rC,eAETxgC,EAET,KAAK+5D,EAAe56D,OAClB,GACEmjF,EAAkBthE,EAAe85C,EAAY8lB,GAC7CsB,EAAkBhmD,EAAU,EAAG,EAAG4+B,EAAY8lB,GAM9C,OAJI5/D,IACF7hB,OAAO6hB,EAAc9f,QACrB0/E,EAASvc,YAAcrjD,EAAc,GAAGomC,iBAEnC1yD,EAAO8rC,cAEZxgC,EAAOghB,EACP4/D,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAI,GAC1D4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKhR,KAAI,GACjDqb,EAAO4sE,EAASvc,YAIpB,GAHAuc,EAASvc,YAAcrwD,EAAKozC,gBAGxBw5B,EAASn3E,QAAQiB,SACnB,OAAIitD,GAAkBl1D,EAAAkH,KAAKG,MACzB82E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO6qC,OAETv/B,EAIT,IAAI7C,GAAQyzE,EAAagQ,EAA6B,GAAnB1kD,EAASh7B,OAAcg7B,EAAS,GAAK,KAAM4+B,GAC9E8lB,EAASvc,YAAcrwD,EAAKozC,gBACxBzrB,OAAI,EACR,GAAIg8B,GAAkBl1D,EAAAkH,KAAKG,KAEzB,OADA82E,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACpBkK,EAAKxI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOjnC,EAAOyqC,GACZzqC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQg4C,OAAQ7/D,GAC7B7C,IAEF,MAEF,OACA,OACEw+B,EAAOjnC,EAAOyqC,GACZzqC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQi4C,OAAQ9/D,GAC7B7C,IAEF,MAEF,OACA,OACEw+B,EAAOjnC,EAAOyqC,GACZzqC,EAAO+mC,MACLmlD,EAASn3E,QAAQc,SACbq8C,EAAA/+B,QAAQi4C,OACRlZ,EAAA/+B,QAAQg4C,OACZ7/D,GAEF7C,IAEF,MAGF,QACEw+B,EAAOjnC,EAAOyqC,GACZzqC,EAAOmnC,OAAO+qB,EAAAz5B,SAASqzC,MACrBxgE,EACAtL,EAAOkE,IAAI,IAEbuE,IAEF,MAEF,QACEw+B,EAAOjnC,EAAOyqC,GACZzqC,EAAOmnC,OAAO+qB,EAAAz5B,SAASszC,MACrBzgE,EACAtL,EAAOmE,IAAI,IAEbsE,IAEF,MAEF,QACEyjF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOx+B,QAMX,OADAyjF,EAASvc,YAAcrwD,EAAKozC,gBACpBw5B,EAASvc,YAAY74D,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IACIykE,IADA9wD,EAAOyhE,EAASnb,aACC3H,oBAAoB9pD,GACzCmL,EAAKw+C,aAAasS,GAAUtzD,MAAO/Z,EAAAw5D,WAAWiE,SAC9C1kC,EAAOjnC,EAAOyqC,GACZzqC,EAAO6nC,UAAU0zC,GAAUtzD,MAAO3c,GAClCtL,EAAO2nC,UAAU4zC,GAAUtzD,MAAOiqC,EAAAriC,WAAWppB,KAC7CgC,IAEF,MAEF,OACA,OACM8yE,GAAY2Q,EAASnb,YAAY3H,oBAAoBr7D,EAAAkH,KAAKvR,KAC9DujC,EAAOjnC,EAAOyqC,GACZzqC,EAAO+mC,MAAMmrB,EAAA/+B,QAAQi4C,OACnBprE,EAAO6nC,UAAU0zC,GAAUtzD,MAAO3c,IAEpC7C,GACAzI,EAAO2nC,UAAU4zC,GAAUtzD,MAAOiqC,EAAAriC,WAAWnpB,MAE/C,MAEF,OACA,OACM60E,GAAY2Q,EAASnb,YAAY3H,oBAAoB8iB,EAASn3E,QAAQI,WAC1E8xB,EAAOjnC,EAAOyqC,GACZzqC,EAAO+mC,MACLmlD,EAASn3E,QAAQc,SACbq8C,EAAA/+B,QAAQi4C,OACRlZ,EAAA/+B,QAAQg4C,OACZnrE,EAAO6nC,UAAU0zC,GAAUtzD,MAAO3c,IAEpC7C,GACAzI,EAAO2nC,UAAU4zC,GAAUtzD,MAAOikE,EAASn3E,QAAQq+D,iBAErD,MAEF,QACMmI,GAAY2Q,EAASnb,YAAY3H,oBAAoBr7D,EAAAkH,KAAK/Q,KAC9D+iC,EAAOjnC,EAAOyqC,GACZzqC,EAAOmnC,OAAO+qB,EAAAz5B,SAASqzC,MACrB9rE,EAAO6nC,UAAU0zC,GAAUtzD,MAAO3c,GAClCtL,EAAOkE,IAAI,IAEbuE,GACAzI,EAAO2nC,UAAU4zC,GAAUtzD,MAAOiqC,EAAAriC,WAAW3oB,MAE/C,MAEF,QACMq0E,GAAY2Q,EAASnb,YAAY3H,oBAAoBr7D,EAAAkH,KAAK9Q,KAC9D8iC,EAAOjnC,EAAOyqC,GACZzqC,EAAOmnC,OAAO+qB,EAAAz5B,SAASszC,MACrB/rE,EAAO6nC,UAAU0zC,GAAUtzD,MAAO3c,GAClCtL,EAAOmE,IAAI,IAEbsE,GACAzI,EAAO2nC,UAAU4zC,GAAUtzD,MAAOiqC,EAAAriC,WAAW1oB,MAE/C,MAEF,QACE+kF,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbxmD,EAAOx+B,GAKb,OAAOw+B,EAET,KAAKo+B,EAAe13C,UAClB,GACEq/D,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAChB,IACImmD,IADAxnE,EAAOyhE,EAASnb,aACQpxD,GAAE,OAC9B8K,EAAKjY,IAAG,OAEJy0B,EAAOilD,EAASvX,kBAAkBntC,EAAS,GAAIy7B,GAEnD,OADKgvB,IAAkBxnE,EAAKxE,MAAK,OAC1BghB,EAET,KAAKo+B,EAAe6sB,YAAa9F,GAAY,EAC7C,KAAK/mB,EAAe15B,cAClB,GACEiiD,EAAkBthE,EAAe85C,EAAY8lB,GAAU,GACvDsB,EAAkBhmD,EAAU,EAAG/jC,IAAIqxC,UAAWsxB,EAAY8lB,GAC1D,OAAOlsF,EAAO8rC,cAChB,IAAIL,GAAanf,EAAgBA,EAAc,GAAK22C,EAEhDkvB,IADA7mF,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKnR,KACzCooF,EAASvc,aACxB,KACEwiB,IAAYpkF,EAAAkH,KAAKnR,KACJ,GAAbquF,GAASr7E,MAAwBq7E,GAAS1/B,oBAM1C,OAJAy5B,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf8lB,EAAS,GAAGp8B,OAEPpL,EAAO8rC,cAOhB,IALA,IAAIk8C,GAAcxgD,EAASh7B,OAAS,EAChC4lF,GAAe,IAAI9qF,MAAqB0gF,IACxC1E,GAAmB73C,GAAWqoB,eAC9BzpC,GAAiB,IAAI/iB,MAAY0gF,IACjCqK,GAAmB,IAAI/qF,MAAkB0gF,IACpCtnF,GAAI,EAAGA,GAAIsnF,KAAetnF,GAAG,CACpC0xF,GAAa1xF,IAAKwrF,EAASvX,kBAAkBntC,EAAS,EAAI9mC,IAAIqN,EAAAkH,KAAKxR,KACnE,IAAI6uF,GAAcpG,EAASvc,YAC3BtlD,GAAe3pB,IAAK4xF,GACpBD,GAAiB3xF,IAAK4xF,GAAYx+B,eAEpC,IAAIloB,GAAW79B,EAAA0Y,UAAU4uC,oBAAoBhrC,GAAgBohB,IACzDyC,GAAUluC,EAAOgmC,2BAA2Bs9C,GAAkB+O,IAGlE,GAFKnkD,KAASA,GAAUluC,EAAOylC,gBAAgBmG,GAAU03C,GAAkB+O,KAC3EnG,EAASvc,YAAclkC,GACnB2gD,EAAW,CAEb,GAAIl6B,EAAA9a,gBAAgB9rC,EAAOtL,EAAO6yC,qBAAqBvnC,KAAU4mD,EAAApiC,aAAaolB,MAAO,CACnFzqC,OAAOynD,EAAA7a,kBAAkB/rC,IAAS4mD,EAAAriC,WAAWppB,KAC7C,IAAIwhB,GAAQiqC,EAAA5a,iBAAiBhsC,GACzBwkE,GAAgBoc,EAASpc,cAC7B,GAAI7nD,IAAS,GAAKA,GAAQ6nD,GAActjE,OACtC,OAAOxM,EAAOa,KAAKivE,GAAc7nD,IAAQmqE,GAAc9O,IAO3D,OAJA4I,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf8lB,EAAS,GAAGp8B,OAEPpL,EAAO8rC,cAIhB,OAAO9rC,EAAO2rC,cAAcrgC,EAAM8mF,GAAcxmD,IAElD,KAAKy5B,EAAektB,YAClB,GACElF,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvD,OAAOlsF,EAAO8rC,cAChB,IAAI94B,GAAgBsZ,EAAe,GAAG0C,eACtC,OAAKhc,IAOLk5E,EAASvc,YAAc38D,GAAcsM,KAC9B4sE,EAAS3B,mBAAmBv3E,GAAew0B,EAAQ,EAAoB4+B,KAP5E8lB,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,eAQlB,KAAKu5B,EAAe76D,MAMlB,OALAwiF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C4pF,EAASx+E,MACPI,EAAAhD,eAAe0nF,eACfpsB,EAAWh7D,OAAQo8B,EAASh7B,OAASg7B,EAAS,GAAK4+B,GAAYh7D,MAAMW,YAEhE/L,EAAO8rC,cAEhB,KAAKu5B,EAAe96D,QAMlB,OALAyiF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C4pF,EAAS1+E,QACPM,EAAAhD,eAAe0nF,eACfpsB,EAAWh7D,OAAQo8B,EAASh7B,OAASg7B,EAAS,GAAK4+B,GAAYh7D,MAAMW,YAEhE/L,EAAO6qC,MAEhB,KAAKw6B,EAAe/6D,KAMlB,OALA0iF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C4pF,EAAS5+E,KACPQ,EAAAhD,eAAe0nF,eACfpsB,EAAWh7D,OAAQo8B,EAASh7B,OAASg7B,EAAS,GAAK4+B,GAAYh7D,MAAMW,YAEhE/L,EAAO6qC,MAKhB,KAAKw6B,EAAe9hE,GAClB,OACEypF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAK1R,GACrBvD,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK1R,GAAE,GAExD,KAAK8hE,EAAe7hE,IAClB,OACEwpF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKzR,IACrBxD,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKzR,IAAG,GAEzD,KAAK6hE,EAAe5hE,IAClB,OACEupF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKxR,IACrBzD,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAEzD,KAAK4hE,EAAe3hE,IAClB,OACEspF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKvR,IACrB1D,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKvR,IAAG,GAEzD,KAAK2hE,EAAe1hE,MAClB,IAAIuR,GAAYg3E,EAASn3E,QAAQG,UACjC,OACE83E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAcz6D,GAChBlV,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAItyB,GAAS,GAE1D,KAAKmwD,EAAezhE,GAClB,OACEopF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKrR,GACrB5D,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKrR,GAAE,GAExD,KAAKyhE,EAAexhE,IAClB,OACEmpF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKpR,IACrB7D,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKpR,IAAG,GAEzD,KAAKwhE,EAAevhE,IAClB,OACEkpF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKnR,IACrB9D,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKnR,IAAG,GAEzD,KAAKuhE,EAAethE,IAClB,OACEipF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKlR,IACrB/D,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKlR,IAAG,GAEzD,KAAKshE,EAAerhE,MACdmR,GAAY+2E,EAASn3E,QAAQI,UACjC,OACE63E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAcx6D,GAChBnV,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIryB,GAAS,GAE1D,KAAKkwD,EAAephE,KAClB,OACE+oF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACrBjE,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKhR,KAAI,GAE1D,KAAKohE,EAAenhE,IAClB,OACE8oF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAK/Q,IACrBlE,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK/Q,IAAG,GAEzD,KAAKmhE,EAAelhE,IAClB,OACE6oF,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,IAE3CA,EAASvc,YAAc5hE,EAAAkH,KAAK9Q,IACrBnE,EAAO8rC,eAETogD,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK9Q,IAAG,GAKzD,KAAKkhE,EAAejhE,KACpB,KAAKihE,EAAehhE,MAClB,IAAK6nF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,GAAI4+B,EAAY8lB,GAG5C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhB,IAAIlF,GAAQ,IAAI1+B,WAAW,IAC3B,IAASxH,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAK1R,GAAE,GACvD,GAAI2uD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,KAC7CyD,EAAAikB,QAAQ+jC,EAAA5a,iBAAiBrQ,GAAOL,GAAOlmC,KAI3C,OADAwrF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAe9gE,MAClB,IAAK2nF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIlF,GAAQ,IAAI1+B,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAKzR,IAAG,GACxD,GAAI0uD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,KAC7CyD,EAAAkkB,SAAS8jC,EAAA5a,iBAAiBrQ,GAAOL,GAAOlmC,IAAK,IAIjD,OADAwrF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAe5gE,MAClB,IAAKynF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIlF,GAAQ,IAAI1+B,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAKxR,IAAG,GACxD,GAAIyuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,KAC7CyD,EAAAgJ,SAASg/C,EAAA5a,iBAAiBrQ,GAAOL,GAAOlmC,IAAK,IAIjD,OADAwrF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAe1gE,MAClB,IAAKunF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIlF,GAAQ,IAAI1+B,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAKvR,IAAG,GACxD,GAAIwuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWnpB,KAC7C,IAAIgsF,GAAMhyF,IAAK,EACfwJ,EAAAgJ,SAASg/C,EAAA3a,oBAAoBtQ,GAAOL,GAAO8rD,IAC3CxoF,EAAAgJ,SAASg/C,EAAA1a,qBAAqBvQ,GAAOL,GAAO8rD,GAAM,IAItD,OADAxG,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAexgE,MAClB,IAAKqnF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIlF,GAAQ,IAAI1+B,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAK/Q,IAAG,GACxD,GAAIguD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAW3oB,KAC7CgD,EAAAmkB,SAAS6jC,EAAAza,iBAAiBxQ,GAAOL,GAAOlmC,IAAK,IAIjD,OADAwrF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAevgE,MAClB,IAAKonF,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIlF,GAAQ,IAAI1+B,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQ6lC,EAAS9mC,IACV,CACLumC,EAAOilD,EAASr5C,qBAAqBlxC,GAAOoM,EAAAkH,KAAK9Q,IAAG,GACxD,GAAI+tD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf9wF,GAAMyJ,OAER8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAW1oB,KAC7C+C,EAAAokB,SAAS4jC,EAAAxa,iBAAiBzQ,GAAOL,GAAOlmC,IAAK,IAIjD,OADAwrF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOoE,KAAKwiC,IAErB,KAAKy+B,EAAestB,WAClB,IAAKzG,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQy/D,cAAe,MACjD,OACA,OAAqB5rD,EAAKkrB,EAAA/+B,QAAQ0/D,cAAe,MACjD,OACA,OAAqB7rD,EAAKkrB,EAAA/+B,QAAQ2/D,cAAe,MACjD,OACA,OAAqB9rD,EAAKkrB,EAAA/+B,QAAQ4/D,cAAe,MACjD,OACA,OACE/rD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQ4/D,cACR7gC,EAAA/+B,QAAQ2/D,cACZ,MAEF,QAAqB9rD,EAAKkrB,EAAA/+B,QAAQ6/D,cAAe,MACjD,QAAqBhsD,EAAKkrB,EAAA/+B,QAAQ8/D,cAAe,MACjD,QAME,OALA/G,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGdxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GAEvD,OADA4sE,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO+mC,MAAMC,EAAI17B,GAE1B,KAAK+5D,EAAe6tB,kBAClB,IAAKhH,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAAU,GACvDe,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAC3C,OAAOlsF,EAAO8rC,cAEhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAcrwD,EAChBtf,EAAO8rC,cAEZ9E,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAtvB,cAAcuwD,qBAAsB,MAC9D,OAAqBnsD,EAAKkrB,EAAAtvB,cAAcwwD,qBAAsB,MAC9D,OAAqBpsD,EAAKkrB,EAAAtvB,cAAcywD,qBAAsB,MAC9D,OAAqBrsD,EAAKkrB,EAAAtvB,cAAc0wD,qBAAsB,MAC9D,OACA,OAAqBtsD,EAAKkrB,EAAAtvB,cAAc2wD,oBAAqB,MAC7D,OACA,OAAqBvsD,EAAKkrB,EAAAtvB,cAAc4wD,oBAAqB,MAC7D,OACA,OACExsD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAtvB,cAAc4wD,oBACdthC,EAAAtvB,cAAc2wD,oBAClB,MAEF,QAAqBvsD,EAAKkrB,EAAAtvB,cAAc6wD,oBAAqB,MAC7D,QAAqBzsD,EAAKkrB,EAAAtvB,cAAc8wD,oBAAqB,MAC7D,QAME,OALAxH,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAcrwD,EAChBtf,EAAO8rC,cAGdxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASr5C,qBAAqBrL,EAAS,GAAIz5B,EAAAkH,KAAKrR,GAAE,GAE7D,GADAsoF,EAASvc,YAAcrwD,EACnB4yC,EAAA9a,gBAAgB7rC,IAAS2mD,EAAApiC,aAAaolB,MAKxC,OAJAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACfjrD,EAAS,GAAGp8B,OAEPpL,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkB9rC,IAAS2mD,EAAAriC,WAAWppB,KAC7C,IAAIktF,GAAU,GAAKr0E,EAAKizC,SAAY,EAEpC,OADIhmB,GAAM2lB,EAAA5a,iBAAiB/rC,IACjB,GAAKghC,GAAMonD,IACnBzH,EAASx+E,MACPI,EAAAhD,eAAegmF,6CACftpD,EAAS,GAAGp8B,MAAO,aAAc,IAAKuoF,GAAO5nF,YAExC/L,EAAO8rC,eAET9rC,EAAOqsC,aAAarF,EAAI17B,EAAMihC,IAEvC,KAAK84B,EAAeuuB,kBAClB,IAAK1H,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,OAAE,EACN,OAAQ1nB,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA7uB,cAAcwwD,oBAAqB,MAC7D,OACA,OAAqB7sD,EAAKkrB,EAAA7uB,cAAcywD,oBAAqB,MAC7D,OACA,OAAqB9sD,EAAKkrB,EAAA7uB,cAAc0wD,oBAAqB,MAC7D,OACA,OAAqB/sD,EAAKkrB,EAAA7uB,cAAc2wD,oBAAqB,MAC7D,OACA,OACEhtD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA7uB,cAAc2wD,oBACd9hC,EAAA7uB,cAAc0wD,oBAClB,MAEF,QAAqB/sD,EAAKkrB,EAAA7uB,cAAc4wD,oBAAqB,MAC7D,QAAqBjtD,EAAKkrB,EAAA7uB,cAAc6wD,oBAAqB,MAC7D,QAME,OALAhI,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGdxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASr5C,qBAAqBrL,EAAS,GAAIz5B,EAAAkH,KAAKrR,GAAE,GAC7D,GAAIsuD,EAAA9a,gBAAgB7rC,IAAS2mD,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACfjrD,EAAS,GAAGp8B,OAEd8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhBrhC,OAAOynD,EAAA7a,kBAAkB9rC,IAAS2mD,EAAAriC,WAAWppB,KACzCktF,GAAU,GAAKr0E,EAAKizC,SAAY,EAEpC,IADIhmB,GAAM2lB,EAAA5a,iBAAiB/rC,IACjB,GAAKghC,GAAMonD,GAKnB,OAJAzH,EAASx+E,MACPI,EAAAhD,eAAegmF,6CACftpD,EAAS,GAAGp8B,MAAO,aAAc,IAAKuoF,GAAO5nF,YAExC/L,EAAO8rC,cAEZtgC,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAAIloB,EAAI,GAEvD,OADA4sE,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOysC,aAAazF,EAAI17B,EAAMihC,GAAK/gC,IAE5C,KAAK65D,EAAe8uB,aAClB,IAAKjI,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAG7C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhB,IAAIsoD,GAAY90E,EAAKizC,SACjB8hC,GAAY,GAAKD,GAErB,GADA3pF,OAAO4hF,UAAUgI,KAAcnqF,EAAAJ,WAAWuqF,KAExCpH,EAAkBzlD,EAAU,EAAI6sD,GAAWjuB,EAAY8lB,GAGvD,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhB,OAAQxsB,EAAKxI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALAo1E,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGdxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAD5D,IAEI0oC,GAAO,IAAI5kC,WAAW,IAE1B,IADIyrF,IAAUU,IAAa,GAAK,EACvB3zF,GAAI,EAAGA,GAAI2zF,KAAa3zF,GAAG,CAClC,IAWI6rC,GAXAwc,GAAUvhB,EAAS,EAAI9mC,IACvB4zF,GAAOpI,EAASr5C,qBAAqBkW,GAASh7C,EAAAkH,KAAKrR,GAAE,GACzD,GAAIsuD,EAAA9a,gBAAgBk9C,KAASpiC,EAAApiC,aAAaolB,MAMxC,OALAg3C,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACf1pC,GAAQ39C,OAEV8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAIhB,GAFArhC,OAAOynD,EAAA7a,kBAAkBi9C,KAASpiC,EAAAriC,WAAWppB,MACzC8lC,GAAM2lB,EAAA5a,iBAAiBg9C,KACjB,GAAK/nD,GAAMonD,GAMnB,OALAzH,EAASx+E,MACPI,EAAAhD,eAAegmF,6CACf/nC,GAAQ39C,MAAO,aAAc,IAAKuoF,GAAO5nF,YAE3CmgF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEhB,OAAQsoD,IACN,KAAK,EACHlqF,EAAAikB,QAAQoe,GAAKO,GAAMpsC,IACnB,MAEF,KAAK,EACH,IAAI6zF,GAAO7zF,IAAK,EACZ8zF,GAAOjoD,IAAO,EAClBriC,EAAAikB,QAAQqmE,GAAU1nD,GAAMynD,IACxBrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAO7zF,IAAK,EACZ8zF,GAAOjoD,IAAO,EAClBriC,EAAAikB,QAAQqmE,GAAU1nD,GAAMynD,IACxBrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAO7zF,IAAK,EACZ8zF,GAAOjoD,IAAO,EAClBriC,EAAAikB,QAAQqmE,GAAU1nD,GAAMynD,IACxBrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/BrqF,EAAAikB,QAAQqmE,GAAO,EAAG1nD,GAAMynD,GAAO,GAC/B,MAEF,QAAS9pF,QAAO,IAIpB,OADAyhF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO2sC,aAAarhC,EAAMC,EAAMuhC,IAEzC,KAAKu4B,EAAeovB,SACpB,KAAKpvB,EAAeqvB,SACpB,KAAKrvB,EAAesvB,SACpB,KAAKtvB,EAAeuvB,SACpB,KAAKvvB,EAAewvB,kBACpB,KAAKxvB,EAAeyvB,kBACpB,KAAKzvB,EAAe0vB,SACpB,KAAK1vB,EAAe2vB,SACpB,KAAK3vB,EAAe4vB,QACpB,KAAK5vB,EAAe6vB,QACpB,KAAK7vB,EAAe8vB,QACpB,KAAK9vB,EAAe+vB,QACpB,KAAK/vB,EAAegwB,QACpB,KAAKhwB,EAAeiwB,QAClB,IAAKpJ,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,GAAgB,EACpB,OAAQ1kC,EAAUmQ,cAChB,KAAK4yD,EAAeovB,SAClB,OAAQn1E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS88D,YAAa,MAChD,OACA,OAAqBvuD,EAAKkrB,EAAAz5B,SAAS+8D,YAAa,MAChD,OACA,OAAqBxuD,EAAKkrB,EAAAz5B,SAASg9D,YAAa,MAChD,OACA,OAAqBzuD,EAAKkrB,EAAAz5B,SAASi9D,YAAa,MAChD,OACA,OACE1uD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAASi9D,YACTxjC,EAAAz5B,SAASg9D,YACb,MAEF,QAAqBzuD,EAAKkrB,EAAAz5B,SAASk9D,YAAa,MAChD,QAAqB3uD,EAAKkrB,EAAAz5B,SAASm9D,YAErC,MAEF,KAAKvwB,EAAeqvB,SAClB,OAAQp1E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASo9D,YAAa,MAChD,OACA,OAAqB7uD,EAAKkrB,EAAAz5B,SAASq9D,YAAa,MAChD,OACA,OAAqB9uD,EAAKkrB,EAAAz5B,SAASs9D,YAAa,MAChD,OACA,OAAqB/uD,EAAKkrB,EAAAz5B,SAASu9D,YAAa,MAChD,OACA,OACEhvD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAz5B,SAASu9D,YACT9jC,EAAAz5B,SAASs9D,YACb,MAEF,QAAqB/uD,EAAKkrB,EAAAz5B,SAASw9D,YAAa,MAChD,QAAqBjvD,EAAKkrB,EAAAz5B,SAASy9D,YAErC,MAEF,KAAK7wB,EAAesvB,SAClB,OAAQr1E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS09D,YAAa,MAChD,OACA,OAAqBnvD,EAAKkrB,EAAAz5B,SAAS29D,YAAa,MAChD,OACA,OAAqBpvD,EAAKkrB,EAAAz5B,SAAS49D,YAAa,MAChD,QAAqBrvD,EAAKkrB,EAAAz5B,SAAS69D,YAAa,MAChD,QAAqBtvD,EAAKkrB,EAAAz5B,SAAS89D,YAAa,MAChD,OACA,OACOrK,EAASn3E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAAS49D,aAIlD,MAEF,KAAKhxB,EAAeuvB,SAClB,OAAQt1E,EAAKxI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAAS+9D,YAAa,MAChD,QAAqBxvD,EAAKkrB,EAAAz5B,SAASg+D,YAErC,MAEF,KAAKpxB,EAAewvB,kBAClB,OAAQv1E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASi+D,gBAAiB,MACpD,OAAqB1vD,EAAKkrB,EAAAz5B,SAASk+D,gBAAiB,MACpD,OAAqB3vD,EAAKkrB,EAAAz5B,SAASm+D,gBAAiB,MACpD,OAAqB5vD,EAAKkrB,EAAAz5B,SAASo+D,gBAErC,MAEF,KAAKxxB,EAAeyvB,kBAClB,OAAQx1E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASq+D,gBAAiB,MACpD,OAAqB9vD,EAAKkrB,EAAAz5B,SAASs+D,gBAAiB,MACpD,OAAqB/vD,EAAKkrB,EAAAz5B,SAASu+D,gBAAiB,MACpD,OAAqBhwD,EAAKkrB,EAAAz5B,SAASw+D,gBAErC,MAEF,KAAK5xB,EAAe0vB,SAClB,OAAQz1E,EAAKxI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAASy+D,YAAa,MAChD,QAAqBlwD,EAAKkrB,EAAAz5B,SAAS0+D,YAErC,MAEF,KAAK9xB,EAAe2vB,SAClB,OAAQ11E,EAAKxI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAAS2+D,YAAa,MAChD,QAAqBpwD,EAAKkrB,EAAAz5B,SAAS4+D,YAErC,MAEF,KAAKhyB,EAAe4vB,QAClB,OAAQ31E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASunD,WAAY,MAC/C,OACA,OAAqBh5C,EAAKkrB,EAAAz5B,SAAS6+D,WAAY,MAC/C,OACA,OAAqBtwD,EAAKkrB,EAAAz5B,SAAS8+D,WAAY,MAC/C,QAAqBvwD,EAAKkrB,EAAAz5B,SAAS++D,WAAY,MAC/C,QAAqBxwD,EAAKkrB,EAAAz5B,SAASg/D,WAAY,MAC/C,OACA,OACOvL,EAASn3E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAAS8+D,YAIlD,MAEF,KAAKlyB,EAAe6vB,QAClB,OAAQ51E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASynD,WAAY,MAC/C,OACA,OAAqBl5C,EAAKkrB,EAAAz5B,SAASi/D,WAAY,MAC/C,OACA,OAAqB1wD,EAAKkrB,EAAAz5B,SAASk/D,WAAY,MAC/C,QAAqB3wD,EAAKkrB,EAAAz5B,SAASm/D,WAAY,MAC/C,QAAqB5wD,EAAKkrB,EAAAz5B,SAASo/D,WAAY,MAC/C,OACA,OACO3L,EAASn3E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAASk/D,YAIlD,MAEF,KAAKtyB,EAAe8vB,QAClB,OAAQ71E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASq/D,YAAa,MAChD,OAAqB9wD,EAAKkrB,EAAAz5B,SAASs/D,YAAa,MAChD,OAAqB/wD,EAAKkrB,EAAAz5B,SAASu/D,YAAa,MAChD,OAAqBhxD,EAAKkrB,EAAAz5B,SAASw/D,YAAa,MAChD,OAAqBjxD,EAAKkrB,EAAAz5B,SAASy/D,YAAa,MAChD,OAAqBlxD,EAAKkrB,EAAAz5B,SAAS0/D,YAAa,MAChD,QAAqBnxD,EAAKkrB,EAAAz5B,SAAS2/D,WAAY,MAC/C,QAAqBpxD,EAAKkrB,EAAAz5B,SAAS4/D,WAAY,MAC/C,OACA,OACOnM,EAASn3E,QAAQc,WACpBmxB,EAAc,GAAT1nB,EAAKxI,KACNo7C,EAAAz5B,SAASy/D,YACThmC,EAAAz5B,SAAS0/D,aAKnB,MAEF,KAAK9yB,EAAe+vB,QAClB,OAAQ91E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS6/D,YAAa,MAChD,OAAqBtxD,EAAKkrB,EAAAz5B,SAAS8/D,YAAa,MAChD,OAAqBvxD,EAAKkrB,EAAAz5B,SAAS+/D,YAAa,MAChD,OAAqBxxD,EAAKkrB,EAAAz5B,SAASggE,YAAa,MAChD,OAAqBzxD,EAAKkrB,EAAAz5B,SAASigE,YAAa,MAChD,OAAqB1xD,EAAKkrB,EAAAz5B,SAASkgE,YAAa,MAChD,QAAqB3xD,EAAKkrB,EAAAz5B,SAASmgE,WAAY,MAC/C,QAAqB5xD,EAAKkrB,EAAAz5B,SAASogE,WAAY,MAC/C,OACA,OACO3M,EAASn3E,QAAQc,WACpBmxB,EAAc,GAAT1nB,EAAKxI,KACNo7C,EAAAz5B,SAASigE,YACTxmC,EAAAz5B,SAASkgE,aAKnB,MAEF,KAAKtzB,EAAegwB,QAClB,OAAQ/1E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASqgE,YAAa,MAChD,OAAqB9xD,EAAKkrB,EAAAz5B,SAASsgE,YAAa,MAChD,OAAqB/xD,EAAKkrB,EAAAz5B,SAASugE,YAAa,MAChD,OAAqBhyD,EAAKkrB,EAAAz5B,SAASwgE,YAAa,MAChD,OAAqBjyD,EAAKkrB,EAAAz5B,SAASygE,YAAa,MAChD,OAAqBlyD,EAAKkrB,EAAAz5B,SAAS0gE,YAAa,MAChD,QAAqBnyD,EAAKkrB,EAAAz5B,SAAS2gE,WAAY,MAC/C,QAAqBpyD,EAAKkrB,EAAAz5B,SAAS4gE,WAAY,MAC/C,OACA,OACOnN,EAASn3E,QAAQc,WACpBmxB,EAAc,GAAT1nB,EAAKxI,KACNo7C,EAAAz5B,SAASygE,YACThnC,EAAAz5B,SAAS0gE,aAKnB,MAEF,KAAK9zB,EAAeiwB,QAClB,OAAQh2E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS6gE,YAAa,MAChD,OAAqBtyD,EAAKkrB,EAAAz5B,SAAS8gE,YAAa,MAChD,OAAqBvyD,EAAKkrB,EAAAz5B,SAAS+gE,YAAa,MAChD,OAAqBxyD,EAAKkrB,EAAAz5B,SAASghE,YAAa,MAChD,OAAqBzyD,EAAKkrB,EAAAz5B,SAASihE,YAAa,MAChD,OAAqB1yD,EAAKkrB,EAAAz5B,SAASkhE,YAAa,MAChD,QAAqB3yD,EAAKkrB,EAAAz5B,SAASmhE,WAAY,MAC/C,QAAqB5yD,EAAKkrB,EAAAz5B,SAASohE,WAAY,MAC/C,OACA,OACO3N,EAASn3E,QAAQc,WACpBmxB,EAAc,GAAT1nB,EAAKxI,KACNo7C,EAAAz5B,SAASihE,YACTxnC,EAAAz5B,SAASkhE,cAQvB,IAAW,GAAP3yD,EAMF,OALAklD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAE5D,OADA8nF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOmnC,OAAOH,EAAI17B,EAAMC,GAEjC,KAAK85D,EAAey0B,SACpB,KAAKz0B,EAAe00B,SACpB,KAAK10B,EAAe20B,UACpB,KAAK30B,EAAe40B,aACpB,KAAK50B,EAAe60B,WAClB,IAAKhO,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,OAEb8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,GAAe,EACnB,OAAQ1kC,EAAUmQ,cAChB,KAAK4yD,EAAey0B,SAClB,OAAQx6E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQgnE,YAAa,MAC/C,OACA,OAAqBnzD,EAAKkrB,EAAA/+B,QAAQinE,YAAa,MAC/C,OACA,OAAqBpzD,EAAKkrB,EAAA/+B,QAAQknE,YAAa,MAC/C,OACA,OAAqBrzD,EAAKkrB,EAAA/+B,QAAQmnE,YAAa,MAC/C,OACA,OACEtzD,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQmnE,YACRpoC,EAAA/+B,QAAQknE,YACZ,MAEF,QAAqBrzD,EAAKkrB,EAAA/+B,QAAQonE,YAAa,MAC/C,QAAqBvzD,EAAKkrB,EAAA/+B,QAAQqnE,YAEpC,MAEF,KAAKn1B,EAAe00B,SAClB,OAAQz6E,EAAKxI,MACX,QAAqBkwB,EAAKkrB,EAAA/+B,QAAQsnE,YAAa,MAC/C,QAAqBzzD,EAAKkrB,EAAA/+B,QAAQunE,YAEpC,MAEF,KAAKr1B,EAAe20B,UAClB,OAAQ16E,EAAKxI,MACX,QAAqBkwB,EAAKkrB,EAAA/+B,QAAQwnE,aAAc,MAChD,QAAqB3zD,EAAKkrB,EAAA/+B,QAAQynE,aAEpC,MAEF,KAAKv1B,EAAe40B,aAClB,OAAQ36E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ0nE,2BAA4B,MAC9D,OAAqB7zD,EAAKkrB,EAAA/+B,QAAQ2nE,2BAA4B,MAC9D,OAAqB9zD,EAAKkrB,EAAA/+B,QAAQ4nE,2BAA4B,MAC9D,OAAqB/zD,EAAKkrB,EAAA/+B,QAAQ6nE,2BAEpC,MAEF,KAAK31B,EAAe60B,WAClB,OAAQ56E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ8nE,4BAA6B,MAC/D,OAAqBj0D,EAAKkrB,EAAA/+B,QAAQ+nE,4BAA6B,MAC/D,OAAqBl0D,EAAKkrB,EAAA/+B,QAAQgoE,4BAA6B,MAC/D,OAAqBn0D,EAAKkrB,EAAA/+B,QAAQioE,6BAKxC,IAAW,GAAPp0D,EAMF,OALAklD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAE5D,OADA8nF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO+mC,MAAMC,EAAI17B,GAE1B,KAAK+5D,EAAeg2B,SACpB,KAAKh2B,EAAei2B,SAClB,IAAKpP,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAMT,OALAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,GAAmB,EACvB,OAAQ1kC,EAAUmQ,cAChB,KAAK4yD,EAAeg2B,SAClB,OAAQ/7E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAtuB,YAAY23D,YAAa,MACnD,OACA,OAAqBv0D,EAAKkrB,EAAAtuB,YAAY43D,YAAa,MACnD,OACA,OAAqBx0D,EAAKkrB,EAAAtuB,YAAY63D,YAAa,MACnD,OACA,OAAqBz0D,EAAKkrB,EAAAtuB,YAAY83D,YAAa,MACnD,OACA,OACE10D,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAtuB,YAAY83D,YACZxpC,EAAAtuB,YAAY63D,YAIpB,MAEF,KAAKp2B,EAAei2B,SAClB,OAAQh8E,EAAKxI,MACX,OAAqBkwB,EAAKkrB,EAAAtuB,YAAY+3D,aAAc,MACpD,OAAqB30D,EAAKkrB,EAAAtuB,YAAYg4D,aAAc,MACpD,OAAqB50D,EAAKkrB,EAAAtuB,YAAYi4D,aAAc,MACpD,OAAqB70D,EAAKkrB,EAAAtuB,YAAYk4D,aAAc,MACpD,OAAqB90D,EAAKkrB,EAAAtuB,YAAYm4D,aAAc,MACpD,OAAqB/0D,EAAKkrB,EAAAtuB,YAAYo4D,aAAc,MACpD,OAAqBh1D,EAAKkrB,EAAAtuB,YAAYq4D,aAAc,MACpD,OAAqBj1D,EAAKkrB,EAAAtuB,YAAYs4D,aAAc,MACpD,OACEl1D,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAtuB,YAAYq4D,aACZ/pC,EAAAtuB,YAAYm4D,aAChB,MAEF,OACE/0D,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAAtuB,YAAYs4D,aACZhqC,EAAAtuB,YAAYo4D,cAOxB,IAAW,GAAPh1D,EAMF,OALAklD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,OAEb8gF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKxR,IAAG,GAE3D,OADAyoF,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAOmtC,WAAWnG,EAAI17B,EAAMC,GAErC,KAAK85D,EAAe82B,SACpB,KAAK92B,EAAe+2B,QACpB,KAAK/2B,EAAeg3B,SAClB,IAAKnQ,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZ9E,GAAgB,EACpB,OAAQ1kC,EAAUmQ,cAChB,QAAShI,QAAO,GAChB,KAAK46D,EAAe82B,SAAYn1D,EAAKkrB,EAAAz5B,SAAS6jE,UAAW,MACzD,KAAKj3B,EAAe+2B,QAAYp1D,EAAKkrB,EAAAz5B,SAAS8jE,SAAU,MACxD,KAAKl3B,EAAeg3B,SAAYr1D,EAAKkrB,EAAAz5B,SAAS+jE,UAE5ClxF,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAC5D,OAAOpE,EAAOmnC,OAAOH,EAAI17B,EAAMC,GAEjC,KAAK85D,EAAeo3B,SAClB,IAAKvQ,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAC5D,OAAOpE,EAAO+mC,MAAMmrB,EAAA/+B,QAAQupE,UAAWpxF,GAEzC,KAAK+5D,EAAes3B,eAClB,IAAKzQ,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACEs3E,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAK7Q,KACrBpE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDmH,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GACxDoH,GAAO0gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAC5D,OAAOpE,EAAOgtC,eAAe1hC,EAAMC,EAAMC,IAE3C,KAAK65D,EAAeu3B,cACpB,KAAKv3B,EAAew3B,cAClB,IAAK3Q,EAASn3E,QAAQW,WAAU,GAAgB,MAChD,GACE23E,EAAkB/gE,EAAe85C,EAAY8lB,GAC7Ce,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACrBjE,EAAO8rC,cAGhB,IADIxsB,EAAOgN,EAAe,IACjB3M,GAAE,KAKT,OAJAusE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAENztF,EAAO8rC,cAEZ9E,GAAe,EACnB,OAAQ1kC,EAAUmQ,cAChB,QAAShI,QAAO,GAChB,KAAK46D,EAAeu3B,cAClB,OAAQt9E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ8sD,gBAAiB,MACnD,OACA,OAAqBj5C,EAAKkrB,EAAA/+B,QAAQ2pE,gBAAiB,MACnD,OACA,OAAqB91D,EAAKkrB,EAAA/+B,QAAQ4pE,gBAAiB,MACnD,OACA,OAAqB/1D,EAAKkrB,EAAA/+B,QAAQ6pE,gBAAiB,MACnD,OACA,OACEh2D,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQ6pE,gBACR9qC,EAAA/+B,QAAQ4pE,gBAIhB,MAEF,KAAK13B,EAAew3B,cAClB,OAAQv9E,EAAKxI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ4sD,gBAAiB,MACnD,OACA,OAAqB/4C,EAAKkrB,EAAA/+B,QAAQ8pE,gBAAiB,MACnD,OACA,OAAqBj2D,EAAKkrB,EAAA/+B,QAAQ+pE,gBAAiB,MACnD,OACA,OAAqBl2D,EAAKkrB,EAAA/+B,QAAQgqE,gBAAiB,MACnD,OACA,OACEn2D,EAAKklD,EAASn3E,QAAQc,SAClBq8C,EAAA/+B,QAAQgqE,gBACRjrC,EAAA/+B,QAAQ+pE,iBAOpB,IAAW,GAAPl2D,EAMF,OALAklD,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWqnB,oBAEbvB,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACrBjE,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK7Q,KAAI,GAE5D,OADA8nF,EAASvc,YAAc5hE,EAAAkH,KAAKhR,KACrBjE,EAAO+mC,MAAMC,EAAI17B,GAK1B,KAAK+5D,EAAe+3B,KAClB,IAGIpuE,GAHA1P,EAAOgtE,EAAqBJ,EAAU5/D,EAAekb,EAAU4+B,GAEnE,OADA8lB,EAASvc,YAAc5hE,EAAAkH,KAAKnR,IACvBwb,IACD0P,GAAiB1P,EAAK0P,iBACHA,GAAetT,aAAau2C,EAAA7gD,eAAe0K,YAChEowE,EAASx+E,MACPI,EAAAhD,eAAe4W,wBACf0kD,EAAWh7D,OAENpL,EAAO8rC,eAET9rC,EAAOyD,IAAIurB,GAAe7b,IATfnT,EAAO8rC,cAW3B,KAAKu5B,EAAeg4B,cAClB,GACErQ,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKnR,IAAG,GAG3D,OAFAooF,EAASjc,iBAAe,EACxBic,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAOa,KAAKwkE,EAAeg4B,cAAe,CAAE/xF,GAAQ4mD,EAAAriC,WAAWyY,MAExE,KAAK+8B,EAAei4B,cAClB,GACEtQ,EAAgB1gE,EAAe85C,EAAY9jE,GAC3C2qF,EAAkBzlD,EAAU,EAAG4+B,EAAY8lB,GAG3C,OADAA,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO8rC,cAEZxgC,EAAO4gF,EAASvX,kBAAkBntC,EAAS,GAAI0kD,EAASn3E,QAAQI,UAAS,GACzE5J,EAAO2gF,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAKnR,IAAG,GAG3D,OAFAooF,EAASjc,iBAAe,EACxBic,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAOa,KAAKwkE,EAAei4B,cAAe,CAAEhyF,EAAMC,GAAQ2mD,EAAAriC,WAAWyY,MAO9E,OADIrB,EAmBR,SACEilD,EACA5pF,EACAklC,EACA4+B,GAGA,OAAQ9jE,EAAUmQ,cAOhB,KAAK4yD,EAAek4B,QAAS,OAAOC,EAASn4B,EAAerS,IAAKk5B,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzG,KAAKf,EAAeo4B,QAAS,OAAOD,EAASn4B,EAAerS,IAAKk5B,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACzG,KAAKf,EAAeq4B,QAAS,OAAOF,EAASn4B,EAAekoB,IAAKrB,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzG,KAAKf,EAAes4B,QAAS,OAAOH,EAASn4B,EAAekoB,IAAKrB,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACzG,KAAKf,EAAeu4B,WAAY,OAAOJ,EAASn4B,EAAesoB,OAAQzB,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/G,KAAKf,EAAew4B,WAAY,OAAOL,EAASn4B,EAAesoB,OAAQzB,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAey4B,SAAU,OAAON,EAASn4B,EAAe2oB,KAAM9B,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3G,KAAKf,EAAe04B,SAAU,OAAOP,EAASn4B,EAAe2oB,KAAM9B,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3G,KAAKf,EAAe24B,SAAU,OAAOR,EAASn4B,EAAe8oB,KAAMjC,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3G,KAAKf,EAAe44B,SAAU,OAAOT,EAASn4B,EAAe8oB,KAAMjC,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3G,KAAKf,EAAe64B,QAAS,OAAOV,EAASn4B,EAAeipB,IAAKpC,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GACzG,KAAKf,EAAe84B,QAAS,OAAOX,EAASn4B,EAAeipB,IAAKpC,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GACzG,KAAKf,EAAe+4B,QAAS,OAAOZ,EAASn4B,EAAe2F,IAAKkhB,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GACzG,KAAKf,EAAeg5B,QAAS,OAAOb,EAASn4B,EAAe2F,IAAKkhB,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GACzG,KAAKf,EAAei5B,QAAS,OAAOd,EAASn4B,EAAe2pB,IAAK9C,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GACzG,KAAKf,EAAek5B,QAAS,OAAOf,EAASn4B,EAAe2pB,IAAK9C,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GACzG,KAAKf,EAAem5B,SAAU,OAAOhB,EAASn4B,EAAe7S,KAAM05B,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC3G,KAAKf,EAAeo5B,SAAU,OAAOjB,EAASn4B,EAAe7S,KAAM05B,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC3G,KAAKf,EAAeq5B,UAAW,OAAOlB,EAASn4B,EAAe8pB,MAAOjD,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC7G,KAAKf,EAAes5B,UAAW,OAAOnB,EAASn4B,EAAe8pB,MAAOjD,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC7G,KAAKf,EAAeu5B,aAAc,OAAOpB,EAASn4B,EAAemqB,SAAUtD,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GACnH,KAAKf,EAAew5B,aAAc,OAAOrB,EAASn4B,EAAemqB,SAAUtD,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GACnH,KAAKf,EAAey5B,YAAa,OAAOtB,EAASn4B,EAAesqB,QAASzD,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GACjH,KAAKf,EAAe05B,YAAa,OAAOvB,EAASn4B,EAAesqB,QAASzD,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GACjH,KAAKf,EAAe25B,oBAAqB,OAAOxB,EAASn4B,EAAeyqB,YAAa5D,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC7H,KAAKf,EAAe45B,oBAAqB,OAAOzB,EAASn4B,EAAeyqB,YAAa5D,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC7H,KAAKf,EAAe65B,oBAAqB,OAAO1B,EAASn4B,EAAeyqB,YAAa5D,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAe85B,oBAAqB,OAAO3B,EAASn4B,EAAeyqB,YAAa5D,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAe+5B,SAAU,OAAO5B,EAASn4B,EAAe8qB,KAAMjE,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC3G,KAAKf,EAAeg6B,SAAU,OAAO7B,EAASn4B,EAAe8qB,KAAMjE,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC3G,KAAKf,EAAei6B,UAAW,OAAO9B,EAASn4B,EAAeirB,MAAOpE,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC7G,KAAKf,EAAek6B,UAAW,OAAO/B,EAASn4B,EAAeirB,MAAOpE,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC7G,KAAKf,EAAem6B,YAAa,OAAOhC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7G,KAAKf,EAAeo6B,YAAa,OAAOjC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7G,KAAKf,EAAeq6B,aAAc,OAAOlC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/G,KAAKf,EAAes6B,aAAc,OAAOnC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/G,KAAKf,EAAeu6B,SAAU,OAAOpC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3G,KAAKf,EAAew6B,YAAa,OAAOrC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7G,KAAKf,EAAey6B,YAAa,OAAOtC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7G,KAAKf,EAAe06B,aAAc,OAAOvC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAe26B,aAAc,OAAOxC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAe46B,aAAc,OAAOzC,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAe66B,aAAc,OAAO1C,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAe86B,SAAU,OAAO3C,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3G,KAAKf,EAAe+6B,SAAU,OAAO5C,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC3G,KAAKf,EAAeg7B,SAAU,OAAO7C,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAC3G,KAAKf,EAAei7B,WAAY,OAAO9C,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7G,KAAKf,EAAek7B,YAAa,OAAO/C,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/G,KAAKf,EAAem7B,UAAW,OAAOhD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7G,KAAKf,EAAeo7B,WAAY,OAAOjD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7G,KAAKf,EAAeq7B,YAAa,OAAOlD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAes7B,YAAa,OAAOnD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/G,KAAKf,EAAeu7B,UAAW,OAAOpD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7G,KAAKf,EAAew7B,UAAW,OAAOrD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAC7G,KAAKf,EAAey7B,UAAW,OAAOtD,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAE/G,GAAI8lB,EAASn3E,QAAQW,WAAU,IAC7B,OAAQpT,EAAUmQ,cAEhB,KAAK4yD,EAAe07B,mBAAoB,OAAOvD,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAe27B,oBAAqB,OAAOxD,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAe47B,gBAAiB,OAAOzD,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzH,KAAKf,EAAe67B,mBAAoB,OAAO1D,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3H,KAAKf,EAAe87B,oBAAqB,OAAO3D,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAe+7B,oBAAqB,OAAO5D,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAeg8B,gBAAiB,OAAO7D,EAASn4B,EAAe78B,YAAa0jD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAEzH,KAAKf,EAAei8B,kBAAmB,OAAO9D,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAek8B,mBAAoB,OAAO/D,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAem8B,iBAAkB,OAAOhE,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAeo8B,kBAAmB,OAAOjE,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3H,KAAKf,EAAeq8B,mBAAoB,OAAOlE,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAes8B,mBAAoB,OAAOnE,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAeu8B,iBAAkB,OAAOpE,EAASn4B,EAAe38B,aAAcwjD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE3H,KAAKf,EAAew8B,sBAAuB,OAAOrE,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAey8B,uBAAwB,OAAOtE,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/H,KAAKf,EAAe08B,mBAAoB,OAAOvE,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAe28B,sBAAuB,OAAOxE,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAe48B,uBAAwB,OAAOzE,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe68B,uBAAwB,OAAO1E,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe88B,mBAAoB,OAAO3E,EAASn4B,EAAe4rB,WAAY/E,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE3H,KAAKf,EAAe+8B,sBAAuB,OAAO5E,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAeg9B,uBAAwB,OAAO7E,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/H,KAAKf,EAAei9B,mBAAoB,OAAO9E,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAek9B,sBAAuB,OAAO/E,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAem9B,uBAAwB,OAAOhF,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAeo9B,uBAAwB,OAAOjF,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAeq9B,mBAAoB,OAAOlF,EAASn4B,EAAe6rB,WAAYhF,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE3H,KAAKf,EAAes9B,sBAAuB,OAAOnF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAeu9B,uBAAwB,OAAOpF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/H,KAAKf,EAAew9B,mBAAoB,OAAOrF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAey9B,sBAAuB,OAAOtF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAe09B,uBAAwB,OAAOvF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe29B,uBAAwB,OAAOxF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe49B,mBAAoB,OAAOzF,EAASn4B,EAAe8rB,WAAYjF,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE3H,KAAKf,EAAe69B,qBAAsB,OAAO1F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAe89B,sBAAuB,OAAO3F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAe+9B,kBAAmB,OAAO5F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzH,KAAKf,EAAeg+B,qBAAsB,OAAO7F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC3H,KAAKf,EAAei+B,sBAAuB,OAAO9F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAek+B,sBAAuB,OAAO/F,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAem+B,kBAAmB,OAAOhG,EAASn4B,EAAe+rB,UAAWlF,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAEzH,KAAKf,EAAeo+B,sBAAuB,OAAOjG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAeq+B,uBAAwB,OAAOlG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/H,KAAKf,EAAes+B,mBAAoB,OAAOnG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC3H,KAAKf,EAAeu+B,sBAAuB,OAAOpG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC7H,KAAKf,EAAew+B,uBAAwB,OAAOrG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAey+B,uBAAwB,OAAOtG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe0+B,mBAAoB,OAAOvG,EAASn4B,EAAegsB,WAAYnF,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE3H,KAAKf,EAAe2+B,uBAAwB,OAAOxG,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC/H,KAAKf,EAAe4+B,wBAAyB,OAAOzG,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACjI,KAAKf,EAAe6+B,oBAAqB,OAAO1G,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC7H,KAAKf,EAAe8+B,uBAAwB,OAAO3G,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAC/H,KAAKf,EAAe++B,wBAAyB,OAAO5G,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACjI,KAAKf,EAAeg/B,wBAAyB,OAAO7G,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACjI,KAAKf,EAAei/B,oBAAqB,OAAO9G,EAASn4B,EAAeisB,YAAapF,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAE7H,KAAKf,EAAek/B,0BAA2B,OAAO/G,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACrI,KAAKf,EAAem/B,2BAA4B,OAAOhH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACvI,KAAKf,EAAeo/B,uBAAwB,OAAOjH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACnI,KAAKf,EAAeq/B,0BAA2B,OAAOlH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACrI,KAAKf,EAAes/B,2BAA4B,OAAOnH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACvI,KAAKf,EAAeu/B,2BAA4B,OAAOpH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GACvI,KAAKf,EAAew/B,uBAAwB,OAAOrH,EAASn4B,EAAev8B,eAAgBojD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAEnI,KAAKf,EAAey/B,SAAU,OAAOtH,EAASn4B,EAAen8B,YAAagjD,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAClH,KAAKf,EAAe0/B,SAAU,OAAOvH,EAASn4B,EAAen8B,YAAagjD,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAGtH,GAAI8lB,EAASn3E,QAAQW,WAAU,GAC7B,OAAQpT,EAAUmQ,cAEhB,KAAK4yD,EAAe2/B,UAAW,OAAOxH,EAASn4B,EAAep9B,KAAMikD,EAAUn+E,EAAAkH,KAAK7Q,KAAMojC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC9G,KAAKf,EAAe4/B,WAAY,OAAOzH,EAASn4B,EAAex+B,MAAOqlD,EAAUn+E,EAAAkH,KAAK7Q,KAAMojC,EAAUz5B,EAAAkH,KAAKG,KAAMgxD,GAEhH,KAAKf,EAAe6/B,YAAa,OAAO1H,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACpH,KAAKf,EAAe8/B,qBAAsB,OAAO3H,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK1R,GAAI6iE,GAClI,KAAKf,EAAe+/B,qBAAsB,OAAO5H,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAKrR,GAAIwiE,GAClI,KAAKf,EAAeggC,mBAAoB,OAAO7H,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAClI,KAAKf,EAAeigC,UAAW,OAAO9H,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAekgC,UAAW,OAAO/H,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAemgC,UAAW,OAAOhI,EAASn4B,EAAesvB,SAAUzI,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeogC,UAAW,OAAOjI,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeqgC,qBAAsB,OAAOlI,EAASn4B,EAAewvB,kBAAmB3I,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACpI,KAAKf,EAAesgC,qBAAsB,OAAOnI,EAASn4B,EAAewvB,kBAAmB3I,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACpI,KAAKf,EAAeugC,qBAAsB,OAAOpI,EAASn4B,EAAeyvB,kBAAmB5I,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACpI,KAAKf,EAAewgC,qBAAsB,OAAOrI,EAASn4B,EAAeyvB,kBAAmB5I,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACpI,KAAKf,EAAeygC,UAAW,OAAOtI,EAASn4B,EAAeg2B,SAAUnP,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAe0gC,YAAa,OAAOvI,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAClH,KAAKf,EAAe2gC,YAAa,OAAOxI,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAClH,KAAKf,EAAe4gC,eAAgB,OAAOzI,EAASn4B,EAAeu3B,cAAe1Q,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzH,KAAKf,EAAe6gC,eAAgB,OAAO1I,EAASn4B,EAAew3B,cAAe3Q,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GACzH,KAAKf,EAAe8gC,SAAU,OAAO3I,EAASn4B,EAAe4vB,QAAS/I,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC9G,KAAKf,EAAe+gC,SAAU,OAAO5I,EAASn4B,EAAe6vB,QAAShJ,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC9G,KAAKf,EAAeghC,WAAY,OAAO7I,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeihC,WAAY,OAAO9I,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAekhC,WAAY,OAAO/I,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAemhC,WAAY,OAAOhJ,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeohC,WAAY,OAAOjJ,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeqhC,WAAY,OAAOlJ,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeshC,WAAY,OAAOnJ,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAChH,KAAKf,EAAeuhC,WAAY,OAAOpJ,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAKrR,GAAI4jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEhH,KAAKf,EAAewhC,YAAa,OAAOrJ,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrH,KAAKf,EAAeyhC,qBAAsB,OAAOtJ,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKzR,IAAK4iE,GACpI,KAAKf,EAAe0hC,qBAAsB,OAAOvJ,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAKpR,IAAKuiE,GACpI,KAAKf,EAAe2hC,mBAAoB,OAAOxJ,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnI,KAAKf,EAAe4hC,UAAW,OAAOzJ,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe6hC,UAAW,OAAO1J,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe8hC,UAAW,OAAO3J,EAASn4B,EAAesvB,SAAUzI,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe+hC,UAAW,OAAO5J,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAegiC,qBAAsB,OAAO7J,EAASn4B,EAAewvB,kBAAmB3I,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrI,KAAKf,EAAeiiC,qBAAsB,OAAO9J,EAASn4B,EAAewvB,kBAAmB3I,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrI,KAAKf,EAAekiC,qBAAsB,OAAO/J,EAASn4B,EAAeyvB,kBAAmB5I,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrI,KAAKf,EAAemiC,qBAAsB,OAAOhK,EAASn4B,EAAeyvB,kBAAmB5I,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrI,KAAKf,EAAeoiC,UAAW,OAAOjK,EAASn4B,EAAeg2B,SAAUnP,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeqiC,YAAa,OAAOlK,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAesiC,YAAa,OAAOnK,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAeuiC,eAAgB,OAAOpK,EAASn4B,EAAeu3B,cAAe1Q,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAewiC,eAAgB,OAAOrK,EAASn4B,EAAew3B,cAAe3Q,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAeyiC,SAAU,OAAOtK,EAASn4B,EAAe4vB,QAAS/I,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe0iC,SAAU,OAAOvK,EAASn4B,EAAe6vB,QAAShJ,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe2iC,WAAY,OAAOxK,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe4iC,WAAY,OAAOzK,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe6iC,WAAY,OAAO1K,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe8iC,WAAY,OAAO3K,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe+iC,WAAY,OAAO5K,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAegjC,WAAY,OAAO7K,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeijC,WAAY,OAAO9K,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAKzR,IAAKgkC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAekjC,WAAY,OAAO/K,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAKpR,IAAK2jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEjH,KAAKf,EAAemjC,YAAa,OAAOhL,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrH,KAAKf,EAAeojC,mBAAoB,OAAOjL,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAClI,KAAKf,EAAeqjC,mBAAoB,OAAOlL,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnI,KAAKf,EAAesjC,UAAW,OAAOnL,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeujC,UAAW,OAAOpL,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAewjC,UAAW,OAAOrL,EAASn4B,EAAesvB,SAAUzI,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeyjC,UAAW,OAAOtL,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe0jC,UAAW,OAAOvL,EAASn4B,EAAeg2B,SAAUnP,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe2jC,YAAa,OAAOxL,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAe4jC,YAAa,OAAOzL,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAe6jC,eAAgB,OAAO1L,EAASn4B,EAAeu3B,cAAe1Q,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAe8jC,eAAgB,OAAO3L,EAASn4B,EAAew3B,cAAe3Q,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAe+jC,SAAU,OAAO5L,EAASn4B,EAAe4vB,QAAS/I,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAegkC,SAAU,OAAO7L,EAASn4B,EAAe6vB,QAAShJ,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAeikC,WAAY,OAAO9L,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAekkC,WAAY,OAAO/L,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAemkC,WAAY,OAAOhM,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeokC,WAAY,OAAOjM,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeqkC,WAAY,OAAOlM,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeskC,WAAY,OAAOnM,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeukC,WAAY,OAAOpM,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAewkC,WAAY,OAAOrM,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeykC,wBAAyB,OAAOtM,EAASn4B,EAAe60B,WAAYhO,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjI,KAAKf,EAAe0kC,wBAAyB,OAAOvM,EAASn4B,EAAe60B,WAAYhO,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEjI,KAAKf,EAAe2kC,YAAa,OAAOxM,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrH,KAAKf,EAAe4kC,mBAAoB,OAAOzM,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKvR,IAAK0iE,GAClI,KAAKf,EAAe6kC,mBAAoB,OAAO1M,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnI,KAAKf,EAAe8kC,UAAW,OAAO3M,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe+kC,UAAW,OAAO5M,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeglC,UAAW,OAAO7M,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeilC,UAAW,OAAO9M,EAASn4B,EAAeg2B,SAAUnP,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeklC,YAAa,OAAO/M,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAemlC,YAAa,OAAOhN,EAASn4B,EAAei2B,SAAUpP,EAAUn+E,EAAAkH,KAAKlR,IAAKyjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAeolC,eAAgB,OAAOjN,EAASn4B,EAAeu3B,cAAe1Q,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAeqlC,eAAgB,OAAOlN,EAASn4B,EAAew3B,cAAe3Q,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAKxR,IAAK2iE,GAC1H,KAAKf,EAAeslC,wBAAyB,OAAOnN,EAASn4B,EAAe60B,WAAYhO,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjI,KAAKf,EAAeulC,wBAAyB,OAAOpN,EAASn4B,EAAe60B,WAAYhO,EAAUn+E,EAAAkH,KAAKlR,IAAKyjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEjI,KAAKf,EAAewlC,YAAa,OAAOrN,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrH,KAAKf,EAAeylC,mBAAoB,OAAOtN,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK/Q,IAAKkiE,GAClI,KAAKf,EAAe0lC,mBAAoB,OAAOvN,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnI,KAAKf,EAAe2lC,UAAW,OAAOxN,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe4lC,UAAW,OAAOzN,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe6lC,UAAW,OAAO1N,EAASn4B,EAAesvB,SAAUzI,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe8lC,UAAW,OAAO3N,EAASn4B,EAAeuvB,SAAU1I,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAe+lC,UAAW,OAAO5N,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAegmC,UAAW,OAAO7N,EAASn4B,EAAe0vB,SAAU7I,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeimC,UAAW,OAAO9N,EAASn4B,EAAe2vB,SAAU9I,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAekmC,UAAW,OAAO/N,EAASn4B,EAAe00B,SAAU7N,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAemmC,WAAY,OAAOhO,EAASn4B,EAAe20B,UAAW9N,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAeomC,SAAU,OAAOjO,EAASn4B,EAAe4vB,QAAS/I,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAeqmC,SAAU,OAAOlO,EAASn4B,EAAe6vB,QAAShJ,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAesmC,SAAU,OAAOnO,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAeumC,SAAU,OAAOpO,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAewmC,SAAU,OAAOrO,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAeymC,SAAU,OAAOtO,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAK/Q,IAAKsjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe0mC,sBAAuB,OAAOvO,EAASn4B,EAAe40B,aAAc/N,EAAUn+E,EAAAkH,KAAKxR,IAAK+jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjI,KAAKf,EAAe2mC,sBAAuB,OAAOxO,EAASn4B,EAAe40B,aAAc/N,EAAUn+E,EAAAkH,KAAKnR,IAAK0jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEjI,KAAKf,EAAe4mC,YAAa,OAAOzO,EAASn4B,EAAestB,WAAYzG,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACrH,KAAKf,EAAe6mC,mBAAoB,OAAO1O,EAASn4B,EAAe6tB,kBAAmBhH,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK9Q,IAAKiiE,GAClI,KAAKf,EAAe8mC,mBAAoB,OAAO3O,EAASn4B,EAAeuuB,kBAAmB1H,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnI,KAAKf,EAAe+mC,UAAW,OAAO5O,EAASn4B,EAAeovB,SAAUvI,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAegnC,UAAW,OAAO7O,EAASn4B,EAAeqvB,SAAUxI,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeinC,UAAW,OAAO9O,EAASn4B,EAAesvB,SAAUzI,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeknC,UAAW,OAAO/O,EAASn4B,EAAeuvB,SAAU1I,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAemnC,UAAW,OAAOhP,EAASn4B,EAAey0B,SAAU5N,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeonC,UAAW,OAAOjP,EAASn4B,EAAe0vB,SAAU7I,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeqnC,UAAW,OAAOlP,EAASn4B,EAAe2vB,SAAU9I,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAesnC,UAAW,OAAOnP,EAASn4B,EAAe00B,SAAU7N,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjH,KAAKf,EAAeunC,WAAY,OAAOpP,EAASn4B,EAAe20B,UAAW9N,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACnH,KAAKf,EAAewnC,SAAU,OAAOrP,EAASn4B,EAAe4vB,QAAS/I,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAeynC,SAAU,OAAOtP,EAASn4B,EAAe6vB,QAAShJ,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe0nC,SAAU,OAAOvP,EAASn4B,EAAe8vB,QAASjJ,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe2nC,SAAU,OAAOxP,EAASn4B,EAAe+vB,QAASlJ,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe4nC,SAAU,OAAOzP,EAASn4B,EAAegwB,QAASnJ,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe6nC,SAAU,OAAO1P,EAASn4B,EAAeiwB,QAASpJ,EAAUn+E,EAAAkH,KAAK9Q,IAAKqjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAC/G,KAAKf,EAAe8nC,sBAAuB,OAAO3P,EAASn4B,EAAe40B,aAAc/N,EAAUn+E,EAAAkH,KAAKvR,IAAK8jC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GACjI,KAAKf,EAAe+nC,sBAAuB,OAAO5P,EAASn4B,EAAe40B,aAAc/N,EAAUn+E,EAAAkH,KAAKlR,IAAKyjC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAEjI,KAAKf,EAAegoC,cAAe,OAAO7P,EAASn4B,EAAe8uB,aAAcjI,EAAUn+E,EAAAkH,KAAK1R,GAAIikC,EAAUz5B,EAAAkH,KAAK7Q,KAAMgiE,GAI5H,OAAO,EA3TMknC,CAAYphB,EAAU5pF,EAAWklC,EAAU4+B,KAEhD95C,GACF4/D,EAASx+E,MACPI,EAAAhD,eAAe42D,sBACf0E,EAAWqnB,mBAAoBnrF,EAAUmQ,cAGtCw0B,IAGXilD,EAASx+E,MACPI,EAAAhD,eAAeq3D,mBACfiE,EAAW/7B,WAAWj/B,MAAO9I,EAAUmQ,cAElCzS,EAAO8rC,eAgThB,SAAS0xD,EACPv8F,EACAirF,EACA7pB,EACA76B,EACAy7B,EACAmD,GAEA37D,OAAOyhF,EAASrmE,QAAQlU,eAAekD,IAAI5T,IAC3C,IAAIqB,EAAY4pF,EAASrmE,QAAQlU,eAAepQ,IAAIN,GAEpD,OADAwJ,OAAOnI,EAAUwU,MAAQm7C,EAAA9gD,YAAYkN,oBAC9B6mE,EACLgH,EACmB5pF,EACnB,CAAE+/D,GACF76B,EACAy7B,EACAmD,GACY,GAKhB,SAAgB8V,EACdgQ,EACA/gF,EACAi7D,GAEA,IAAIvgD,EAAUqmE,EAASrmE,QACnB7lB,EAASksF,EAASlsF,OAElBsa,EAAiB4xE,EAASrmE,QAAQvL,eACtC,IAAKA,EAAgB,OAAOta,EAAO8rC,cAEnC,IAGIyhE,EAHAzwF,EAAgB+I,EAAQ/I,cAC5B,IAAMA,IAAiBovE,EAASrW,gBAAgB/4D,GAAiB,OAAO9c,EAAO8rC,cAQ7EyhE,EALc,OAAZpiG,EAKW+gF,EAASvX,kBAAkBxpE,EAASmP,EAAegF,KAAM,IAEzDhF,EAAegF,KAAKy0C,aAAa/zD,GAGhD,IAAIwtG,EAActhB,EAAS7U,mBAAmBjR,EAAWh7D,MAAMY,OAAOC,gBAGtE,OADAigF,EAASvc,YAAc5hE,EAAAkH,KAAKG,KACrBpV,EAAO6pC,MAAM,KAAM,CACxB7pC,EAAOa,KACLic,EAAcrK,aAAc,CAC1B86F,EACAC,EACAxtG,EAAOyD,IAAI2iE,EAAWh7D,MAAMc,MAC5BlM,EAAOyD,IAAI2iE,EAAWh7D,MAAMe,SAE9B+lD,EAAAriC,WAAWyY,MAEbtoC,EAAO8rC,gBA6KX,SAAS2hE,EAAmBnuF,GAC1B,IAAIjM,EAAQ,IAA+B,GAAKiM,EAAKwqE,WAKrD,OAJIxqE,EAAKK,GAAE,KAAoBtM,GAAK,MAChCiM,EAAKK,GAAE,KAAmBtM,GAAK,MAC/BiM,EAAKK,GAAE,OAAsBtM,GAAK,MAClCiM,EAAK2zD,YAAW5/D,GAAK,MAClBA,EAAK,GA2Dd,SAASi5E,EACPJ,EACA5/D,EACAkb,EACA4+B,GAEA,GAAuB,GAAnB5+B,EAASh7B,OACX,OAAK8f,GAAyC,GAAxBA,EAAc9f,OAO7B8f,EAAc,IANnB4/D,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWqnB,mBAAoB,IAAKnhE,EAAgBA,EAAc9f,OAAOT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnBy7B,EAASh7B,OAAa,CACxB,GAAsB,OAAlB8f,GAA0BA,EAAc9f,OAAQ,CAClD,GAAI8f,EAAc9f,OAAS,EAKzB,OAJA0/E,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWqnB,mBAAoB,IAAKnhE,EAAc9f,OAAOT,SAAS,KAE7D,KAETmgF,EAASvX,kBAAkBntC,EAAS,GAAIlb,EAAc,GAAE,QAExD4/D,EAASvX,kBAAkBntC,EAAS,GAAIz5B,EAAAkH,KAAK89C,MAE/C,OAAOm5B,EAASvc,YAYlB,OAVIrjD,GAAiBA,EAAc9f,OAAS,GAC1C0/E,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWqnB,mBAAoB,IAAKnhE,EAAc9f,OAAOT,SAAS,KAGtEmgF,EAASx+E,MACPI,EAAAhD,eAAekZ,+BACfoiD,EAAWsnC,eAAgB,IAAKlmE,EAASh7B,OAAOT,SAAS,KAEpD,KAIT,SAAS4kF,EAAwBtmD,EAAwB6hD,GACvD,IAAIjlD,EACAtlC,EA6BJ,OA5BIuqF,EAASn3E,QAAQc,UACnBoxB,EAAOilD,EAASr5C,qBAAqBxI,EAAYt8B,EAAAkH,KAAK49C,QAAO,IAE3DX,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,OACtCgd,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWnpB,KACR,GAA9BwrD,EAAA1a,qBAAqBvQ,KACpBtlC,EAAQuwD,EAAA3a,oBAAoBtQ,IAAS,KAEtCilD,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACfpoD,EAAWj/B,OAEbzJ,GAAS,KAGXslC,EAAOilD,EAASr5C,qBAAqBxI,EAAYt8B,EAAAkH,KAAK69C,QAAO,IAE3DZ,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,OACtCgd,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,MACrC9E,EAAQuwD,EAAA5a,iBAAiBrQ,IAAS,KAEnCilD,EAASx+E,MACPI,EAAAhD,eAAe2nF,2CACfpoD,EAAWj/B,OAEbzJ,GAAS,IAGNA,EAIT,SAAS0rF,EACP/gE,EACA85C,EACA8lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIrhF,EAAe,CACjB,IAAIe,EAAmBf,EAAc9f,OACrC,GAAwB,GAApB6gB,EAAuB,OAAO,EAClC5iB,OAAO4iB,GACHsgF,IAAuBzhB,EAASvc,YAAcrjD,EAAc,IAChE4/D,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWqnB,mBAAoB,IAAKpgE,EAAiBthB,iBAGvDmgF,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWh7D,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASwiF,EACPthE,EACA85C,EACA8lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIrhF,EAAe,CACjB,IAAIe,EAAmBf,EAAc9f,OACrC,OAAwB,GAApB6gB,EAA8B,GAClC5iB,OAAO4iB,GACHsgF,IAAuBzhB,EAASvc,YAAcrjD,EAAc,IAChE4/D,EAASx+E,MACPI,EAAAhD,eAAes3D,oCACfgE,EAAWqnB,mBAAoB,IAAKpgE,EAAiBthB,YAEhD,GAET,OAAO,EAIT,SAASihF,EACP1gE,EACA85C,EACA9jE,GAEA,OAAIgqB,GACFhqB,EAAUujB,QAAQnY,MAChBI,EAAAhD,eAAe42D,sBACf0E,EAAWqnB,mBAAoBnrF,EAAUmQ,cAEpC,GAEF,EAIT,SAASw6E,EACPzlD,EACAuB,EACAq9B,EACA8lB,GAEA,OAAI1kD,EAASh7B,QAAUu8B,GACrBmjD,EAASx+E,MACPI,EAAAhD,eAAekZ,+BACfoiD,EAAWh7D,MAAO29B,EAASh9B,WAAYy7B,EAASh7B,OAAOT,YAElD,GAEF,EAIT,SAASyhF,EACPhmD,EACAomE,EACAC,EACAznC,EACA8lB,GAEA,IAAIlE,EAAcxgD,EAASh7B,OAC3B,OAAIw7E,EAAc4lB,GAChB1hB,EAASx+E,MACPI,EAAAhD,eAAew6E,wCACflf,EAAWh7D,MAAOwiG,EAAgB7hG,WAAYi8E,EAAYj8E,YAErD,GACEi8E,EAAc6lB,GACvB3hB,EAASx+E,MACPI,EAAAhD,eAAekZ,+BACfoiD,EAAWh7D,MAAOyiG,EAAgB9hG,WAAYi8E,EAAYj8E,YAErD,GAEF,GA3sIT,SAAiBs5D,GAEFA,EAAAgnB,UAAY,0BACZhnB,EAAAknB,QAAU,wBACVlnB,EAAAmnB,UAAY,0BACZnnB,EAAAonB,SAAW,yBACXpnB,EAAAqnB,YAAc,4BACdrnB,EAAAsnB,SAAW,yBACXtnB,EAAAunB,QAAU,wBACVvnB,EAAAwnB,YAAc,4BACdxnB,EAAAynB,WAAa,2BACbznB,EAAA3hB,WAAa,2BACb2hB,EAAA0nB,UAAY,0BACZ1nB,EAAA8nB,WAAa,2BACb9nB,EAAA4N,UAAY,0BAEZ5N,EAAArS,IAAM,oBACNqS,EAAAkoB,IAAM,oBACNloB,EAAAsoB,OAAS,uBACTtoB,EAAA2oB,KAAO,qBACP3oB,EAAA8oB,KAAO,qBACP9oB,EAAAipB,IAAM,oBACNjpB,EAAA2F,IAAM,oBACN3F,EAAA2pB,IAAM,oBACN3pB,EAAA7S,KAAO,qBACP6S,EAAA8pB,MAAQ,sBACR9pB,EAAAmqB,SAAW,yBACXnqB,EAAAsqB,QAAU,wBACVtqB,EAAAyqB,YAAc,4BACdzqB,EAAA8qB,KAAO,qBACP9qB,EAAAirB,MAAQ,sBACRjrB,EAAAp9B,KAAO,qBACPo9B,EAAAx+B,MAAQ,sBACRw+B,EAAA78B,YAAc,4BACd68B,EAAA38B,aAAe,6BACf28B,EAAA4rB,WAAa,2BACb5rB,EAAA6rB,WAAa,2BACb7rB,EAAA8rB,WAAa,2BACb9rB,EAAA+rB,UAAY,0BACZ/rB,EAAAgsB,WAAa,2BACbhsB,EAAAisB,YAAc,4BACdjsB,EAAAv8B,eAAiB,+BACjBu8B,EAAAn8B,YAAc,4BACdm8B,EAAA/7B,cAAgB,8BAEhB+7B,EAAA+nB,OAAS,uBACT/nB,EAAAioB,QAAU,wBACVjoB,EAAAv3C,SAAW,yBACXu3C,EAAAp6B,OAAS,uBACTo6B,EAAAv5B,YAAc,4BACdu5B,EAAA7/B,WAAa,2BACb6/B,EAAA56D,OAAS,uBACT46D,EAAA13C,UAAY,0BACZ03C,EAAA6sB,YAAc,4BACd7sB,EAAA15B,cAAgB,8BAChB05B,EAAAktB,YAAc,4BACdltB,EAAA+3B,KAAO,qBAEP/3B,EAAA9hE,GAAK,mBACL8hE,EAAA7hE,IAAM,oBACN6hE,EAAA5hE,IAAM,oBACN4hE,EAAA3hE,IAAM,oBACN2hE,EAAA1hE,MAAQ,sBACR0hE,EAAAzhE,GAAK,mBACLyhE,EAAAxhE,IAAM,oBACNwhE,EAAAvhE,IAAM,oBACNuhE,EAAAthE,IAAM,oBACNshE,EAAArhE,MAAQ,sBACRqhE,EAAAphE,KAAO,qBACPohE,EAAAnhE,IAAM,oBACNmhE,EAAAlhE,IAAM,oBACNkhE,EAAAjhE,KAAO,qBACPihE,EAAAtgE,MAAQ,qBAERsgE,EAAAk4B,QAAU,wBACVl4B,EAAAo4B,QAAU,wBACVp4B,EAAAq4B,QAAU,wBACVr4B,EAAAs4B,QAAU,wBACVt4B,EAAAu4B,WAAa,2BACbv4B,EAAAw4B,WAAa,2BACbx4B,EAAAy4B,SAAW,yBACXz4B,EAAA04B,SAAW,yBACX14B,EAAA24B,SAAW,yBACX34B,EAAA44B,SAAW,yBAEX54B,EAAA64B,QAAU,wBACV74B,EAAA84B,QAAU,wBACV94B,EAAA+4B,QAAU,wBACV/4B,EAAAg5B,QAAU,wBACVh5B,EAAAi5B,QAAU,wBACVj5B,EAAAk5B,QAAU,wBACVl5B,EAAAm5B,SAAW,yBACXn5B,EAAAo5B,SAAW,yBACXp5B,EAAAq5B,UAAY,0BACZr5B,EAAAs5B,UAAY,0BACZt5B,EAAAu5B,aAAe,6BACfv5B,EAAAw5B,aAAe,6BACfx5B,EAAAy5B,YAAc,4BACdz5B,EAAA05B,YAAc,4BACd15B,EAAA25B,oBAAsB,oCACtB35B,EAAA45B,oBAAsB,oCACtB55B,EAAA65B,oBAAsB,oCACtB75B,EAAA85B,oBAAsB,oCACtB95B,EAAA+5B,SAAW,yBACX/5B,EAAAg6B,SAAW,yBACXh6B,EAAAi6B,UAAY,0BACZj6B,EAAAk6B,UAAY,0BAEZl6B,EAAAm6B,YAAc,4BACdn6B,EAAAo6B,YAAc,4BACdp6B,EAAAq6B,aAAe,6BACfr6B,EAAAs6B,aAAe,6BACft6B,EAAAu6B,SAAW,yBACXv6B,EAAAw6B,YAAc,4BACdx6B,EAAAy6B,YAAc,4BACdz6B,EAAA06B,aAAe,6BACf16B,EAAA26B,aAAe,6BACf36B,EAAA46B,aAAe,6BACf56B,EAAA66B,aAAe,6BACf76B,EAAA86B,SAAW,yBACX96B,EAAA+6B,SAAW,yBACX/6B,EAAAg7B,SAAW,yBACXh7B,EAAAi7B,WAAa,2BACbj7B,EAAAk7B,YAAc,4BACdl7B,EAAAm7B,UAAY,0BACZn7B,EAAAo7B,WAAa,2BACbp7B,EAAAq7B,YAAc,4BACdr7B,EAAAs7B,YAAc,4BACdt7B,EAAAu7B,UAAY,0BACZv7B,EAAAw7B,UAAY,0BACZx7B,EAAAy7B,UAAY,0BAEZz7B,EAAA07B,mBAAqB,mCACrB17B,EAAA27B,oBAAsB,oCACtB37B,EAAA47B,gBAAkB,gCAClB57B,EAAA67B,mBAAqB,mCACrB77B,EAAA87B,oBAAsB,oCACtB97B,EAAA+7B,oBAAsB,oCACtB/7B,EAAAg8B,gBAAkB,gCAClBh8B,EAAAi8B,kBAAoB,kCACpBj8B,EAAAk8B,mBAAqB,mCACrBl8B,EAAAm8B,iBAAmB,iCACnBn8B,EAAAo8B,kBAAoB,kCACpBp8B,EAAAq8B,mBAAqB,mCACrBr8B,EAAAs8B,mBAAqB,mCACrBt8B,EAAAu8B,iBAAmB,iCACnBv8B,EAAAw8B,sBAAwB,sCACxBx8B,EAAAy8B,uBAAyB,uCACzBz8B,EAAA08B,mBAAqB,mCACrB18B,EAAA28B,sBAAwB,sCACxB38B,EAAA48B,uBAAyB,uCACzB58B,EAAA68B,uBAAyB,uCACzB78B,EAAA88B,mBAAqB,mCACrB98B,EAAA+8B,sBAAwB,sCACxB/8B,EAAAg9B,uBAAyB,uCACzBh9B,EAAAi9B,mBAAqB,mCACrBj9B,EAAAk9B,sBAAwB,sCACxBl9B,EAAAm9B,uBAAyB,uCACzBn9B,EAAAo9B,uBAAyB,uCACzBp9B,EAAAq9B,mBAAqB,mCACrBr9B,EAAAs9B,sBAAwB,sCACxBt9B,EAAAu9B,uBAAyB,uCACzBv9B,EAAAw9B,mBAAqB,mCACrBx9B,EAAAy9B,sBAAwB,sCACxBz9B,EAAA09B,uBAAyB,uCACzB19B,EAAA29B,uBAAyB,uCACzB39B,EAAA49B,mBAAqB,mCACrB59B,EAAA69B,qBAAuB,qCACvB79B,EAAA89B,sBAAwB,sCACxB99B,EAAA+9B,kBAAoB,kCACpB/9B,EAAAg+B,qBAAuB,qCACvBh+B,EAAAi+B,sBAAwB,sCACxBj+B,EAAAk+B,sBAAwB,sCACxBl+B,EAAAm+B,kBAAoB,kCACpBn+B,EAAAo+B,sBAAwB,sCACxBp+B,EAAAq+B,uBAAyB,uCACzBr+B,EAAAs+B,mBAAqB,mCACrBt+B,EAAAu+B,sBAAwB,sCACxBv+B,EAAAw+B,uBAAyB,uCACzBx+B,EAAAy+B,uBAAyB,uCACzBz+B,EAAA0+B,mBAAqB,mCACrB1+B,EAAA2+B,uBAAyB,uCACzB3+B,EAAA4+B,wBAA0B,wCAC1B5+B,EAAA6+B,oBAAsB,oCACtB7+B,EAAA8+B,uBAAyB,uCACzB9+B,EAAA++B,wBAA0B,wCAC1B/+B,EAAAg/B,wBAA0B,wCAC1Bh/B,EAAAi/B,oBAAsB,oCACtBj/B,EAAAk/B,0BAA4B,0CAC5Bl/B,EAAAm/B,2BAA6B,2CAC7Bn/B,EAAAo/B,uBAAyB,uCACzBp/B,EAAAq/B,0BAA4B,0CAC5Br/B,EAAAs/B,2BAA6B,2CAC7Bt/B,EAAAu/B,2BAA6B,2CAC7Bv/B,EAAAw/B,uBAAyB,uCACzBx/B,EAAAy/B,SAAW,yBACXz/B,EAAA0/B,SAAW,yBAEX1/B,EAAAstB,WAAa,2BACbttB,EAAA6tB,kBAAoB,kCACpB7tB,EAAAuuB,kBAAoB,kCACpBvuB,EAAA8uB,aAAe,6BACf9uB,EAAA2/B,UAAY,0BACZ3/B,EAAA4/B,WAAa,2BACb5/B,EAAAovB,SAAW,yBACXpvB,EAAAqvB,SAAW,yBACXrvB,EAAAsvB,SAAW,yBACXtvB,EAAAuvB,SAAW,yBACXvvB,EAAAy0B,SAAW,yBACXz0B,EAAAwvB,kBAAoB,kCACpBxvB,EAAAyvB,kBAAoB,kCACpBzvB,EAAAg2B,SAAW,yBACXh2B,EAAAi2B,SAAW,yBACXj2B,EAAA82B,SAAW,yBACX92B,EAAA+2B,QAAU,wBACV/2B,EAAAg3B,SAAW,yBACXh3B,EAAAo3B,SAAW,yBACXp3B,EAAAs3B,eAAiB,+BACjBt3B,EAAAu3B,cAAgB,8BAChBv3B,EAAAw3B,cAAgB,8BAChBx3B,EAAA0vB,SAAW,yBACX1vB,EAAA2vB,SAAW,yBACX3vB,EAAA00B,SAAW,yBACX10B,EAAA20B,UAAY,0BACZ30B,EAAA4vB,QAAU,wBACV5vB,EAAA6vB,QAAU,wBACV7vB,EAAA8vB,QAAU,wBACV9vB,EAAA+vB,QAAU,wBACV/vB,EAAAgwB,QAAU,wBACVhwB,EAAAiwB,QAAU,wBACVjwB,EAAA40B,aAAe,6BACf50B,EAAA60B,WAAa,2BAEb70B,EAAAhhE,MAAQ,sBACRghE,EAAA9gE,MAAQ,sBACR8gE,EAAA5gE,MAAQ,sBACR4gE,EAAA1gE,MAAQ,sBACR0gE,EAAAxgE,MAAQ,sBACRwgE,EAAAvgE,MAAQ,sBAERugE,EAAA6/B,YAAc,4BACd7/B,EAAA8/B,qBAAuB,qCACvB9/B,EAAA+/B,qBAAuB,qCACvB//B,EAAAggC,mBAAqB,mCACrBhgC,EAAAigC,UAAY,0BACZjgC,EAAAkgC,UAAY,0BACZlgC,EAAAmgC,UAAY,0BACZngC,EAAAogC,UAAY,0BACZpgC,EAAAqgC,qBAAuB,qCACvBrgC,EAAAsgC,qBAAuB,qCACvBtgC,EAAAugC,qBAAuB,qCACvBvgC,EAAAwgC,qBAAuB,qCACvBxgC,EAAAygC,UAAY,0BACZzgC,EAAA0gC,YAAc,4BACd1gC,EAAA2gC,YAAc,4BACd3gC,EAAA4gC,eAAiB,+BACjB5gC,EAAA6gC,eAAiB,+BACjB7gC,EAAA8gC,SAAW,yBACX9gC,EAAA+gC,SAAW,yBACX/gC,EAAAghC,WAAa,2BACbhhC,EAAAihC,WAAa,2BACbjhC,EAAAkhC,WAAa,2BACblhC,EAAAmhC,WAAa,2BACbnhC,EAAAohC,WAAa,2BACbphC,EAAAqhC,WAAa,2BACbrhC,EAAAshC,WAAa,2BACbthC,EAAAuhC,WAAa,2BAEbvhC,EAAAwhC,YAAc,4BACdxhC,EAAAyhC,qBAAuB,qCACvBzhC,EAAA0hC,qBAAuB,qCACvB1hC,EAAA2hC,mBAAqB,mCACrB3hC,EAAA4hC,UAAY,0BACZ5hC,EAAA6hC,UAAY,0BACZ7hC,EAAA8hC,UAAY,0BACZ9hC,EAAA+hC,UAAY,0BACZ/hC,EAAAgiC,qBAAuB,qCACvBhiC,EAAAiiC,qBAAuB,qCACvBjiC,EAAAkiC,qBAAuB,qCACvBliC,EAAAmiC,qBAAuB,qCACvBniC,EAAAoiC,UAAY,0BACZpiC,EAAAqiC,YAAc,4BACdriC,EAAAsiC,YAAc,4BACdtiC,EAAAuiC,eAAiB,+BACjBviC,EAAAwiC,eAAiB,+BACjBxiC,EAAAyiC,SAAW,yBACXziC,EAAA0iC,SAAW,yBACX1iC,EAAA2iC,WAAa,2BACb3iC,EAAA4iC,WAAa,2BACb5iC,EAAA6iC,WAAa,2BACb7iC,EAAA8iC,WAAa,2BACb9iC,EAAA+iC,WAAa,2BACb/iC,EAAAgjC,WAAa,2BACbhjC,EAAAijC,WAAa,2BACbjjC,EAAAkjC,WAAa,2BAEbljC,EAAAmjC,YAAc,4BACdnjC,EAAAojC,mBAAqB,mCACrBpjC,EAAAqjC,mBAAqB,mCACrBrjC,EAAAsjC,UAAY,0BACZtjC,EAAAujC,UAAY,0BACZvjC,EAAAwjC,UAAY,0BACZxjC,EAAAyjC,UAAY,0BACZzjC,EAAA0jC,UAAY,0BACZ1jC,EAAA2jC,YAAc,4BACd3jC,EAAA4jC,YAAc,4BACd5jC,EAAA6jC,eAAiB,+BACjB7jC,EAAA8jC,eAAiB,+BACjB9jC,EAAA+jC,SAAW,yBACX/jC,EAAAgkC,SAAW,yBACXhkC,EAAAikC,WAAa,2BACbjkC,EAAAkkC,WAAa,2BACblkC,EAAAmkC,WAAa,2BACbnkC,EAAAokC,WAAa,2BACbpkC,EAAAqkC,WAAa,2BACbrkC,EAAAskC,WAAa,2BACbtkC,EAAAukC,WAAa,2BACbvkC,EAAAwkC,WAAa,2BACbxkC,EAAAykC,wBAA0B,wCAC1BzkC,EAAA0kC,wBAA0B,wCAE1B1kC,EAAA2kC,YAAc,4BACd3kC,EAAA4kC,mBAAqB,mCACrB5kC,EAAA6kC,mBAAqB,mCACrB7kC,EAAA8kC,UAAY,0BACZ9kC,EAAA+kC,UAAY,0BACZ/kC,EAAAglC,UAAY,0BACZhlC,EAAAilC,UAAY,0BACZjlC,EAAAklC,YAAc,4BACdllC,EAAAmlC,YAAc,4BACdnlC,EAAAolC,eAAiB,+BACjBplC,EAAAqlC,eAAiB,+BACjBrlC,EAAAslC,wBAA0B,wCAC1BtlC,EAAAulC,wBAA0B,wCAE1BvlC,EAAAwlC,YAAc,4BACdxlC,EAAAylC,mBAAqB,mCACrBzlC,EAAA0lC,mBAAqB,mCACrB1lC,EAAA2lC,UAAY,0BACZ3lC,EAAA4lC,UAAY,0BACZ5lC,EAAA6lC,UAAY,0BACZ7lC,EAAA8lC,UAAY,0BACZ9lC,EAAA+lC,UAAY,0BACZ/lC,EAAAgmC,UAAY,0BACZhmC,EAAAimC,UAAY,0BACZjmC,EAAAkmC,UAAY,0BACZlmC,EAAAmmC,WAAa,2BACbnmC,EAAAomC,SAAW,yBACXpmC,EAAAqmC,SAAW,yBACXrmC,EAAAsmC,SAAW,yBACXtmC,EAAAumC,SAAW,yBACXvmC,EAAAwmC,SAAW,yBACXxmC,EAAAymC,SAAW,yBACXzmC,EAAA0mC,sBAAwB,sCACxB1mC,EAAA2mC,sBAAwB,sCAExB3mC,EAAA4mC,YAAc,4BACd5mC,EAAA6mC,mBAAqB,mCACrB7mC,EAAA8mC,mBAAqB,mCACrB9mC,EAAA+mC,UAAY,0BACZ/mC,EAAAgnC,UAAY,0BACZhnC,EAAAinC,UAAY,0BACZjnC,EAAAknC,UAAY,0BACZlnC,EAAAmnC,UAAY,0BACZnnC,EAAAonC,UAAY,0BACZpnC,EAAAqnC,UAAY,0BACZrnC,EAAAsnC,UAAY,0BACZtnC,EAAAunC,WAAa,2BACbvnC,EAAAwnC,SAAW,yBACXxnC,EAAAynC,SAAW,yBACXznC,EAAA0nC,SAAW,yBACX1nC,EAAA2nC,SAAW,yBACX3nC,EAAA4nC,SAAW,yBACX5nC,EAAA6nC,SAAW,yBACX7nC,EAAA8nC,sBAAwB,sCACxB9nC,EAAA+nC,sBAAwB,sCAExB/nC,EAAAgoC,cAAgB,8BAGhBhoC,EAAA4L,UAAY,wBACZ5L,EAAA6L,UAAY,sBACZ7L,EAAAg4B,cAAgB,0BAChBh4B,EAAAi4B,cAAgB,0BAGhBj4B,EAAA76D,MAAQ,yBACR66D,EAAA96D,QAAU,2BACV86D,EAAA/6D,KAAO,wBAGP+6D,EAAAwsB,YAAc,0BACdxsB,EAAA0sB,YAAc,0BACd1sB,EAAAr5B,YAAc,0BACdq5B,EAAAl5B,YAAc,0BACdk5B,EAAAyoC,gBAAkB,8BAClBzoC,EAAA0oC,YAAc,0BACd1oC,EAAA2oC,aAAe,2BAGf3oC,EAAA4oC,mBAAqB,kCACrB5oC,EAAA6oC,cAAgB,6BAChB7oC,EAAA8oC,iBAAmB,6BACnB9oC,EAAA+oC,mBAAqB,+BACrB/oC,EAAAgpC,iBAAmB,6BACnBhpC,EAAAipC,gBAAkB,4BAClBjpC,EAAAkpC,kBAAoB,8BAGpBlpC,EAAAv9D,UAAY,4BACZu9D,EAAAn9D,WAAa,6BACbm9D,EAAAt9D,WAAa,6BACbs9D,EAAAj9D,YAAc,8BACdi9D,EAAAr9D,WAAa,6BACbq9D,EAAAh9D,YAAc,8BACdg9D,EAAAp9D,WAAa,6BACbo9D,EAAA/8D,YAAc,8BACd+8D,EAAAl9D,kBAAoB,oCACpBk9D,EAAA98D,aAAe,+BACf88D,EAAA78D,aAAe,+BAGf68D,EAAAkM,QAAU,eACVlM,EAAA4hB,KAAO,YACP5hB,EAAA+hB,QAAU,eACV/hB,EAAAmpC,aAAe,oBAza9B,CAAiBnpC,EAAAtlE,EAAAslE,iBAAAtlE,EAAAslE,eAAc,KA6a/BtlE,EAAAmlF,cAs1GAnlF,EAAAm8E,eA2CAn8E,EAAA4xE,oBAAA,SAAoCua,WAC9BlsF,EAASksF,EAASlsF,OAClBsoF,EAAQ,IAAIhhF,MACZ4mC,EAAUg+C,EAASxa,mBAAmB,CAAE3jE,EAAAkH,KAAKnR,KAAOiK,EAAAkH,KAAKG,MACzDg+D,EAAiB8Y,EAASn3E,QAAQq+D,eAClC31D,EAAgBhT,OAAOyhF,EAASrmE,QAAQpI,eAE5CyuE,EAASrW,gBAAgBp4D,OAEzB,IAAoB,IAAAsJ,EAAA3O,EAAA8zE,EAASrmE,QAAQlU,eAAeiM,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAAzD,IAAIW,EAAOwF,EAAA9c,MACd,GAAIsX,EAAQnC,MAAQm7C,EAAA9gD,YAAYmQ,OAAhC,CACA,IAAIuqD,EAAiB5yD,EACjB+V,EAAiB68C,EAAOvsD,KAAK0P,eACjC,GACE68C,EAAOlsD,GAAG9R,EAAAnL,YAAYiwE,WACH,OAAnB3jD,IACCA,EAAetT,aAAau2C,EAAA7gD,eAAe0K,WAE5C,GAAI+vD,EAAOlsD,GAAG9R,EAAAnL,YAAYilB,SAAU,CAClC,IAAIhmB,EAAQkqE,EAAOnkD,sBACf6oB,QAAQ5uC,IAAU6uC,SAAS7uC,KAC7B2mF,EAAMv7E,KACJ/M,EAAOa,KAAK4c,EAAchL,aAAc,CACtCy5E,EAASn3E,QAAQc,SACb7V,EAAO0D,IAAI6sC,QAAQ5uC,GAAQ6uC,SAAS7uC,IACpC3B,EAAOyD,IAAI8sC,QAAQ5uC,KACtBuwD,EAAAriC,WAAWyY,YAIlBggD,EAAMv7E,KACJ/M,EAAOyqC,GACLzqC,EAAO6nC,UAAU,EACf7nC,EAAO+nC,WAAW8jC,EAAOp5D,aAAc2gE,IAEzCpzE,EAAOa,KAAK4c,EAAchL,aAAc,CACtCzS,EAAO2nC,UAAU,EAAGyrC,GACpBpzE,EAAO2nC,UAAU,EAAGuqB,EAAAriC,WAAWppB,MAC9ByrD,EAAAriC,WAAWyY,2GAMxBtoC,EAAO2tC,YAAY03B,EAAeg4B,cAAenvD,EAAS,CAAEklC,GAC1DkV,EAAM97E,OACFxM,EAAO6pC,MAAM,KAAMy+C,GACnBtoF,EAAO6qC,QAKf9qC,EAAA6xE,oBAAA,SAAoCsa,mBAC9BrmE,EAAUqmE,EAASrmE,QACnB7lB,EAASksF,EAASlsF,OAClBmV,EAAY0Q,EAAQ9Q,QAAQI,UAC5Bi+D,EAAiBj+D,EAAU2+C,eAC3B26C,EAAiBt5F,EAAUo9C,SAC3Bm8C,EAAQxiB,EAASxa,mBAAmB,CAAEv8D,EAAWpH,EAAAkH,KAAKxR,KAAOsK,EAAAkH,KAAKG,MAClErD,EAAiB8T,EAAQ9T,eACzB0L,EAAgBhT,OAAOob,EAAQpI,eAC/BkxF,EAAS,IAAIrnG,MACbm1C,EAAWyV,EAAAxd,SAAS1yC,OAAOhC,GAE3B4uG,EAAQnyD,EAASQ,mBACnBj9C,EAAO6qC,MACP7qC,EAAOioC,KAAKwmE,GAAgB,EAC1Br7B,GAAkBlhB,EAAAriC,WAAWnpB,IACzB1G,EAAOmnC,OAAO+qB,EAAAz5B,SAAS+nD,OACrBxgF,EAAO2nC,UAAU,EAAGyrC,GACpBpzE,EAAO0D,IAAI,IAEb1D,EAAOmnC,OAAO+qB,EAAAz5B,SAAS8nD,OACrBvgF,EAAO2nC,UAAU,EAAGyrC,GACpBpzE,EAAOyD,IAAI,IAEjByuD,EAAAriC,WAAWppB,IACX,IAIAooG,EAAS,MACb,IAA2B,IAAAC,EAAA12F,EAAArG,GAAcg9F,EAAAD,EAAAx2F,QAAAy2F,EAAAx2F,KAAAw2F,EAAAD,EAAAx2F,OAAE,CAAlC,IAAAoG,EAAAjG,EAAAs2F,EAAAptG,MAAA,GAACwR,EAAAuL,EAAA,GAAIkK,EAAAlK,EAAA,GACZjU,OAAOme,EAAStJ,KAAK2zD,WACrBxoE,OAAO0I,GAAM07F,KAEb,IAAIG,OAAS,EACT9jG,EAAO,IAAI5D,MAGf,GAAIshB,EAASqmF,sBAAwBD,EAAYpmF,EAAS5O,aAAa,iBAAkB,CACvFvP,OAAOukG,EAAUl4F,MAAQm7C,EAAA9gD,YAAYkN,oBACrC,IAAI6wF,EAAYrpF,EAAQnT,SAAS4L,gBAAmC0wF,EAAW,MAC/E,GAAKE,GAAchjB,EAASrW,gBAAgBq5B,GAIrC,CACL,IAAIC,EAAWD,EAAU56F,UACzB7J,OACoC,GAAlC0kG,EAAS9kF,eAAe7d,QACxB2iG,EAAS9kF,eAAe,IAAMtc,EAAAkH,KAAKnR,KACnCqrG,EAAS1jE,YAAc19B,EAAAkH,KAAKG,MAC5B+5F,EAAS/kF,UAAYxB,EAAStJ,MAEhCpU,EAAK6B,KACH/M,EAAOa,KAAKquG,EAAUz8F,aAAc,CAClCzS,EAAO2nC,UAAU,EAAGyrC,GACpBpzE,EAAO2nC,UAAU,EAAGuqB,EAAAriC,WAAWppB,MAC9ByrD,EAAAriC,WAAWyY,YAfhBp9B,EAAK6B,KACH/M,EAAO8rC,mBAmBN,CACL,IAAI3sB,EAAUyJ,EAASzJ,QACvB,GAAIA,MACF,IAAmB,IAAAC,GAAA1F,OAAA,EAAAtB,EAAA+G,EAAQvB,WAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAE,CAAhC,IAAIqG,EAAMU,EAAA1d,MACb,GAAIgd,EAAO7H,MAAQm7C,EAAA9gD,YAAY8N,OACjBN,EAAQpK,SAAWqU,GACLjK,EAAQW,KAClB2zD,UAAW,CACvB,IAAIm8B,EAAsBzwF,EAAQgN,aAClClhB,OAAO2kG,GAAe,GACtBlkG,EAAK6B,KAEH/M,EAAOyqC,GACLzqC,EAAO6nC,UAAU,EACf7nC,EAAOioC,KAAKwmE,GAAgB,EAC1BzuG,EAAO2nC,UAAU,EAAGyrC,GACpBA,EAAgBg8B,IAGpBpvG,EAAOa,KAAK4c,EAAchL,aAAc,CACtCzS,EAAO2nC,UAAU,EAAGyrC,GACpBpzE,EAAO2nC,UAAU,EAAGuqB,EAAAriC,WAAWppB,MAC9ByrD,EAAAriC,WAAWyY,4GASzB1f,EAAS2D,MAAMrhB,EAAK6B,KAAK/M,EAAO+qC,UACrC,IAAIlB,EAAQ4S,EAASE,SACnBsvC,EAAAnV,QAAQ92E,EAAQkL,EAAMgnD,EAAAriC,WAAWyY,OAEnCmU,EAASU,mBAAmByxD,EAAO/kE,EAAO,CAAE12B,IAC5Cw7F,EAAO5hG,KAAK88B,yGAEd,IAA2B,IAAAwlE,EAAAj3F,EAAArG,GAAcu9F,EAAAD,EAAA/2F,QAAAg3F,EAAA/2F,KAAA+2F,EAAAD,EAAA/2F,OAAE,CAAlC,IAAAE,EAAAC,EAAA62F,EAAA3tG,MAAA,GACH4qB,GADIpZ,EAAAqF,EAAA,IAAIoQ,EAAApQ,EAAA,IACQ+T,MAChBA,GACFkwB,EAASI,UAAU8xD,EAAOx7F,GAAKw7F,EAAOpiF,EAAKpZ,uGAG/Cw7F,EAAO5hG,KACL0vC,EAASE,SACP38C,EAAO8rC,gBAGX2Q,EAASU,mBAAmByxD,EAAOD,EAAOA,EAAOniG,OAAS,GAAI,IAC9D0/E,EAASrW,gBAAgBp4D,GACzBzd,EAAO2tC,YAAY03B,EAAei4B,cAAeoR,EAAO,CAAEt7B,GAAkB32B,EAASa,iBAAiBsxD,EAAO,KAa/G7uG,EAAA8xE,YAAA,SAA4Bqa,WACtBrmE,EAAUqmE,EAASrmE,QACnB7lB,EAASksF,EAASlsF,OAClB+R,EAAiB8T,EAAQ9T,eACzBiqE,EAAQjqE,EAAek6B,KACvBA,EAAO,EAAI,EAAI+vC,EACfj9B,EAAO,IAAI72C,WAAW+jC,GAC1B/hC,EAAAgJ,SAAS8oE,EAAOj9B,EAAM,GACtB,IAAI2zC,EAAM,EACNhkE,EAAc7I,EAAQtL,wBACtBg1F,EAAe7gF,EAAYpsB,UAC3Boa,EAAiBmJ,EAAQnJ,eACzBE,EAAeiJ,EAAQjJ,aACvBC,EAAegJ,EAAQhJ,aACvBgyF,EAAS,MACb,IAA2B,IAAAW,EAAAp3F,EAAArG,GAAc09F,EAAAD,EAAAl3F,QAAAm3F,EAAAl3F,KAAAk3F,EAAAD,EAAAl3F,OAAE,CAAlC,IAAAyO,EAAAtO,EAAAg3F,EAAA9tG,MAAA,GAACwR,EAAA4T,EAAA,GAAI6B,EAAA7B,EAAA,GACZtc,OAAO0I,GAAM07F,KACb,IAAIx7F,EAAuB,EAE3B,GADIuV,EAAS8mF,YAAWr8F,GAAK,IACzBuV,IAAa8F,GAAe9F,EAASuD,QAAQojF,GAAe,CAC9D,IAAInjD,EAAYxjC,EAAS6F,oBACzBpb,GAAK,EACDuV,EAASuD,QAAQzP,KAAiBrJ,GAAK,GAC3CA,GAAS,GAA8Bo6F,EAAmBrhD,QACrD,GAAIxjC,EAASuD,QAAQvP,GAAe,CACzC,IAAI0P,EAAgB7hB,OAAOme,EAAS2F,mBAAmB3R,IACvDnS,OAA+B,GAAxB6hB,EAAc9f,QACrB6G,GAAK,EACLA,GAAS,GAA8Bo6F,EAAmBnhF,EAAc,SAC/D1D,EAASuD,QAAQtP,KACtByP,EAAgB7hB,OAAOme,EAAS2F,mBAAmB1R,IACvDpS,OAA+B,GAAxB6hB,EAAc9f,QACrB6G,GAAK,EACLA,GAAS,MAA4Bo6F,EAAmBnhF,EAAc,IACtEjZ,GAAS,GAA8Bo6F,EAAmBnhF,EAAc,KAE1EpiB,EAAAgJ,SAASG,EAAO0rC,EAAM2zC,GAAMA,GAAO,EACnC9pE,EAASiE,UAAYxZ,EACrB,IAAIkZ,EAAO3D,EAAS2D,KACpBriB,EAAAgJ,SAASqZ,EAAOA,EAAKpZ,GAAK,EAAG4rC,EAAM2zC,GAAMA,GAAO,oGAElDjoF,OAAOioF,GAAOzmD,GACd,IAAI92B,EAAY0Q,EAAQ9Q,QAAQI,UAC5BuvB,EAAUwnD,EAAS/U,iBAAiBp4B,GACxC,GAAsB,GAAlB5pC,EAAU82B,KAAW,CACvB,IAAIl5B,EAAS2xB,EAAQ3xB,OACrB/S,EAAOstC,UAAU+3B,EAAe6L,UAAWhf,EAAAriC,WAAWnpB,KAAK,EAAO1G,EAAO0D,IAAI6sC,QAAQx9B,GAASy9B,SAASz9B,UAEvG/S,EAAOstC,UAAU+3B,EAAe6L,UAAWhf,EAAAriC,WAAWppB,KAAK,EAAOzG,EAAOyD,IAAI8sC,QAAQ7L,EAAQ3xB,0FCpmIjG,IAAAm/C,EAAA1xD,EAAA,GAwDAmvG,EAAA,WAWE,SAAAA,IAHAtvG,KAAAiM,KAAiB,GACjBjM,KAAAuvG,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiB7vG,GACf,IAAI8vG,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAU7vG,GACd8vG,EAAWzvC,UASpBsvC,EAAArtG,UAAAutG,UAAA,SAAU7vG,GACR,MAAM,IAAIyc,MAAM,oBAGlBkzF,EAAArtG,UAAAytG,kBAAA,SAAkB7+D,GAChB,IAAIjwC,EAAOixD,EAAAjW,gBAAgB/K,IAAS,IAAM7wC,KAAKuvG,WAAW7jG,SAAS,IAC/Dsc,EAAO6pC,EAAAlW,gBAAgB9K,GAC3B7wC,KAAK0M,KAAK,aACV1M,KAAK0M,KAAK9L,GACVZ,KAAK0M,KAAK,KACT,IAAK,IAAIrM,EAAW,EAAG+V,EAAWy7C,EAAA/V,sBAAsBjL,GAAOxwC,EAAI+V,IAAK/V,EACnEA,EAAI,GAAGL,KAAK0M,KAAK,MACrB1M,KAAK0M,KAAK,KACV1M,KAAK0M,KAAKrM,EAAEqL,SAAS,KACrB1L,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKijG,EAAiB99C,EAAA7V,qBAAqBnL,EAAMxwC,KAExDL,KAAK0M,KAAK,OACV1M,KAAK0M,KAAKijG,EAAiB99C,EAAA3V,sBAAsBrL,KACjD7wC,KAAK0M,KAAK,KACNmlD,EAAA9a,gBAAgB/uB,IAAS6pC,EAAApiC,aAAa8uB,OACxCv+C,KAAK0M,KAAK,OAEZ1M,KAAK4vG,oBAAoB5nF,GACrB6pC,EAAA9a,gBAAgB/uB,IAAS6pC,EAAApiC,aAAa8uB,OACxCv+C,KAAK0M,KAAK,WAEV1M,KAAKuvG,YAGTD,EAAArtG,UAAA2tG,oBAAA,SAAoBhpE,GAClB,IAGIipE,EACAhrG,EACAxE,EAAU+V,EALVtD,EAAK++C,EAAA9a,gBAAgBnQ,GACrB3nB,EAAO4yC,EAAA7a,kBAAkBpQ,GAM7B,OAAQ9zB,GACN,KAAK++C,EAAApiC,aAAa8uB,MAOhB,IANqC,OAAhC15C,EAASgtD,EAAA9Y,aAAanS,MACzB5mC,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,OAEZ1M,KAAK0M,KAAK,OACV0J,EAAIy7C,EAAA5Y,mBAAmBrS,GAClBvmC,EAAI,EAAGA,EAAI+V,IAAK/V,EACnBL,KAAK4vG,oBAAoB/9C,EAAA1Y,cAAcvS,EAAMvmC,IAG/C,YADAL,KAAK0M,KAAK,OAGZ,KAAKmlD,EAAApiC,aAAakvB,GAiBhB,YAhBI1/B,GAAQ4yC,EAAAriC,WAAWyY,MACrBjoC,KAAK0M,KAAK,QACV1M,KAAK4vG,oBAAoB/9C,EAAAxY,eAAezS,IACxC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAAtY,UAAU3S,KAC/BipE,EAASh+C,EAAApY,WAAW7S,MACtB5mC,KAAK0M,KAAK,UACV1M,KAAK4vG,oBAAoBC,MAG3B7vG,KAAK4vG,oBAAoB/9C,EAAAxY,eAAezS,IACxC5mC,KAAK0M,KAAK,OACV1M,KAAK4vG,oBAAoB/9C,EAAAtY,UAAU3S,IACnC5mC,KAAK0M,KAAK,OACV1M,KAAK4vG,oBAAoB/9C,EAAApY,WAAW7S,MAIxC,KAAKirB,EAAApiC,aAAamvB,KACoB,OAA/B/5C,EAASgtD,EAAAlY,YAAY/S,MACxB5mC,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,OAEZ1M,KAAK0M,KAAK,OACV1M,KAAK4vG,oBAAoB/9C,EAAAhY,YAAYjT,IACrC5mC,KAAK0M,KAAK,gBAEZ,KAAKmlD,EAAApiC,aAAa6uB,MAahB,OAZIuxD,EAASh+C,EAAA5X,kBAAkBrT,MAC7B5mC,KAAK0M,KAAK,QACV1M,KAAK4vG,oBAAoBC,GACzB7vG,KAAK0M,KAAK,YAEyB,OAAhC7H,EAASgtD,EAAA9X,aAAanT,KACzB5mC,KAAK0M,KAAK,UACV1M,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,QAEV1M,KAAK0M,KAAK,aAId,KAAKmlD,EAAApiC,aAAaovB,OAClB,KAAKgT,EAAApiC,aAAasvB,KAClB,KAAK8S,EAAApiC,aAAauvB,aAChB,MAAM,IAAI5iC,MAAM,mBAElB,KAAKy1C,EAAApiC,aAAa0lB,SAGhB,OAFAn1C,KAAK0M,KAAK,UACV1M,KAAK0M,KAAKmlD,EAAAva,iBAAiB1Q,GAAMl7B,SAAS,KAG5C,KAAKmmD,EAAApiC,aAAa0vB,SAKhB,OAJAn/C,KAAK0M,KAAK,KACV1M,KAAK0M,KAAKmlD,EAAAta,iBAAiB3Q,GAAMl7B,SAAS,KAC1C1L,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAApa,iBAAiB7Q,IAG5C,KAAKirB,EAAApiC,aAAa4lB,UAClB,KAAKwc,EAAApiC,aAAa2vB,UAChB,MAAM,IAAIhjC,MAAM,mBAElB,KAAKy1C,EAAApiC,aAAa+lB,KAQhB,OAPAx1C,KAAK0M,KAAK,SACV1M,KAAK0M,KAAKijG,EAAiB1wF,IAC3Bjf,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKmlD,EAAAzZ,cAAcxR,GAAMl7B,SAAS,KACvC1L,KAAK0M,KAAK,OACV1M,KAAK4vG,oBAAoB/9C,EAAAxZ,WAAWzR,SACpC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAApiC,aAAa6vB,MAUhB,OATAt/C,KAAK0M,KAAK,UACV1M,KAAK0M,KAAKijG,EAAiB1wF,IAC3Bjf,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKmlD,EAAApZ,eAAe7R,GAAMl7B,SAAS,KACxC1L,KAAK0M,KAAK,OACV1M,KAAK4vG,oBAAoB/9C,EAAAlZ,YAAY/R,IACrC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAAhZ,cAAcjS,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAApiC,aAAaolB,MAChB,OAAQ51B,GACN,KAAK4yC,EAAAriC,WAAWppB,IAEd,YADApG,KAAK0M,KAAKmlD,EAAA5a,iBAAiBrQ,GAAMl7B,SAAS,KAG5C,KAAKmmD,EAAAriC,WAAWnpB,IASd,YARArG,KAAK0M,KACHojG,cACEv6F,QACEs8C,EAAA3a,oBAAoBtQ,GACpBirB,EAAA1a,qBAAqBvQ,MAM7B,KAAKirB,EAAAriC,WAAW3oB,IAEd,YADA7G,KAAK0M,KAAKmlD,EAAAza,iBAAiBxQ,GAAMl7B,SAAS,KAG5C,KAAKmmD,EAAAriC,WAAW1oB,IAEd,YADA9G,KAAK0M,KAAKmlD,EAAAxa,iBAAiBzQ,GAAMl7B,SAAS,KAI9C,MAEF,KAAKmmD,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQ+6C,OAIX,OAHA7tE,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQg7C,OAIX,OAHA9tE,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQi7C,UAIX,OAHA/tE,KAAK0M,KAAK,gBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQk4D,OACb,KAAKn5B,EAAA/+B,QAAQm4D,OAGX,OAFAjrF,KAAK0M,KAAK,UACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQw7D,OAIX,OAHAtuF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQi8D,QAIX,OAHA/uF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQk8D,SAIX,OAHAhvF,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQo9D,SAIX,OAHAlwF,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQy8D,WAIX,OAHAvvF,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQi9D,QAIX,OAHA/vF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQg4C,OACb,KAAKjZ,EAAA/+B,QAAQi4C,OAGX,OAFA/qE,KAAK0M,KAAK,UACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ06D,OAIX,OAHAxtF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ26D,OAIX,OAHAztF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ46D,UAIX,OAHA1tF,KAAK0M,KAAK,gBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQy7D,OAIX,OAHAvuF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQm8D,QAIX,OAHAjvF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQo8D,SAIX,OAHAlvF,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQq9D,SAIX,OAHAnwF,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ08D,WAIX,OAHAxvF,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQk9D,QAIX,OAHAhwF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ6rD,UAGX,OAFA3+E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ8rD,UAGX,OAFA5+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ4rD,QAKb,KAAK7sB,EAAA/+B,QAAQ6qD,cAGX,OAFA39E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ4qD,cAGX,OAFA19E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ+qD,cAGX,OAFA79E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ8qD,cAGX,OAFA59E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQirD,cAGX,OAFA/9E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQgrD,cAGX,OAFA99E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQmrD,cAGX,OAFAj+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQkrD,cAGX,OAFAh+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ48D,eAIX,OAHA1vF,KAAK0M,KAAK,yBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ68D,eAIX,OAHA3vF,KAAK0M,KAAK,yBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQsrD,gBAGX,OAFAp+E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ0rD,gBAGX,OAFAx+E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQurD,gBAGX,OAFAr+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ2rD,gBAGX,OAFAz+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQorD,gBAGX,OAFAl+E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQwrD,gBAGX,OAFAt+E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQqrD,gBAGX,OAFAn+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQyrD,gBAGX,OAFAv+E,KAAK0M,KAAK,mBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ0qD,WAGX,OAFAx9E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ2qD,UAGX,OAFAz9E,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ88D,eAIX,OAHA5vF,KAAK0M,KAAK,yBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAA/+B,QAAQ+8D,eAIX,OAHA7vF,KAAK0M,KAAK,yBACV1M,KAAK4vG,oBAAoB/9C,EAAA3Z,cAActR,SACvC5mC,KAAK0M,KAAK,KAId,MAEF,KAAKmlD,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAClB,KAAKirB,EAAAz5B,SAASk9C,OACd,KAAKzjB,EAAAz5B,SAAS2nD,OACd,KAAKluB,EAAAz5B,SAAS4nD,OACd,KAAKnuB,EAAAz5B,SAAS6nD,OAIZ,OAHAjgF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS8nD,OACd,KAAKruB,EAAAz5B,SAAS+nD,OACd,KAAKtuB,EAAAz5B,SAASgoD,OACd,KAAKvuB,EAAAz5B,SAASioD,OAIZ,OAHArgF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASi1C,OACd,KAAKxb,EAAAz5B,SAASkoD,OACd,KAAKzuB,EAAAz5B,SAASmoD,OACd,KAAK1uB,EAAAz5B,SAASooD,OAIZ,OAHAxgF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASuoD,OACd,KAAK9uB,EAAAz5B,SAASwoD,OACd,KAAK/uB,EAAAz5B,SAAS0oD,OACd,KAAKjvB,EAAAz5B,SAAS2oD,OAIZ,OAHA/gF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASs1C,OAMZ,OALA1tE,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASu1C,OACd,KAAK9b,EAAAz5B,SAAS4oD,OAIZ,OAHAhhF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASw1C,OAMZ,OALA5tE,KAAK0M,KAAK,eACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASk1C,OACd,KAAKzb,EAAAz5B,SAASmpD,OAIZ,OAHAvhF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASopD,MACd,KAAK3vB,EAAAz5B,SAASqpD,MAIZ,OAHAzhF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASspD,OACd,KAAK7vB,EAAAz5B,SAASupD,OAIZ,OAHA3hF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASm1C,OACd,KAAK1b,EAAAz5B,SAAS+oD,OAIZ,OAHAnhF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASq1C,OACd,KAAK5b,EAAAz5B,SAASkpD,OAIZ,OAHAthF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASo1C,OACd,KAAK3b,EAAAz5B,SAASipD,OAIZ,OAHArhF,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASw1D,QAMZ,OALA5tF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAAS21D,QAMZ,OALA/tF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAAS6yC,MACd,KAAKpZ,EAAAz5B,SAAS8yC,MACd,KAAKrZ,EAAAz5B,SAASqzC,MACd,KAAK5Z,EAAAz5B,SAASszC,MAIZ,OAHA1rE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS+yC,MACd,KAAKtZ,EAAAz5B,SAASgzC,MACd,KAAKvZ,EAAAz5B,SAASuzC,MACd,KAAK9Z,EAAAz5B,SAASwzC,MAIZ,OAHA5rE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASyzC,MACd,KAAKha,EAAAz5B,SAAS2zC,MACd,KAAKla,EAAAz5B,SAAS6zC,MACd,KAAKpa,EAAAz5B,SAAS8zC,MAIZ,OAHAlsE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS0zC,MAKZ,OAJA9rE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS+zC,MACd,KAAKta,EAAAz5B,SAASi0C,MACd,KAAKxa,EAAAz5B,SAASm0C,MACd,KAAK1a,EAAAz5B,SAASo0C,MAIZ,OAHAxsE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASg0C,MAKZ,OAJApsE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASq0C,MACd,KAAK5a,EAAAz5B,SAASu0C,MACd,KAAK9a,EAAAz5B,SAASy0C,MACd,KAAKhb,EAAAz5B,SAAS00C,MAIZ,OAHA9sE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,YACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASs0C,MAKZ,OAJA1sE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS20C,MACd,KAAKlb,EAAAz5B,SAAS60C,MACd,KAAKpb,EAAAz5B,SAAS+0C,MACd,KAAKtb,EAAAz5B,SAASg1C,MAIZ,OAHAptE,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS40C,MAKZ,OAJAhtE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASyoD,OAKZ,OAJA7gF,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS6oD,OAKZ,OAJAjhF,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASy1D,QAMZ,OALA7tF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAAS41D,QAMZ,OALAhuF,KAAK0M,KAAK,cACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAAS4zC,MAKZ,OAJAhsE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASk0C,MAKZ,OAJAtsE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASw0C,MAKZ,OAJA5sE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,iBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS80C,MAKZ,OAJAltE,KAAK0M,KAAK,SACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASg3D,YAMZ,OALApvF,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASw2D,OAMZ,OALA5uF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASo2D,OAMZ,OALAxuF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASi3D,YAMZ,OALArvF,KAAK0M,KAAK,kBACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASy2D,OAMZ,OALA7uF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAAz5B,SAASq2D,OAMZ,OALAzuF,KAAK0M,KAAK,aACV1M,KAAK4vG,oBAAoB/9C,EAAA9Z,cAAcnR,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA7Z,eAAepR,SACxC5mC,KAAK0M,KAAK,KAId,OAEF,KAAKmlD,EAAApiC,aAAauyB,OAUhB,OATAhiD,KAAK0M,KAAK,WACV1M,KAAK0M,KAAKijG,EAAiB1wF,IAC3Bjf,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAA1X,cAAcvT,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAAxX,cAAczT,IACvC5mC,KAAK0M,KAAK,MACV1M,KAAK4vG,oBAAoB/9C,EAAAtX,mBAAmB3T,SAC5C5mC,KAAK0M,KAAK,KAGZ,KAAKmlD,EAAApiC,aAAawyB,KAGhB,OAFAjiD,KAAK4vG,oBAAoB/9C,EAAApX,aAAa7T,SACtC5mC,KAAK0M,KAAK,OAGZ,KAAKmlD,EAAApiC,aAAa4uB,OAQhB,aAPIwxD,EAASh+C,EAAAlX,eAAe/T,KAC1B5mC,KAAK0M,KAAK,WACV1M,KAAK4vG,oBAAoBC,GACzB7vG,KAAK0M,KAAK,QAEV1M,KAAK0M,KAAK,cAId,KAAKmlD,EAAApiC,aAAayyB,KAChB,OAAQ2P,EAAA1W,UAAUvU,IAChB,KAAKirB,EAAAhwB,OAAO4vD,WAEV,YADAzxF,KAAK0M,KAAK,iBAGZ,KAAKmlD,EAAAhwB,OAAO8vD,WAIV,OAHA3xF,KAAK0M,KAAK,gBACV1M,KAAK4vG,oBAAoB/9C,EAAAtW,eAAe3U,EAAM,SAC9C5mC,KAAK0M,KAAK,KAId,MAEF,KAAKmlD,EAAApiC,aAAa0yB,IAEhB,YADAniD,KAAK0M,KAAK,OAGZ,KAAKmlD,EAAApiC,aAAa2uB,YAEhB,YADAp+C,KAAK0M,KAAK,iBAGZ,KAAKmlD,EAAApiC,aAAaiwB,cAClB,KAAKmS,EAAApiC,aAAa8vB,UAClB,KAAKsS,EAAApiC,aAAaqwB,WAClB,KAAK+R,EAAApiC,aAAaywB,cAEpB,MAAM,IAAI9jC,MAAM,oBAGVkzF,EAAArtG,UAAAyK,KAAR,SAAaT,GAEXjM,KAAKiM,KAAKS,KAAKT,IAGjBqjG,EAAArtG,UAAA+9D,OAAA,WACE,IAAItsB,EAAM1zC,KAAKiM,KAAKU,KAAK,IAEzB,OADA3M,KAAKiM,KAAO,GACLynC,GAEX47D,EA5yBA,GA8yBA,SAASK,EAAiB1wF,GACxB,OAAQA,GACN,KAAK4yC,EAAAriC,WAAWyY,KAAM,MAAO,OAC7B,KAAK4pB,EAAAriC,WAAWppB,IAAK,MAAO,MAC5B,KAAKyrD,EAAAriC,WAAWnpB,IAAK,MAAO,MAC5B,KAAKwrD,EAAAriC,WAAW3oB,IAAK,MAAO,MAC5B,KAAKgrD,EAAAriC,WAAW1oB,IAAK,MAAO,MAC5B,KAAK+qD,EAAAriC,WAAWzoB,KAAM,MAAO,OAC7B,KAAK8qD,EAAAriC,WAAW4uB,YAAa,MAAM,IAAIhiC,MAAM,oBAC7C,KAAKy1C,EAAAriC,WAAWm8D,KAAM,MAAM,IAAIvvE,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhB1c,EAAA4vG,u5BCxDZ,IAAA9hG,EAAArN,EAAA,GAIDyxD,EAAAzxD,EAAA,GAyBA0J,EAAA1J,EAAA,GAKA4vG,EAAA,WAUE,SAAAA,EAAYvqF,EAAkBwqF,QAAA,IAAAA,OAAA,GAH9BhwG,KAAAiwG,KAA4B,IAAI7oG,IAI9BpH,KAAKwlB,QAAUA,EACfxlB,KAAKgwG,eA6GT,OAzGED,EAAA9tG,UAAAiuG,KAAA,uBACE,IAAiB,IAAAxpF,EAAA3O,EAAA/X,KAAKwlB,QAAQnU,YAAYkM,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAA/C,IAAI5B,EAAI+H,EAAA9c,MACP+U,EAAK1K,OAAO8R,SAASzd,KAAKmwG,UAAU95F,uGAK5C05F,EAAA9tG,UAAAkuG,UAAA,SAAU95F,eACJyI,EAAUzI,EAAK3W,QACnB,GAAIof,MACF,IAA2B,IAAA+yD,EAAA95D,EAAA+G,GAAOgzD,EAAAD,EAAA55D,QAAA65D,EAAA55D,KAAA45D,EAAAD,EAAA55D,OAAA,CAAzB,IAAAmG,EAAAhG,EAAA05D,EAAAxwE,MAAA,GAACV,EAAAwd,EAAA,GAAME,EAAAF,EAAA,GAAoBpe,KAAKowG,aAAaxvG,EAAM0d,qGAE9D,IAAIjG,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAAo7D,EAAA17D,EAAAM,GAAWq7D,EAAAD,EAAAx7D,QAAAy7D,EAAAx7D,KAAAw7D,EAAAD,EAAAx7D,OAAA,CAA7B,IAAIK,EAAUo7D,EAAApyE,MAAiBtB,KAAKmwG,UAAU73F,uGAKvDy3F,EAAA9tG,UAAAmuG,aAAA,SAAaxvG,EAAcgY,GACzB,IAAIA,EAAQ0G,GAAG9R,EAAAnL,YAAYq0D,UAAa12D,KAAKgwG,eAA7C,CACA,IAAIC,EAAOjwG,KAAKiwG,KAChB,GAAIA,EAAKz7F,IAAIoE,GACX5Y,KAAKqwG,WAAWzvG,EAAMgY,EAAiBq3F,EAAK/uG,IAAI0X,SAIlD,OADAq3F,EAAK99F,IAAIyG,EAAShY,GACVgY,EAAQnC,MACd,KAAKm7C,EAAA9gD,YAAYmQ,OACXrI,EAAQ0G,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAKswG,YAAY1vG,EAAcgY,GACrE,MAEF,KAAKg5C,EAAA9gD,YAAYkW,KACXpO,EAAQ0G,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAKuwG,UAAU3vG,EAAYgY,GACjE,MAEF,KAAKg5C,EAAA9gD,YAAYkN,mBACfhe,KAAKwwG,uBAAuB5vG,EAAyBgY,GACrD,MAEF,KAAKg5C,EAAA9gD,YAAYuJ,gBACfra,KAAKywG,oBAAoB7vG,EAAsBgY,GAC/C,MAEF,KAAKg5C,EAAA9gD,YAAY8N,MACHhG,EAAS0G,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAK0wG,WAAW9vG,EAAagY,GAC5E,MAEF,KAAKg5C,EAAA9gD,YAAYyN,mBACfve,KAAK2wG,uBAAuB/vG,EAAyBgY,GACrD,MAEF,KAAKg5C,EAAA9gD,YAAY4N,SACf,IAAIkyF,EAAiBh4F,EACjB/X,EAAS+vG,EAAKnlF,eACd5qB,GAAQb,KAAK6wG,cAAcjwG,EAAMC,GACrC,IAAIqxE,EAAS0+B,EAAKllF,eACdwmD,GAAQlyE,KAAK6wG,cAAcjwG,EAAMsxE,GACrC,MAEF,KAAKtgB,EAAA9gD,YAAYiW,WA+bvB,SAAS+pF,EAAkBl4F,mBACzB,IAAIkG,EAAUlG,EAAQkG,QACtB,GAAIA,MACF,IAAmB,IAAAT,EAAAtG,EAAA+G,EAAQvB,UAAQwB,EAAAV,EAAApG,QAAA8G,EAAA7G,KAAA6G,EAAAV,EAAApG,OAAE,CAAhC,IAAIqG,EAAMS,EAAAzd,MACb,OAAQgd,EAAO7H,MACb,KAAKm7C,EAAA9gD,YAAYkN,mBACf,IAAI8J,EAAgCxJ,EAAQwJ,UAC5C,GAAIA,MACF,IAAqB,IAAA9I,GAAA+xF,OAAA,EAAAh5F,EAAA+P,EAAUvK,WAAQpF,EAAA6G,EAAA/G,QAAAE,EAAAD,KAAAC,EAAA6G,EAAA/G,OAAE,CAApC,IAAIsQ,EAAQpQ,EAAA7W,MACf,GAAIinB,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,oGAGlD,MAEF,KAAK1gB,EAAA9gD,YAAYuJ,gBACf,IAAIyN,EAA6BxJ,EAAQwJ,UACzC,GAAIA,MACF,IAAqB,IAAA3O,GAAA63F,OAAA,EAAAj5F,EAAA+P,EAAUvK,WAAQhE,EAAAJ,EAAAlB,QAAAsB,EAAArB,KAAAqB,EAAAJ,EAAAlB,OAAE,CAApC,IAAIsQ,EAAQhP,EAAAjY,MACf,GAAIinB,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAIh0D,EAAOgB,GAAG9R,EAAAnL,YAAYiwE,WAAaw+B,EAAkBxyF,GAAS,OAAO,qGAMjF,OAAO,GA5dGwyF,CAAkBl4F,IAAU5Y,KAAKixG,eAAerwG,EAAMgY,GAC1D,MAEF,KAAKg5C,EAAA9gD,YAAY8V,eAAgB,MACjC,QAASxc,QAAO,MAIZ2lG,EAAA9tG,UAAAuuG,uBAAR,SAA+B5vG,EAAcgY,WACvCkP,EAAYlP,EAAQkP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAA3O,EAAA+P,EAAUvK,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAApC,IAAIsQ,EAAQnK,EAAA9c,MACXinB,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAK6wG,cAAcjwG,EAAgB2nB,uGAKxEwnF,EAAA9tG,UAAAwuG,oBAAR,SAA4B7vG,EAAcgY,WACpCkP,EAAYlP,EAAQkP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAA3O,EAAA+P,EAAUvK,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAE,CAApC,IAAIsQ,EAAQnK,EAAA9c,MACXinB,EAASjJ,GAAG9R,EAAAnL,YAAYiwE,WAAWtyE,KAAKkxG,WAAWtwG,EAAa2nB,uGAKlEwnF,EAAA9tG,UAAA0uG,uBAAR,SAA+B/vG,EAAcgY,GAO3CxO,QAAO,IAWX2lG,EAzHA,GA4HAoB,EAAA,SAAAlgG,GAWE,SAAAkgG,EAAY3rF,EAAkBwqF,QAAA,IAAAA,OAAA,GAA9B,IAAA9+F,EACED,EAAAzQ,KAAAR,KAAMwlB,EAASwqF,IAAehwG,YALxBkR,EAAA1E,GAAe,GACf0E,EAAAkgG,YAAmB,IAuK7B,OA/KgC7+F,EAAA4+F,EAAAlgG,GAGvBkgG,EAAAE,MAAP,SAAa7rF,GACX,OAAO,IAAI2rF,EAAW3rF,GAAS6rF,SAWjCF,EAAAlvG,UAAAquG,YAAA,SAAY1vG,EAAcgY,GACxB,IAAIpM,EAAKxM,KAAKwM,GACVwvE,EAAUpjE,EAAQ0G,GAAG9R,EAAAnL,YAAYilB,SAMrC,GALAzd,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aACZp1B,GAASxvE,EAAGE,KAAK,UACrBF,EAAGE,KAAK1M,KAAKuxG,aAAa34F,EAAQqG,OAClCzS,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACJo7E,EACF,OAAQpjE,EAAQuO,mBACd,OACE3a,EAAGE,KAAK,OACRF,EAAGE,KAAKojG,cAAcl3F,EAAQyO,uBAC9B,MAEF,OACE7a,EAAGE,KAAK,OACRF,EAAGE,KAAKkM,EAAQ2O,mBAAmB7b,YACnC,MAEF,QAAStB,QAAO,GAGpBoC,EAAGE,KAAK,QAGVykG,EAAAlvG,UAAAsuG,UAAA,SAAU3vG,EAAcgY,eAClBpM,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eAChB5kG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIoS,EAAUlG,EAAQkG,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAA0yF,EAAAz5F,EAAA+G,GAAO2yF,EAAAD,EAAAv5F,QAAAw5F,EAAAv5F,KAAAu5F,EAAAD,EAAAv5F,OAAE,CAA3B,IAAAmG,EAAAhG,EAAAq5F,EAAAnwG,MAAA,GAACowG,EAAAtzF,EAAA,GACR,IADcE,EAAAF,EAAA,IACH3H,MAAQm7C,EAAA9gD,YAAY0W,UAAW,CACxC,IAAIw0D,EAAsB19D,EAAQgB,GAAG9R,EAAAnL,YAAYilB,SACjDzd,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aACZp1B,EAASxvE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKglG,GACJ11B,IACFxvE,EAAGE,KAAK,OACRtC,OAA4C,GAAzBkU,EAAQ6I,mBAC3B3a,EAAGE,KAAKwjC,QAAoB5xB,EAAQ+I,sBAAsB3b,SAAS,MAErEc,EAAGE,KAAK,8GAGZ,IAAmB,IAAA2R,EAAAtG,EAAA+G,EAAQvB,UAAQwB,EAAAV,EAAApG,QAAA8G,EAAA7G,KAAA6G,EAAAV,EAAApG,OAAE,CAAhC,IAAIqG,KAAMS,EAAAzd,OACFmV,MAAQm7C,EAAA9gD,YAAY0W,WAAWxnB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,sGAG7EzU,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,QAGVykG,EAAAlvG,UAAA4uG,cAAA,SAAcjwG,EAAcgY,WACtBpM,EAAKxM,KAAKwM,GACVyH,EAAY2E,EAAQ3E,UACxBpK,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aAChB5kG,EAAGE,KAAK1M,KAAKuxG,aAAat9F,EAAUm3B,aACpC5+B,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,KAIR,IAHA,IAAI62C,EAAatvC,EAAU+V,eACvB2qC,EAAgBpR,EAAWp3C,OAEtB9L,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAK1M,KAAKuxG,aAAahuD,EAAWljD,KACrCmM,EAAGE,KAAK,KACRF,EAAGE,KAAKuH,EAAUkW,iBAAiB9pB,IAErCmM,EAAGE,KAAK,QACR,IAAIoS,EAAUlG,EAAQkG,QACtB,GAAIA,GAAWA,EAAQ8sB,KAAM,CAC3B/hC,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aAChB5kG,EAAGE,KAAK,cACRF,EAAGE,KAAKkM,EAAQhY,MAChB4L,EAAGE,KAAK,YACR,IAAmB,IAAAga,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAA,CAA9B,IAAIqG,EAAMF,EAAA9c,MAAsBtB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,qGACpEzU,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,SAIZykG,EAAAlvG,UAAAivG,WAAA,SAAWtwG,EAAcgY,GACvB,IAAIpM,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eAChB5kG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QAER7C,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,QAGVykG,EAAAlvG,UAAA0vG,eAAA,SAAe/wG,EAAcgY,GAC3B5Y,KAAKkxG,WAAWtwG,EAAMgY,IAGxBu4F,EAAAlvG,UAAAyuG,WAAA,SAAW9vG,EAAcgY,KAIzBu4F,EAAAlvG,UAAAgvG,eAAA,SAAerwG,EAAcgY,WACvBpM,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eAChB5kG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIoS,EAAUlG,EAAQkG,QACtB,GAAIA,MACF,IAAmB,IAAA4H,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAA,CAA9B,IAAIqG,EAAMF,EAAA9c,MAAsBtB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,qGAEtEzU,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,QAGVykG,EAAAlvG,UAAAouG,WAAA,SAAWzvG,EAAcgY,EAAkBotE,KAI3CmrB,EAAAlvG,UAAAsvG,aAAA,SAAatyF,GACX,OAAQA,EAAKxI,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOzW,KAAKwlB,QAAQ9Q,QAAQc,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOxV,KAAKwlB,QAAQ9Q,QAAQc,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADApL,QAAO,GACA,KAKb+mG,EAAAlvG,UAAAovG,MAAA,WACE,IAAI7kG,EAAKxM,KAAKwM,GAMd,OALAA,EAAGE,KAAK,4BACN1M,KAAKoxG,YACPpxG,KAAKkwG,SACHlwG,KAAKoxG,YACP5kG,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnBwkG,EA/KA,CAAgCpB,GAAnBrwG,EAAAyxG,aAkLb,IAAAS,EAAA,SAAA3gG,GAYE,SAAA2gG,EAAYpsF,EAAkBwqF,QAAA,IAAAA,OAAA,GAA9B,IAAA9+F,EACED,EAAAzQ,KAAAR,KAAMwlB,EAASwqF,IAAehwG,YANxBkR,EAAA1E,GAAe,GACf0E,EAAAkgG,YAAmB,EACnBlgG,EAAA2gG,QAAuB,IAAI1qG,MA+MrC,OAxNgCoL,EAAAq/F,EAAA3gG,GAGvB2gG,EAAAP,MAAP,SAAa7rF,GACX,OAAO,IAAIosF,EAAWpsF,GAAS6rF,SAYjCO,EAAA3vG,UAAAquG,YAAA,SAAY1vG,EAAcgY,GACxB,IAAIpM,EAAKxM,KAAKwM,GACVwvE,EAAUpjE,EAAQ0G,GAAG9R,EAAAnL,YAAYilB,SACrCzd,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aACZx4F,EAAQ0G,GAAG9R,EAAAnL,YAAY6f,QACrB85D,EAASxvE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETsvE,EAASxvE,EAAGE,KAAK,iBAChBF,EAAGE,KAAK,eAEfF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKuxG,aAAa34F,EAAQqG,OAClCzS,EAAGE,KAAK,OACR1M,KAAKixG,eAAerwG,EAAMgY,IAG5Bg5F,EAAA3vG,UAAAsuG,UAAA,SAAU3vG,EAAcgY,WAClBpM,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eAChB5kG,EAAGE,KAAK,gBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIoS,EAAUlG,EAAQkG,QACtB,GAAIA,EAAS,CACX,IAAIgzF,EAAahzF,EAAQ8sB,SACzB,IAA2B,IAAAmmE,EAAAh6F,EAAA+G,GAAOkzF,EAAAD,EAAA95F,QAAA+5F,EAAA95F,KAAA85F,EAAAD,EAAA95F,OAAE,CAA3B,IAAAyO,EAAAtO,EAAA45F,EAAA1wG,MAAA,GAAC2wG,EAAAvrF,EAAA,GAAMpI,EAAAoI,EAAA,GACVpI,EAAO7H,MAAQm7C,EAAA9gD,YAAY0W,YAC7B3d,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aAChB5kG,EAAGE,KAAKulG,GACJ3zF,EAAOgB,GAAG9R,EAAAnL,YAAYilB,WACxB9a,EAAGE,KAAK,OACRtC,OAA4C,GAAzBkU,EAAQ6I,mBAC3B3a,EAAGE,KAAKwjC,QAAoB5xB,EAAQ+I,sBAAsB3b,SAAS,MAErEc,EAAGE,KAAK,SACNolG,qGAGFA,GAAY9xG,KAAKixG,eAAerwG,EAAMgY,GAE5C/O,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,QAGVklG,EAAA3vG,UAAA4uG,cAAA,SAAcjwG,EAAcgY,GAC1B,IAAIA,EAAQgJ,MAAMpU,EAAAnL,YAAYq0D,QAAUlpD,EAAAnL,YAAYyf,KAApD,CACA,IAAItV,EAAKxM,KAAKwM,GACVyH,EAAY2E,EAAQ3E,UAIxB,GAHApK,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aACZx4F,EAAQ0G,GAAG9R,EAAAnL,YAAYs0D,YAAYnqD,EAAGE,KAAK,cAC3CkM,EAAQ0G,GAAG9R,EAAAnL,YAAY6f,SAAS1V,EAAGE,KAAK,WACxCkM,EAAQ0G,GAAG9R,EAAAnL,YAAYwf,KAMzB,OALArV,EAAGE,KAAK,QACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACRF,EAAGE,KAAK1M,KAAKuxG,aAAat9F,EAAUm3B,kBACpC5+B,EAAGE,KAAK,OAGHkM,EAAQgJ,MAAMpU,EAAAnL,YAAY6f,OAAS1U,EAAAnL,YAAY4iB,WAAWzY,EAAGE,KAAK,oBACvEF,EAAGE,KAAK9L,GAEV4L,EAAGE,KAAK,KAIR,IAHA,IAAI62C,EAAatvC,EAAU+V,eACvB2qC,EAAgBpR,EAAWp3C,OAEtB9L,EAAI,EAAGA,EAAIs0D,IAAiBt0D,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAKuH,EAAUkW,iBAAiB9pB,IACnCmM,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKuxG,aAAahuD,EAAWljD,KAEnCuY,EAAQgJ,MAAMpU,EAAAnL,YAAYugB,YAAcpV,EAAAnL,YAAYyf,KACtDtV,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK1M,KAAKuxG,aAAat9F,EAAUm3B,cAEtC5+B,EAAGE,KAAK,OACR1M,KAAKixG,eAAerwG,EAAMgY,KAG5Bg5F,EAAA3vG,UAAAivG,WAAA,SAAWtwG,EAAcgY,eACnBpM,EAAKxM,KAAKwM,GACV0lG,EAAct5F,EAAQnC,MAAQm7C,EAAA9gD,YAAYqb,UAC9CtiB,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eACZc,EACF1lG,EAAGE,KAAK,sBAEJkM,EAAQ0G,GAAG9R,EAAAnL,YAAYmgB,WAAWhW,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,kBAEVF,EAAGE,KAAK9L,GAMR4L,EAAGE,KAAK,QACR,IAAIkqE,EAAgBh+D,EAAQ3W,UAAU6c,QACtC,GAAI83D,MACF,IAAmB,IAAAx4D,EAAArG,EAAA6+D,EAAcr5D,UAAQc,EAAAD,EAAAnG,QAAAoG,EAAAnG,KAAAmG,EAAAD,EAAAnG,OAAA,CAApC,IAAIqG,EAAMD,EAAA/c,MAA4BtB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,qGAE5E,IAAIH,EAAkBvF,EAAQkG,QAC9B,GAAIX,MACF,IAAmB,IAAAY,EAAAhH,EAAAoG,EAAgBZ,UAAQyB,EAAAD,EAAA9G,QAAA+G,EAAA9G,KAAA8G,EAAAD,EAAA9G,OAAA,CAAlCqG,EAAMU,EAAA1d,MAA8BtB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,qGAE9EzU,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,QAGVklG,EAAA3vG,UAAA0vG,eAAA,SAAe/wG,EAAcgY,GAC3B5Y,KAAKkxG,WAAWtwG,EAAMgY,IAGxBg5F,EAAA3vG,UAAAyuG,WAAA,SAAW9vG,EAAcgY,GACvB,IAAIA,EAAQ0G,GAAG9R,EAAAnL,YAAYq0D,SAA3B,CACA,IAAIlqD,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aACZx4F,EAAQ0G,GAAG9R,EAAAnL,YAAYs0D,YAAYnqD,EAAGE,KAAK,cAC3CkM,EAAQ0G,GAAG9R,EAAAnL,YAAY6f,SAAS1V,EAAGE,KAAK,WACxCkM,EAAQ0G,GAAG9R,EAAAnL,YAAY+f,WAAW5V,EAAGE,KAAK,aAC9CF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKuxG,aAAa34F,EAAQqG,OAClCzS,EAAGE,KAAK,SAGVklG,EAAA3vG,UAAAgvG,eAAA,SAAerwG,EAAcgY,WACvBkG,EAAUlG,EAAQkG,QACtB,GAAIA,GAAWA,EAAQ8sB,KAAM,CAC3B,IAAIp/B,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,eAChB5kG,EAAGE,KAAK,qBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,YACR,IAAmB,IAAAga,EAAA3O,EAAA+G,EAAQvB,UAAQa,EAAAsI,EAAAzO,QAAAmG,EAAAlG,KAAAkG,EAAAsI,EAAAzO,OAAA,CAA9B,IAAIqG,EAAMF,EAAA9c,MAAsBtB,KAAKowG,aAAa9xF,EAAO1d,KAAM0d,qGACpEzU,EAAAynG,OAAO9kG,IAAMxM,KAAKoxG,aAClB5kG,EAAGE,KAAK,SAIZklG,EAAA3vG,UAAAouG,WAAA,SAAWzvG,EAAcgY,EAAkBotE,GACzC,IAAIx5E,EAAKxM,KAAKwM,GACd3C,EAAAynG,OAAO9kG,EAAIxM,KAAKoxG,aAChB5kG,EAAGE,KAAK,iBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,cACRF,EAAGE,KAAKs5E,GACRx5E,EAAGE,KAAK,QAGVklG,EAAA3vG,UAAAsvG,aAAA,SAAatyF,GACX,OAAQA,EAAKxI,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOzW,KAAKwlB,QAAQ9Q,QAAQc,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOxV,KAAKwlB,QAAQ9Q,QAAQc,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADApL,QAAO,GACA,QAKbwnG,EAAA3vG,UAAAovG,MAAA,WACE,IAAI7kG,EAAKxM,KAAKwM,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN1M,KAAKoxG,YACPpxG,KAAKkwG,SACHlwG,KAAKoxG,YACP5kG,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD1M,KAAKwM,GAAGG,KAAK,KAExBilG,EAxNA,CAAgC7B,GAAnBrwG,EAAAkyG,4aChVb,IAAApkG,EAAArN,EAAA,GAMAyxD,EAAAzxD,EAAA,GAIAiiD,EAAAjiD,EAAA,GASAsN,EAAAtN,EAAA,GAKA0J,EAAA1J,EAAA,GAIAwN,EAAAxN,EAAA,GA2DAgyG,EAAA,SAAAlhG,GAcE,SAAAkhG,IAAA,IAAAjhG,EACED,EAAAzQ,KAAAR,OAAOA,YAVTkR,EAAAkhG,QAAoB,IAAInrG,MAExBiK,EAAAmhG,QAAuB,IAAIlrG,IAE3B+J,EAAAohG,QAAuB,IAAInrG,IAE3B+J,EAAAipD,UAAmC,KAye3BjpD,EAAAqhG,8BAAqC,EA8drCrhG,EAAAshG,oBAA4C,KAl8BlDthG,EAAKsU,QAAU,IAAIosC,EAAA5gD,QAAQE,EAAKnE,eA2sHpC,OA3tH4BwF,EAAA4/F,EAAAlhG,GAoB1BkhG,EAAAlwG,UAAAwwG,UAAA,SACExmG,EACAuY,EACA/G,GAEA,IAAI7R,EAAiB/B,EAAAogD,cAAczlC,GAC/BH,EAAe1W,EAAAy8C,mBAAmBx+C,GAGtC,IAAI5L,KAAKsyG,QAAQ99F,IAAI6P,GAArB,CACArkB,KAAKsyG,QAAQt9F,IAAIqP,GACjBrkB,KAAKqyG,QAAQr9F,IAAIqP,GAGjB,IAAI1Y,EAAS,IAAIgC,EAAAmE,OACflG,EACAK,EACAwR,EACI9P,EAAAoE,WAAWm+C,MACX1rC,EAAK0lC,WAAW18C,EAAA1K,iBAAmB0hB,EAAKkuF,QAAQllG,EAAAlL,eAAgBkL,EAAA1K,eAAeqJ,QAAU,EACvFwB,EAAAoE,WAAWC,QACXrE,EAAAoE,WAAW6jD,SAEfpwC,EAAUxlB,KAAKwlB,QACnBA,EAAQrU,QAAQzE,KAAKf,GAGrB,IAAIgnG,EAAK,IAAIvwD,EAAA0X,UAAUnuD,EAAQ6Z,EAAQzY,aACvC4lG,EAAGx4C,UAAYn6D,KAAKm6D,UACpBxuD,EAAOikD,UAAY+iD,EAEnB,IADA,IAAIr8F,EAAa3K,EAAO2K,YAChBq8F,EAAG71C,KAAK1a,EAAAC,MAAMka,YAAY,CAChC,IAAI/lD,EAAYxW,KAAK4yG,uBAAuBD,EAAI,MAC5Cn8F,GAAWF,EAAW5J,KAAK8J,GAEjCm8F,EAAG3yC,WAILmyC,EAAAlwG,UAAA2wG,uBAAA,SACED,EACAlyB,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIztE,EAAQxF,EAAAnL,YAAY4Q,KACpB4/F,GAAiB,EAGjBtyF,EAAqC,KAClCoyF,EAAG71C,KAAK1a,EAAAC,MAAMwZ,KAAK,CACpBg3C,EAAW,IAAGA,EAAWF,EAAG54C,UAChC,IAAIt5C,EAAYzgB,KAAK8yG,eAAeH,GAC/BlyF,EAIAF,EACAA,EAAW7T,KAAK+T,GADJF,EAAa,CAACE,GAH7BzgB,KAAK+yG,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAG71C,KAAK1a,EAAAC,MAAMntC,UACZ29F,EAAW,IAAGA,EAAWF,EAAG54C,UAChC/mD,GAASxF,EAAAnL,YAAY6S,OACrB89F,EAAcL,EAAG54C,SACjBk5C,EAAYN,EAAG5iD,IACX4iD,EAAG71C,KAAK1a,EAAAC,MAAMuT,WAChBs9C,EAAeP,EAAG54C,SAClBo5C,EAAaR,EAAG5iD,MAIpB,IAAIqjD,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAb7yB,GAAqBA,EAAUnhE,GAAG9R,EAAAnL,YAAY0iB,SACjE4tF,EAAG71C,KAAK1a,EAAAC,MAAM/8B,SACZguF,EACFtzG,KAAKqN,MACHI,EAAAhD,eAAe8oG,gEACfZ,EAAG5nG,UAGD8nG,EAAW,IAAGA,EAAWF,EAAG54C,UAChCq5C,EAAeP,EACfQ,EAAaV,EAAG5iD,IAChB/8C,GAASxF,EAAAnL,YAAYijB,QAAU9X,EAAAnL,YAAY0iB,SAEpCuuF,IACTtgG,GAASxF,EAAAnL,YAAY0iB,SAIvB,IAAIvO,EAA8B,KAG9Bg9F,EAAQb,EAAGn2C,OAEf,OADIq2C,EAAW,IAAGA,EAAWF,EAAG14C,cACxBu5C,GACN,KAAKpxD,EAAAC,MAAM5iC,MACTkzF,EAAG16F,OACHjF,GAASxF,EAAAnL,YAAYod,MAEnBjJ,EADEm8F,EAAG71C,KAAK1a,EAAAC,MAAMr7B,MACJhnB,KAAKyzG,UAAUd,EAAI3/F,EAAOuN,EAAYsyF,GAEtC7yG,KAAK0zG,cAAcf,EAAI3/F,EAAOuN,EAAYsyF,GAExDtyF,EAAa,KACb,MAEF,KAAK6hC,EAAAC,MAAMiU,IAAKtjD,GAASxF,EAAAnL,YAAYi0D,IACrC,KAAKlU,EAAAC,MAAM0U,IACT47C,EAAG16F,OACHzB,EAAYxW,KAAK0zG,cAAcf,EAAI3/F,EAAOuN,EAAYsyF,GACtDtyF,EAAa,KACb,MAEF,KAAK6hC,EAAAC,MAAMr7B,KACT2rF,EAAG16F,OACHzB,EAAYxW,KAAKyzG,UAAUd,EAAI3/F,EAAOuN,EAAYsyF,GAClDtyF,EAAa,KACb,MAEF,KAAK6hC,EAAAC,MAAM1jC,SACTg0F,EAAG16F,OACHzB,EAAYxW,KAAK2zG,cAAchB,EAAI3/F,EAAOuN,EAAYsyF,GACtDtyF,EAAa,KACb,MAEF,KAAK6hC,EAAAC,MAAM7/B,SACT,IAAIw6C,EAAQ21C,EAAG51C,OAEf,GADA41C,EAAG16F,QACE06F,EAAG71C,KAAK1a,EAAAC,MAAMxjC,OAAQ,CACzB8zF,EAAGv1C,MAAMJ,GACTxmD,EAAYxW,KAAK4zG,eAAejB,GAAI,GACpC,MAEAA,EAAGx1C,QAAQH,GAEbhqD,GAASxF,EAAAnL,YAAYmgB,SAGvB,KAAK4/B,EAAAC,MAAMxjC,MACX,KAAKujC,EAAAC,MAAMl2B,UACTwmF,EAAG16F,OACHzB,EAAYxW,KAAK6zG,sBAAsBlB,EAAI3/F,EAAOuN,EAAYsyF,GAC9DtyF,EAAa,KACb,MAEF,KAAK6hC,EAAAC,MAAMt7B,UACLi2C,EAAQ21C,EAAG51C,OACf41C,EAAG16F,OACC06F,EAAGn2C,MAAK,EAAOpa,EAAAgT,mBAAmBgH,SAAWha,EAAAC,MAAMM,YACrDgwD,EAAGx1C,QAAQH,GACXxmD,EAAYxW,KAAK8zG,eAAenB,EAAI3/F,EAAOuN,EAAYsyF,GACvDtyF,EAAa,OAEboyF,EAAGv1C,MAAMJ,GACTxmD,EAAYxW,KAAK4zG,eAAejB,GAAI,IAEtC,MAEF,KAAKvwD,EAAAC,MAAMvrC,OACT67F,EAAG16F,OAGDzB,GAFFxD,GAASxF,EAAAnL,YAAYyU,QACTtJ,EAAAnL,YAAY6S,OACVlV,KAAK+zG,kBAAkBpB,EAAIE,GAE3B7yG,KAAKg0G,YAAYrB,GAE/B,MAEF,KAAKvwD,EAAAC,MAAMwU,KACLmG,EAAQ21C,EAAG51C,OACf41C,EAAG16F,OACC06F,EAAGn2C,MAAK,EAAOpa,EAAAgT,mBAAmBgH,SAAWha,EAAAC,MAAMM,YACrDgwD,EAAGx1C,QAAQH,GACXxmD,EAAYxW,KAAKi0G,qBAAqBtB,EAAI3/F,EAAOuN,EAAYsyF,GAC7DtyF,EAAa,OAEboyF,EAAGv1C,MAAMJ,GACTxmD,EAAYxW,KAAK4zG,eAAejB,GAAI,IAEtC,MAEF,QAGM3/F,EAAQxF,EAAAnL,YAAY6S,OAClBi+F,GAAcR,EAAG91C,eAAeza,EAAAgT,mBAAmBgH,SACjDi3C,GACFrzG,KAAKqN,MACHI,EAAAhD,eAAeypG,2CACfvB,EAAG5nG,MAAMqoG,EAAcC,IAG3B78F,EAAYxW,KAAKm0G,wBAAwBxB,EAAIE,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5B38F,EAAYxW,KAAKo0G,YAAYzB,EAAIE,EAA2C,IAAhC7/F,EAAQxF,EAAAnL,YAAYijB,WAK9D2tF,GACFjzG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMioG,EAAaC,GAAY,UAGlCI,GACFrzG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMqoG,EAAcC,GAAa,WAGnC5yB,IACHjqE,EAAYxW,KAAK4zG,eAAejB,GAAI,KAQ5C,GAAIpyF,EACF,IAAK,IAAIlgB,EAAI,EAAG+V,EAAImK,EAAWpU,OAAQ9L,EAAI+V,IAAK/V,EAC9CL,KAAKqN,MACHI,EAAAhD,eAAe6pG,8BACf/zF,EAAWlgB,GAAG0K,OAMpB,GAAIooG,GAA4B,OAAd38F,EAChB,OAAQA,EAAUC,MAChB,KAAK9I,EAAA+I,SAASU,gBACd,KAAKzJ,EAAA+I,SAASY,oBACd,KAAK3J,EAAA+I,SAASQ,iBACd,KAAKvJ,EAAA+I,SAASc,qBACd,KAAK7J,EAAA+I,SAASgB,qBACZ,OAAO/J,EAAAuF,KAAKm3C,6BAAmD7zC,EAAWm8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAElG,QACE/vD,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMmoG,EAAcC,GAAa,WAK5C,OAAO38F,GAIT27F,EAAAlwG,UAAAsyG,SAAA,WACE,IAAInC,EAAUpyG,KAAKoyG,QACnB,OAAOA,EAAQjmG,OAASimG,EAAQrlE,QAAU,MAI5ColE,EAAAlwG,UAAA+9D,OAAA,WACE,GAAIhgE,KAAKoyG,QAAQjmG,OAAQ,MAAM,IAAIiQ,MAAM,wBAIzC,OAHApc,KAAKoyG,QAAU,GACfpyG,KAAKqyG,QAAQmC,QACbx0G,KAAKsyG,QAAQkC,QACNx0G,KAAKwlB,SAId2sF,EAAAlwG,UAAAwyG,UAAA,SACE9B,EACA+B,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGI11F,EAHAk4C,EAAQw7C,EAAG16F,OACX46F,EAAWF,EAAG54C,SAKlB,GAAI5C,GAAS/U,EAAAC,MAAMoY,UAAW,CAG5B,IAAIm6C,EAAsBjC,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAEpCxmD,EAAYjU,KAAK60G,qBAAqBlC,GAC1C,GAAI1+F,EAAW,CACb,GAAI2gG,EAAqB,CACvB,IAAKjC,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAKjB,OAJA16D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAET,IAAK4nG,EAAG71C,KAAK1a,EAAAC,MAAMoW,KAKjB,OAJAz4D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAEJ4nG,EAAG71C,KAAK1a,EAAAC,MAAME,OACjBviD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,QAGhBkJ,EAAUovC,YAAa,EAEzB,OAAOpvC,EACF,GAAI2gG,GAAuB50G,KAAKuyG,6BAKrC,OAJAvyG,KAAKqN,MACHI,EAAAhD,eAAeqqG,iBACfnC,EAAG5nG,SAEE,KAIT,IAAI2pG,EAoBF,OAJA10G,KAAKqN,MACHI,EAAAhD,eAAeqqG,iBACfnC,EAAG5nG,SAEE,KAnBP,IAAIgqG,EAAY/0G,KAAKy0G,UAAU9B,GAAI,EAAOgC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAKpC,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAOjB,OANKi6C,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAGf,MAET9wC,EAAO81F,GACFhqG,MAAMqB,MAAQymG,EACnB5zF,EAAKlU,MAAMsB,IAAMsmG,EAAG5iD,SAUjB,GAAIoH,GAAS/U,EAAAC,MAAMmP,KACxBvyC,EAAOtR,EAAAuF,KAAKU,gBACVjG,EAAAuF,KAAKW,qBAAqB,OAAQ8+F,EAAG5nG,SAAU,IAAI,EAAO4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,WAI7E,GAAIoH,GAAS/U,EAAAC,MAAMiN,KACxBrwC,EAAOtR,EAAAuF,KAAKU,gBACVjG,EAAAuF,KAAKW,qBAAqB,OAAQ8+F,EAAG5nG,SAAU,IAAI,EAAO4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,WAI7E,GAAIoH,GAAS/U,EAAAC,MAAMG,MAAQ2U,GAAS/U,EAAAC,MAAMI,MAC/CxjC,EAAOtR,EAAAuF,KAAKU,gBACVjG,EAAAuF,KAAKW,qBAAqB,OAAQ8+F,EAAG5nG,SAAU,IAAI,EAAO4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,WAI7E,GAAIoH,GAAS/U,EAAAC,MAAMkY,cACxBo4C,EAAG7+D,aACH70B,EAAOtR,EAAAuF,KAAKU,gBACVjG,EAAAuF,KAAKW,qBAAqB,SAAU8+F,EAAG5nG,SAAU,IAAI,EAAO4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,UAI/E,IAAIoH,GAAS/U,EAAAC,MAAMM,WA6DxB,OANKgyD,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGA,KAtDP,IANA,IAAIyoG,EAAQ7lG,EAAAuF,KAAKW,qBAAqB8+F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAC1D4a,EAAU6tF,EACVjwD,EAAqC,KACrC0xD,GAAW,EAGRtC,EAAG71C,KAAK1a,EAAAC,MAAMwY,MAAM,CACzB,IAAI83C,EAAG71C,KAAK1a,EAAAC,MAAMM,YAShB,OAJA3iD,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,MAAM4nG,EAAG5iD,MAEP,KARP,IAAI93C,EAAOtK,EAAAuF,KAAKW,qBAAqB8+F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAC7D4a,EAAQ1N,KAAOA,EACf0N,EAAU1N,EAWd,GAAI06F,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,CAC3B,EAAG,CACD,IAAI29C,EAAYl1G,KAAKy0G,UAAU9B,GAAI,EAAMgC,GACzC,IAAKO,EAAW,OAAO,KAClB3xD,EACAA,EAAW72C,KAAoBwoG,GADnB3xD,EAAa,CAAgB2xD,SAEvCvC,EAAG71C,KAAK1a,EAAAC,MAAMyM,QACvB,IAAK6jD,EAAG71C,KAAK1a,EAAAC,MAAMmV,aAOjB,OANKm9C,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAGf,KAIX,KAAO4iD,EAAG71C,KAAK1a,EAAAC,MAAMoW,MAAM,CACzB,IAAIk6C,EAAG71C,KAAK1a,EAAAC,MAAME,MAShB,OANKoyD,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,QAGf,KARPklD,GAAW,EAWfh2F,EAAOtR,EAAAuF,KAAKU,gBAAgB4/F,EAAOjwD,GAAc,GAAI0xD,EAAUtC,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAWvF,KAAO4iD,EAAG71C,KAAK1a,EAAAC,MAAMoZ,cAAc,CACjC,IAAI05C,EAAexC,EAAG54C,SACtB,IAAK44C,EAAG71C,KAAK1a,EAAAC,MAAMqZ,cAOjB,OANKi5C,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGT,KAET,IAAIqqG,EAAezC,EAAG5nG,MAAMoqG,EAAcxC,EAAG5iD,KAGzCklD,GAAW,EACf,GAAItC,EAAG71C,KAAK1a,EAAAC,MAAMoW,KAAM,CACtB,IAAIk6C,EAAG71C,KAAK1a,EAAAC,MAAME,MAShB,OANKoyD,GACH30G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,QAGT,KARPkqG,GAAW,EAiBf,GANAh2F,EAAOtR,EAAAuF,KAAKU,gBACVjG,EAAAuF,KAAKW,qBAAqB,QAASuhG,GACnC,CAAEn2F,GACFg2F,EACAtC,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEpBklD,EAAU,MAGhB,OAAOh2F,GAOTkzF,EAAAlwG,UAAA4yG,qBAAA,SACElC,GAKA,IAuGIvnE,EAvGA4xB,EAAQ21C,EAAG51C,OACX81C,EAAWF,EAAG54C,SACdxW,EAAqC,KACrCx5B,EAAiC,KACjCsrF,GAAoB,EAExB,GAAI1C,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAChB26C,GAAc,EACd1C,EAAGx1C,QAAQH,GACXzZ,EAAa,OAER,CACL8xD,GAAc,EACd,EAAG,CACD,IAAI5+F,EAAO9I,EAAAogD,cAAc6H,QAMzB,GALI+8C,EAAG71C,KAAK1a,EAAAC,MAAMiV,eAChB+9C,GAAc,EACd1C,EAAGx1C,QAAQH,GACXvmD,EAAO9I,EAAAogD,cAAc+S,MAEnB6xC,EAAG71C,KAAK1a,EAAAC,MAAMiN,MAAO,CACvB,IAAIqjD,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAiBhB,OAFAs3C,EAAGv1C,MAAMJ,GACTh9D,KAAKuyG,8BAA+B,EAC7B,KAhBP8C,GAAc,EACd1C,EAAGx1C,QAAQH,GACX,IAAIz7D,EAAIvB,KAAKy0G,UAAU9B,GAAI,GAC3B,IAAKpxG,EAAG,OAAO,KACf,GAAIA,EAAEkV,MAAQ9I,EAAA+I,SAASk3C,UAMrB,OALA5tD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9f,EAAEwJ,OAEJ/K,KAAKuyG,8BAA+B,EAC7B,KAETxoF,EAA0BxoB,MAMvB,KAAIoxG,EAAG91C,iBA8CZ,OATIw4C,EACFr1G,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGL4nG,EAAGv1C,MAAMJ,GAEXh9D,KAAKuyG,6BAA+B8C,EAC7B,KA7CP,IAAIz0G,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,MAAM4nG,EAAG54C,SAAU44C,EAAG5iD,MAazF,GAZI4iD,EAAG71C,KAAK1a,EAAAC,MAAMmZ,YAChB65C,GAAc,EACd1C,EAAGx1C,QAAQH,GACPvmD,GAAQ9I,EAAAogD,cAAc+S,KACxB9gE,KAAKqN,MACHI,EAAAhD,eAAe6qG,oCACf3C,EAAG5nG,SAGL0L,EAAO9I,EAAAogD,cAAcwnD,UAGrB5C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CACxBg6C,GAAc,EACd1C,EAAGx1C,QAAQH,GACX,IAAI/9C,EAAOjf,KAAKy0G,UAAU9B,GAC1B,IAAK1zF,EAEH,OADAjf,KAAKuyG,6BAA+B8C,EAC7B,KAET,IAAIG,EAAQ,IAAI7nG,EAAAo2C,cAChByxD,EAAMxxD,cAAgBvtC,EACtB++F,EAAM50G,KAAOA,EACb40G,EAAMv2F,KAAOA,EACRskC,EACAA,EAAW72C,KAAK8oG,GADJjyD,EAAa,CAAEiyD,QAG5BH,GACFr1G,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf2xC,EAAG5nG,gBAgBJ4nG,EAAG71C,KAAK1a,EAAAC,MAAMyM,QACvB,IAAK6jD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAUjB,OATI26C,EACFr1G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGd4nG,EAAGv1C,MAAMJ,GAEXh9D,KAAKuyG,6BAA+B8C,EAC7B,KAKX,OAAI1C,EAAG71C,KAAK1a,EAAAC,MAAMkZ,qBAChB85C,GAAc,EACd1C,EAAGx1C,QAAQH,IACX5xB,EAAaprC,KAAKy0G,UAAU9B,KAiB9B3yG,KAAKuyG,8BAA+B,EAC7B5kG,EAAAuF,KAAKS,mBACV4vC,GAAc,GACdnY,EACArhB,GACA,EACA4oF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,QArBpB/vD,KAAKuyG,6BAA+B8C,EAC7B,QAGLA,EACFr1G,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,MAGd4nG,EAAGv1C,MAAMJ,GAEXh9D,KAAKuyG,6BAA+B8C,EAC7B,OAcXlD,EAAAlwG,UAAA6wG,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAG54C,SAClB,GAAI44C,EAAG91C,iBAAkB,CAGvB,IAFA,IAAIj8D,EAAO+xG,EAAGt1C,iBACVrzB,EAAyBr8B,EAAAuF,KAAKE,2BAA2BxS,EAAM+xG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAClF4iD,EAAG71C,KAAK1a,EAAAC,MAAMwY,MAAM,CACzB,IAAI83C,EAAG91C,iBAYL,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAXPnK,EAAO+xG,EAAGt1C,iBACVrzB,EAAar8B,EAAAuF,KAAKq0C,+BAChBvd,EACAr8B,EAAAuF,KAAKE,2BAA2BxS,EAAM+xG,EAAG5nG,SACzC4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAU5B,IAAI7L,OAAI,EACR,IAAIyuD,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAMhB,OAAO9sD,EAAAuF,KAAK+wC,gBAAgBja,EAAY,KAAM2oE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAJpE,GADA7L,EAAOlkD,KAAKy1G,eAAe9C,GAEzB,OAAOhlG,EAAAuF,KAAK+wC,gBAAgBja,EAAYka,EAAMyuD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,WAMxE/vD,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAAyxG,cAAA,SACEf,EACA3/F,EACAuN,EACAsyF,GAKA,IAAI/zF,EAAU,IAAI7X,MAClB,EAAG,CACD,IAAIqX,EAASte,KAAK01G,yBAAyB/C,EAAI3/F,EAAOuN,GACtD,IAAKjC,EAAQ,OAAO,KACpBQ,EAAQpS,KAA0B4R,SAC3Bq0F,EAAG71C,KAAK1a,EAAAC,MAAMyM,QAEvB,IAAIpb,EAAM/lC,EAAAuF,KAAKi6C,wBAAwBruC,EAASyB,EAAYoyF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAElF,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAyzG,yBAAA,SACE/C,EACAgD,EACAC,GAKA,IAAKjD,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAET,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrEq3C,EAAAgV,4BAA4B9jD,EAAWrH,OACzCjM,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACf1hG,EAAWvI,OAGf,IAAIiI,EAAQ2iG,EACRhD,EAAG71C,KAAK1a,EAAAC,MAAMsW,eAChB3lD,GAASxF,EAAAnL,YAAYwzG,qBAGvB,IAAI52F,EAAwB,KACxB0zF,EAAG71C,KAAK1a,EAAAC,MAAMgZ,SAChBp8C,EAAOjf,KAAKy0G,UAAU9B,IAGxB,IAAIvrF,EAAiC,KACrC,GAAIurF,EAAG71C,KAAK1a,EAAAC,MAAM0W,SAQhB,GAPI/lD,EAAQxF,EAAAnL,YAAY0iB,SACtB/kB,KAAKqN,MACHI,EAAAhD,eAAeqrG,iDACfnD,EAAG5nG,WAGPqc,EAAcpnB,KAAK+1G,gBAAgBpD,EAAI,IACrB,OAAO,UAErB3/F,EAAQxF,EAAAnL,YAAYod,MAChBzM,EAAQxF,EAAAnL,YAAY0iB,SACxB/kB,KAAKqN,MACHI,EAAAhD,eAAewxE,wCACf3oE,EAAWvI,OAGLkU,GACVjf,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf2xC,EAAG5nG,MAAM4nG,EAAG5iD,MAIlB,IAAIhlD,EAAQq3C,EAAAzmC,MAAMhP,KAAK2G,EAAWvI,MAAO4nG,EAAG5nG,SAM5C,OALKiI,EAAQxF,EAAAnL,YAAYwzG,qBAAwBzuF,GAC/CpnB,KAAKqN,MACHI,EAAAhD,eAAeurG,iEACfjrG,GAEG4C,EAAAuF,KAAKC,0BACVG,EACA2L,EACAmI,EACAwuF,EACA5iG,EACAjI,IAIJonG,EAAAlwG,UAAAwxG,UAAA,SACEd,EACA3/F,EACAuN,EACAsyF,GAKA,GAAIF,EAAG16F,QAAUmqC,EAAAC,MAAMM,WAKrB,OAJA3iD,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAET,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACzE,GAAI4nG,EAAG16F,QAAUmqC,EAAAC,MAAMsZ,UAKrB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAGT,IADA,IAAI+T,EAAU,IAAI7X,OACV0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIt9C,EAASte,KAAKi2G,eAAetD,EAAInlG,EAAAnL,YAAY4Q,MACjD,IAAKqL,EAAQ,OAAO,KAEpB,GADAQ,EAAQpS,KAA2B4R,IAC9Bq0F,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YAChB,MAMA,OAJA57D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,IAAI2oC,EAAM/lC,EAAAuF,KAAKw2C,sBACbp2C,EACAwL,EACAyB,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAg0G,eAAA,SACEtD,EACAgD,GAKA,IAAKhD,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAET,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrEzJ,EAA2B,KAC/B,OAAIqxG,EAAG71C,KAAK1a,EAAAC,MAAM0W,WAChBz3D,EAAQtB,KAAK+1G,gBAAgBpD,EAAI,IACd,KAEdhlG,EAAAuF,KAAK02C,2BACVt2C,EACAhS,EACAq0G,EACAvzD,EAAAzmC,MAAMhP,KAAK2G,EAAWvI,MAAO4nG,EAAG5nG,WAIpConG,EAAAlwG,UAAAi0G,YAAA,SACEvD,GAKA,IAAI/rE,EAA0B,KAC9B,GACE+rE,EAAGn2C,MAAK,IAASpa,EAAAC,MAAMiZ,WACvBq3C,EAAG34C,WAAa5X,EAAAC,MAAMuZ,aACrB+2C,EAAGz4C,sBAEEtzB,EAAO5mC,KAAK+1G,gBAAgBpD,IAAM,OAAO,KAGjD,IAAIj/D,EAAM/lC,EAAAuF,KAAKk5C,sBAAsBxlB,EAAM+rE,EAAG5nG,SAE9C,OADA4nG,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAk0G,oBAAA,SACExD,GAOA,IAFA,IAAI7rF,EAA6C,KAC7CsvF,GAAe,GACXzD,EAAG71C,KAAK1a,EAAAC,MAAMmV,cAAc,CAClC,IAAI6+C,EAAgBr2G,KAAKs2G,mBAAmB3D,GAC5C,IAAK0D,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAc1yD,YAChByyD,GAAe,EACNA,IACTp2G,KAAKqN,MACHI,EAAAhD,eAAe8rG,iEACfF,EAActrG,OAEhBsrG,EAAc1yD,YAAc,MAEzB78B,EACAA,EAAepa,KAAK2pG,GADJvvF,EAAiB,CAAEuvF,IAEnC1D,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMmV,aAChB,MAMA,OAJAx3D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAUb,OANM+b,GAAkBA,EAAe3a,QACrCnM,KAAKqN,MACHI,EAAAhD,eAAe+rG,oCACf7D,EAAG5nG,SAGA+b,GAGTqrF,EAAAlwG,UAAAq0G,mBAAA,SACE3D,GAKA,GAAIA,EAAG16F,QAAUmqC,EAAAC,MAAMM,WAAY,CACjC,IAAIrvC,EAAa3F,EAAAuF,KAAKE,2BACpBu/F,EAAGt1C,iBACHs1C,EAAG5nG,SAEDuW,EAAoC,KACxC,GAAIqxF,EAAG71C,KAAK1a,EAAAC,MAAM0T,SAAU,CAE1B,KADIx0D,EAAIvB,KAAKy0G,UAAU9B,IACf,OAAO,KACf,GAAIpxG,EAAEkV,MAAQ9I,EAAA+I,SAASk3C,UAKrB,OAJA5tD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9f,EAAEwJ,OAEG,KAETuW,EAA6B/f,EAE/B,IAAIoiD,EAAoC,KACxC,GAAIgvD,EAAG71C,KAAK1a,EAAAC,MAAM0W,QAAS,CACzB,IAAIx3D,EACJ,KADIA,EAAIvB,KAAKy0G,UAAU9B,IACf,OAAO,KACf,GAAIpxG,EAAEkV,MAAQ9I,EAAA+I,SAASk3C,UAKrB,OAJA5tD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9f,EAAEwJ,OAEG,KAET44C,EAA6BpiD,EAE/B,OAAOoM,EAAAuF,KAAKwwC,oBACVpwC,EACAgO,EACAqiC,EACAvB,EAAAzmC,MAAMhP,KAAK2G,EAAWvI,MAAO4nG,EAAG5nG,UAQpC,OALE/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGA,MAKTonG,EAAAlwG,UAAAw0G,gBAAA,SACE9D,EACA+D,QAAA,IAAAA,OAAA,GAKA,IAAInzD,EAAa,IAAIt8C,MACjB0vG,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACf7sF,EAA4B,KAIhC,GADA/pB,KAAKwyG,oBAAsB,KACvBG,EAAG71C,KAAK1a,EAAAC,MAAMiN,MAAO,CACvB,IAAIqjD,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAgBhB,OAJAr7D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAdP,KADAgf,EAAW/pB,KAAKy0G,UAAU9B,IACX,OAAO,KAgBxB,GAfM5oF,EAAStT,MAAQ9I,EAAA+I,SAASk3C,UAC5B5tD,KAAKwyG,oBAAqCzoF,EAE1C/pB,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf0I,EAAShf,QAUV4nG,EAAG71C,KAAK1a,EAAAC,MAAMyM,OACjB,OAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YACTnX,GAEPvjD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAKb,MAAQ4nG,EAAG71C,KAAK1a,EAAAC,MAAMqY,aAAa,CACjC,IAAI86C,EAAQx1G,KAAK62G,eAAelE,EAAI+D,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACf52G,KAAKqN,MACHI,EAAAhD,eAAeqsG,kDACfH,EAAS/1G,KAAKmK,OAEhB6rG,GAAe,GAETpB,EAAMxxD,eACZ,QACMoyD,GACFp2G,KAAKqN,MACHI,EAAAhD,eAAessG,yDACfvB,EAAM50G,KAAKmK,OAGf,MAEF,KAAK4C,EAAAogD,cAAcwnD,SACjBa,GAAe,EACf,MAEF,KAAKzoG,EAAAogD,cAAc+S,KACjB61C,EAAWnB,EAKf,GADAjyD,EAAW72C,KAAK8oG,IACX7C,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAChB,MAMA,OAJA16D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,OAAOw4C,GAGT4uD,EAAAlwG,UAAA40G,eAAA,SACElE,EACA+D,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B3pG,EAAAnL,YAAY4Q,KAC3C,GAAIyjG,IACE/D,EAAG71C,KAAK1a,EAAAC,MAAMuU,SAChBsgD,EAAavE,EAAG5nG,QAChBosG,GAAe3pG,EAAAnL,YAAYu0D,QAClB+7C,EAAG71C,KAAK1a,EAAAC,MAAMsU,YACvBugD,EAAavE,EAAG5nG,QAChBosG,GAAe3pG,EAAAnL,YAAYs0D,WAClBg8C,EAAG71C,KAAK1a,EAAAC,MAAMqU,WACvBwgD,EAAavE,EAAG5nG,QAChBosG,GAAe3pG,EAAAnL,YAAYq0D,SAEzBi8C,EAAGn2C,QAAUpa,EAAAC,MAAMjgC,UAAU,CAC/B,IAAI46C,EAAQ21C,EAAG51C,OACf41C,EAAG16F,OACC06F,EAAGn2C,QAAUpa,EAAAC,MAAMgZ,OACrBs3C,EAAGx1C,QAAQH,GACNk6C,IAAYA,EAAavE,EAAG5nG,SACjCosG,GAAe3pG,EAAAnL,YAAY+f,UAE3BuwF,EAAGv1C,MAAMJ,GAef,GAXI21C,EAAG71C,KAAK1a,EAAAC,MAAMiV,eACZ6/C,EACFn3G,KAAKqN,MACHI,EAAAhD,eAAe2sG,+DACfzE,EAAG5nG,SAGLmsG,EAAavE,EAAG5nG,QAElBisG,GAAS,GAEPrE,EAAG91C,iBAAkB,CAClBm6C,IAAQE,EAAavE,EAAG5nG,SAC7B,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrEkU,EAAwB,KAS5B,IARIg4F,EAAatE,EAAG71C,KAAK1a,EAAAC,MAAMmZ,YACzBw7C,GACFh3G,KAAKqN,MACHI,EAAAhD,eAAe6qG,oCACfhiG,EAAWvI,OAIb4nG,EAAG71C,KAAK1a,EAAAC,MAAMgZ,QAEhB,KADAp8C,EAAOjf,KAAKy0G,UAAU9B,IACX,OAAO,UAElB1zF,EAAOtR,EAAAuF,KAAKM,kBAAkBm/F,EAAG5nG,MAAM4nG,EAAG5iD,MAE5C,IAAI3oC,EAAiC,KACrC,GAAIurF,EAAG71C,KAAK1a,EAAAC,MAAM0W,UACZi+C,GACFh3G,KAAKqN,MACHI,EAAAhD,eAAe4sG,4CACf/jG,EAAWvI,OAGXksG,EACFj3G,KAAKqN,MACHI,EAAAhD,eAAe6sG,oDACfhkG,EAAWvI,OAGbksG,GAAa,IAEf7vF,EAAcpnB,KAAK+1G,gBAAgBpD,EAAI,KACrB,OAAO,KAE3B,IAAI6C,EAAQ7nG,EAAAuF,KAAK4wC,gBACfxwC,EACA2L,EACAmI,EACA4vF,EACIrpG,EAAAogD,cAAc+S,KACdm2C,EACEtpG,EAAAogD,cAAcwnD,SACd5nG,EAAAogD,cAAc6H,QACpBxT,EAAAzmC,MAAMhP,KAAYuqG,EAAYvE,EAAG5nG,UAGnC,OADAyqG,EAAMxiG,OAASmkG,EACR3B,EAOT,OALEx1G,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGA,MAGTonG,EAAAlwG,UAAA0xG,cAAA,SACEhB,EACA3/F,EACAuN,EACAsyF,GAUA,IAAKF,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,MAAM4nG,EAAG5iD,MAEP,KAGT,IAAInvD,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAC/DwsG,GAAuB,EAEvBzwF,EAA6C,KACjD,GAAI6rF,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,CAG3B,GAFAggD,EAAiB5E,EAAG54C,WACpBjzC,EAAiB9mB,KAAKm2G,oBAAoBxD,IACrB,OAAO,KAC5B3/F,GAASxF,EAAAnL,YAAY8S,QAGvB,IAAKw9F,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAKjB,OAJAz6D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAEb,KAGLwnD,EAAiB,IACnBA,EAAiB5E,EAAG54C,UAGtB,IAAIxW,EAAavjD,KAAKy2G,gBAAgB9D,GACtC,IAAKpvD,EAAY,OAAO,KACxB,IAAIx5B,EAAW/pB,KAAKwyG,oBAEhBgF,EAAwC,IAA5BxkG,EAAQxF,EAAAnL,YAAYyf,KAChC01F,IACuB,GAArBj0D,EAAWp3C,QACbnM,KAAKqN,MACHI,EAAAhD,eAAegtG,+CACf72G,EAAKmK,OAGLw4C,EAAWp3C,QAAUo3C,EAAW,GAAGn8B,aACrCpnB,KAAKqN,MACHI,EAAAhD,eAAeitG,oDACf92G,EAAKmK,QAKPiI,EAAQxF,EAAAnL,YAAYwf,KAClB0hC,EAAWp3C,QACbnM,KAAKqN,MACHI,EAAAhD,eAAektG,sCACf/2G,EAAKmK,OAKX,IAAIqgC,EAA8B,KAClC,GAAIunE,EAAG71C,KAAK1a,EAAAC,MAAMgZ,UAChBjwB,EAAaprC,KAAKy0G,UAAU9B,GAAI,EAAM6E,IACrB,OAAO,KAGrBpsE,IACHA,EAAaz9B,EAAAuF,KAAKM,kBAChBm/F,EAAG5nG,MAAM4nG,EAAG5iD,MAETynD,GACHx3G,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf51B,EAAWrgC,QAKjB,IAAIkJ,EAAYtG,EAAAuF,KAAKS,mBACnB4vC,EACAnY,EACArhB,GACA,EACA4oF,EAAG5nG,MAAMwsG,EAAgB5E,EAAG5iD,MAG1B/nC,EAAyB,KAC7B,GAAI2qF,EAAG71C,KAAK1a,EAAAC,MAAMsZ,YAShB,GARI3oD,EAAQxF,EAAAnL,YAAY0iB,SACtB/kB,KAAKqN,MACHI,EAAAhD,eAAe+rE,yDACfm8B,EAAG5nG,WAIPid,EAAOhoB,KAAK43G,oBAAoBjF,GAAI,IACzB,OAAO,UACP3/F,EAAQxF,EAAAnL,YAAY0iB,SAC/B/kB,KAAKqN,MACHI,EAAAhD,eAAeisE,gFACfi8B,EAAG5nG,MAAM4nG,EAAG5iD,MAIhB,IAAIrc,EAAM/lC,EAAAuF,KAAKQ,0BACb9S,EACAkmB,EACA7S,EACA+T,EACAzH,EACAvN,EAAK,EAEL2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAA41G,wBAAA,SAAwBlF,GACtB,IACI/xG,EADAiyG,EAAWF,EAAG54C,SAEd9xC,EAAS,EAOb,GAAI0qF,EAAGx7C,OAAS/U,EAAAC,MAAM1jC,UAMpB,GAJE/d,EADE+xG,EAAG91C,iBACElvD,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAExD4C,EAAAuF,KAAK0xC,gCAAgC+tD,EAAG5nG,MAAM4nG,EAAG5iD,OAErD4iD,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAKjB,OAJAz6D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAEb,UAQT9nC,EAAS,EACT7d,OAAOuoG,EAAGx7C,OAAS/U,EAAAC,MAAMoY,WACzB75D,EAAO+M,EAAAuF,KAAK0xC,gCAAgC+tD,EAAG5nG,MAAM4nG,EAAG54C,WAK1D,IAAIw9C,EAAiB5E,EAAG5iD,IACpBxM,EAAavjD,KAAKy2G,gBAAgB9D,GACtC,OAAKpvD,EAEEvjD,KAAK83G,8BAA8BnF,EAAI/xG,EAAM2iD,EAAYt7B,EAAW4qF,EAAU0E,GAF7D,MAKlBpF,EAAAlwG,UAAA61G,8BAAR,SACEnF,EACA/xG,EACA2iD,EACAt7B,EACA4qF,EACA0E,QADA,IAAA1E,OAAiB,QACjB,IAAA0E,OAAuB,GAEnB1E,EAAW,IAAGA,EAAWjyG,EAAKmK,MAAMqB,OACpCmrG,EAAiB,IAAGA,EAAiB1E,GAEzC,IAAIznE,EAA8B,KAClC,GAAa,GAATnjB,GAAuC0qF,EAAG71C,KAAK1a,EAAAC,MAAMgZ,QAEvD,KADAjwB,EAAaprC,KAAKy0G,UAAU9B,IACX,OAAO,UAExBvnE,EAAaz9B,EAAAuF,KAAKM,kBAAkBm/F,EAAG5nG,MAAM4nG,EAAG5iD,MAGlD,GAAI9nC,IACG0qF,EAAG71C,KAAK1a,EAAAC,MAAMkZ,oBAKjB,OAJAv7D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,MAEb,KAIX,IAAI97C,EAAYtG,EAAAuF,KAAKS,mBACnB4vC,EACAnY,EACA,MACA,EACAunE,EAAG5nG,MAAMwsG,EAAgB5E,EAAG5iD,MAG1B/nC,EAAyB,KAC7B,GAAIC,EACF,GAAI0qF,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAChB3zC,EAAOhoB,KAAK43G,oBAAoBjF,GAAI,OAC/B,CACL,IAAIoF,EAAiB/3G,KAAK+1G,gBAAgBpD,EAAI,GAC1CoF,IAAgB/vF,EAAOra,EAAAuF,KAAKy3C,0BAA0BotD,QAEvD,CACL,IAAKpF,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAKjB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAEb,KAET/nC,EAAOhoB,KAAK43G,oBAAoBjF,GAAI,GAEtC,IAAK3qF,EAAM,OAAO,KAElB,IAAIzT,EAAc5G,EAAAuF,KAAKQ,0BACrB9S,EACA,KACAqT,EACA+T,EACA,KACAxa,EAAAnL,YAAY4Q,KACZgV,EACA0qF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,OAAOpiD,EAAAuF,KAAKszC,yBAAyBjyC,IAGvC49F,EAAAlwG,UAAA4xG,sBAAA,SACElB,EACA3/F,EACAuN,EACAsyF,GAUA,IAAIX,EAAcS,EAAGx7C,OAAS/U,EAAAC,MAAMl2B,UAEpC,IAAKwmF,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAGT,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BACpBu/F,EAAGt1C,iBACHs1C,EAAG5nG,SAGD+b,EAA6C,KACjD,GAAI6rF,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,CAE3B,KADAzwC,EAAiB9mB,KAAKm2G,oBAAoBxD,IACrB,OAAO,KAC5B3/F,GAASxF,EAAAnL,YAAY8S,QAGvB,IAAImM,EAAoC,KACxC,GAAIqxF,EAAG71C,KAAK1a,EAAAC,MAAM0T,SAAU,CAC1B,IAAIx0D,EAAIvB,KAAKy0G,UAAU9B,GACvB,IAAKpxG,EAAG,OAAO,KACf,GAAIA,EAAEkV,MAAQ9I,EAAA+I,SAASk3C,UAKrB,OAJA5tD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACf9f,EAAEwJ,OAEG,KAETuW,EAA6B/f,EAG/B,IAAI2f,EAA0C,KAC9C,GAAIyxF,EAAG71C,KAAK1a,EAAAC,MAAM6T,YAAa,CACzBg8C,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAeutG,oDACfrF,EAAG5nG,SAGP,EAAG,CACD,IAAIkU,EAAOjf,KAAKy0G,UAAU9B,GAC1B,IAAK1zF,EAAM,OAAO,KACbizF,IACEhxF,EACAA,EAAgBxU,KAAoBuS,GADnBiC,EAAkB,CAAgBjC,UAGnD0zF,EAAG71C,KAAK1a,EAAAC,MAAMyM,QAGzB,IAAK6jD,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAKjB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAGT,IACIwJ,EADAuK,EAAU,IAAI7X,MAyBlB,GAvBIirG,GACF9nG,QAAQ8W,GACR3M,EAAc5G,EAAAuF,KAAKm4C,2BACjB/3C,EACAwT,EACAxF,EACAxC,EACAyB,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAGxBx7C,EAAc5G,EAAAuF,KAAKg2C,uBACjB51C,EACAwT,EACAxF,EACAJ,EACApC,EACAyB,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAGrB4iD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YACjB,EAAG,CACD,IAAIt9C,EAASte,KAAKi4G,iBAAiBtF,EAAIp+F,GACvC,GAAI+J,EAAQQ,EAAQpS,KAA2B4R,QAG7C,GADAte,KAAK+yG,cAAcJ,GACfA,EAAG71C,KAAK1a,EAAAC,MAAMka,WAKhB,OAJAv8D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,YAGH4nG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAG1B,OADArnD,EAAYxJ,MAAMsB,IAAMsmG,EAAG5iD,IACpBx7C,GAGT49F,EAAAlwG,UAAAi2G,qBAAA,SAAqBvF,GAInB,IACI/xG,EADAiyG,EAAWF,EAAG54C,SASlB,GALEn5D,EADE+xG,EAAG91C,iBACElvD,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAExD4C,EAAAuF,KAAK0xC,gCAAgC+tD,EAAG5nG,MAAM4nG,EAAG5iD,OAGrD4iD,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAKjB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,MAAM4nG,EAAG5iD,KAAM,KAEb,KAGT,IAAIjxC,EAAU,IAAI7X,MACdsN,EAAc5G,EAAAuF,KAAKg2C,uBACrBtoD,EACA,GACA,KACA,KACAke,EACA,KACAtR,EAAAnL,YAAY4Q,KACZ0/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,IAAK4iD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YACjB,EAAG,CACD,IAAIt9C,EAASte,KAAKi4G,iBAAiBtF,EAAIp+F,GACvC,GAAI+J,EAAQQ,EAAQpS,KAA2B4R,QAG7C,GADAte,KAAK+yG,cAAcJ,GACfA,EAAG71C,KAAK1a,EAAAC,MAAMka,WAKhB,OAJAv8D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,YAGH4nG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAG1B,OADArnD,EAAYxJ,MAAMsB,IAAMsmG,EAAG5iD,IACpBpiD,EAAAuF,KAAKwyC,sBAAsBnxC,IAGpC49F,EAAAlwG,UAAAg2G,iBAAA,SACEtF,EACAz+F,GAUA,IAAI2+F,EAAWF,EAAG5iD,IACdmiD,EAAch+F,EAAOuC,MAAQ9I,EAAA+I,SAASc,qBAEtC+I,EAAqC,KACzC,GAAIoyF,EAAG71C,KAAK1a,EAAAC,MAAMwZ,IAAK,CACrB,EAAG,CACD,IAAIp7C,EAAYzgB,KAAK8yG,eAAeH,GACpC,IAAKlyF,EAAW,MACXF,EACAA,EAAW7T,KAAoB+T,GADnBF,EAAa,CAAgBE,SAEvCkyF,EAAG71C,KAAK1a,EAAAC,MAAMwZ,KACnBt7C,GAAc2xF,GAChBlyG,KAAKqN,MACHI,EAAAhD,eAAe6pG,8BACflyD,EAAAzmC,MAAMhP,KAAK4T,EAAW,GAAGxV,MAAOwV,EAAWA,EAAWpU,OAAS,GAAGpB,QAMxE,IAAIiI,EAAQkB,EAAOlB,MAAQxF,EAAAnL,YAAY0iB,QAGnCmtF,IAAal/F,GAASxF,EAAAnL,YAAY81G,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZ1F,EAAG71C,KAAK1a,EAAAC,MAAMuU,SACZs7C,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,QAAS,UAGhBiI,GAASxF,EAAAnL,YAAYu0D,OACrBwhD,EAAczF,EAAG54C,SACjBs+C,EAAY1F,EAAG5iD,KACN4iD,EAAG71C,KAAK1a,EAAAC,MAAMqU,UACnBw7C,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,QAAS,WAGhBiI,GAASxF,EAAAnL,YAAYq0D,QACrB0hD,EAAczF,EAAG54C,SACjBs+C,EAAY1F,EAAG5iD,KACN4iD,EAAG71C,KAAK1a,EAAAC,MAAMsU,aACnBu7C,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,QAAS,aAGhBiI,GAASxF,EAAAnL,YAAYs0D,UACrByhD,EAAczF,EAAG54C,SACjBs+C,EAAY1F,EAAG5iD,KAGjB,IAAIuoD,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACd9F,EAAG71C,KAAK1a,EAAAC,MAAMngC,SACZgwF,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,QAAS,UAGhBiI,GAASxF,EAAAnL,YAAY6f,OACrBo2F,EAAc3F,EAAG54C,SACjBw+C,EAAY5F,EAAG5iD,MAEf/8C,GAASxF,EAAAnL,YAAY4iB,SACjB0tF,EAAG71C,KAAK1a,EAAAC,MAAM7/B,YACZ0vF,GACFlyG,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,QAAS,YAGhBiI,GAASxF,EAAAnL,YAAYmgB,SACrBg2F,EAAgB7F,EAAG54C,SACnB0+C,EAAc9F,EAAG5iD,KAEf77C,EAAOlB,MAAQxF,EAAAnL,YAAY8S,UAASnC,GAASxF,EAAAnL,YAAYq2G,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAIjG,EAAGn2C,QAAUpa,EAAAC,MAAMjgC,SAAU,CAC/B,IAAIy2F,EAAQlG,EAAG51C,OACf41C,EAAG16F,OACC06F,EAAGn2C,QAAUpa,EAAAC,MAAMgZ,OACrBs3C,EAAGx1C,QAAQ07C,GACX7lG,GAASxF,EAAAnL,YAAY+f,SACrBu2F,EAAgBhG,EAAG54C,SACnB6+C,EAAcjG,EAAG5iD,KAEjB4iD,EAAGv1C,MAAMy7C,GAKb,IA+DIj4G,EA/DAo8D,EAAQ21C,EAAG51C,OACX25C,GAAgB,EAChB1yF,GAAW,EAGXwzF,GAAW,EACX5mE,EAAgB,EAChBkoE,EAAc,EAyDlB,GAxDK5G,IACCS,EAAG71C,KAAK1a,EAAAC,MAAMxgC,KACZ8wF,EAAGn2C,MAAK,EAAMpa,EAAAgT,mBAAmBgH,SAAWha,EAAAC,MAAMM,YAAegwD,EAAGz4C,mBAYtEy4C,EAAGv1C,MAAMJ,IAXThqD,GAASxF,EAAAnL,YAAYwf,IACrBmC,GAAW,EACX4sB,EAAW+hE,EAAG54C,SACd++C,EAASnG,EAAG5iD,IACR/8C,EAAQxF,EAAAnL,YAAY+f,UACtBpiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAM4tG,EAAeC,GAAc,aAMnCjG,EAAG71C,KAAK1a,EAAAC,MAAMvgC,KACnB6wF,EAAGn2C,MAAK,EAAMpa,EAAAgT,mBAAmBgH,SAAWha,EAAAC,MAAMM,YAAegwD,EAAGz4C,mBAYtEy4C,EAAGv1C,MAAMJ,IAXThqD,GAASxF,EAAAnL,YAAYyf,IACrB01F,GAAW,EACX5mE,EAAW+hE,EAAG54C,SACd++C,EAASnG,EAAG5iD,IACR/8C,EAAQxF,EAAAnL,YAAY+f,UACtBpiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAM4tG,EAAeC,GAAc,aAMnCjG,EAAG71C,KAAK1a,EAAAC,MAAMz/B,eAEvB8zF,GAAgB,GADhB1jG,GAASxF,EAAAnL,YAAYugB,aAETpV,EAAAnL,YAAY6f,QACtBliB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMutG,EAAaC,GAAY,UAGlCvlG,EAAQxF,EAAAnL,YAAYmgB,UACtBxiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMytG,EAAeC,GAAc,YAGtCzlG,EAAQxF,EAAAnL,YAAY+f,UACtBpiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAM4tG,EAAeC,GAAc,cAO1ClC,EACF91G,EAAO+M,EAAAuF,KAAK6yC,4BAA4B4sD,EAAG5nG,aACtC,CACL,IAAMiZ,IAAYwzF,GAAa7E,EAAG71C,KAAK1a,EAAAC,MAAMoZ,aAAc,CAErDzoD,EAAQxF,EAAAnL,YAAYu0D,OACtB52D,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMqtG,EAAaC,GAAY,UAE3BrlG,EAAQxF,EAAAnL,YAAYs0D,UAC7B32D,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMqtG,EAAaC,GAAY,aAE3BrlG,EAAQxF,EAAAnL,YAAYq0D,SAC7B12D,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMqtG,EAAaC,GAAY,aAGlCrlG,EAAQxF,EAAAnL,YAAY6f,QACtBliB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMutG,EAAaC,GAAY,UAGlCvlG,EAAQxF,EAAAnL,YAAYmgB,UACtBxiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMytG,EAAeC,GAAc,YAGtCzlG,EAAQxF,EAAAnL,YAAY+f,UACtBpiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAM4tG,EAAeC,GAAc,YAG1C,IAAIG,EAAW/4G,KAAKg5G,+BAA+BrG,EAAIpyF,GACvD,OAAKw4F,GACLpG,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACPy9C,GAFe,KAIxB,IAAKpG,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAETnK,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAEjE,IAAI+b,EAA6C,KACjD,GAAI6rF,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,CAC3B,IAAI0hD,EAAsBtG,EAAG54C,SAE7B,KADAjzC,EAAiB9mB,KAAKm2G,oBAAoBxD,IACrB,OAAO,KACxB+D,EACF12G,KAAKqN,MACHI,EAAAhD,eAAeyuG,2DACfvG,EAAG5nG,MAAMkuG,EAAqBtG,EAAG5iD,MAE1B/rC,GAAYwzF,EACrBx3G,KAAKqN,MACHI,EAAAhD,eAAe0uG,wCACfxG,EAAG5nG,MAAMkuG,EAAqBtG,EAAG5iD,MAGnC/8C,GAASxF,EAAAnL,YAAY8S,QAKzB,GAAIw9F,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAI88C,EAAiB5E,EAAG54C,SACpBxW,EAAavjD,KAAKy2G,gBAAgB9D,EAAI+D,GAC1C,IAAKnzD,EAAY,OAAO,KACxB,IAAIx5B,EAAW/pB,KAAKwyG,oBACpB,GAAIkE,EACF,IAAK,IAAIr2G,EAAI,EAAG+V,EAAImtC,EAAWp3C,OAAQ9L,EAAI+V,IAAK/V,EAAG,CACjD,IAAI60G,EAAY3xD,EAAWljD,GAC3B,GAAI60G,EAAUtzF,MACZpU,EAAAnL,YAAYu0D,OACZppD,EAAAnL,YAAYs0D,UACZnpD,EAAAnL,YAAYq0D,QACZlpD,EAAAnL,YAAY+f,UACX,CACD,IAAI6rC,EAA2BtgD,EAAAuF,KAAKq4C,uBAClC2pD,EAAUt0G,KACVs0G,EAAUj2F,KACV,KACA,KACAi2F,EAAUliG,MAAQxF,EAAAnL,YAAY4iB,SAC9BiwF,EAAUnqG,OAEZkjD,EAAyB7iC,eAAiB/qB,EAC1C60G,EAAUjnD,yBAA2BA,EACrC/5C,EAAO4K,QAAQpS,KAAKuhD,SAGfjqC,EACLu/B,EAAWp3C,QACbnM,KAAKqN,MACHI,EAAAhD,eAAektG,sCACf/2G,EAAKmK,OAGAysG,IACgB,GAArBj0D,EAAWp3C,QACbnM,KAAKqN,MACHI,EAAAhD,eAAegtG,+CACf72G,EAAKmK,OAGLw4C,EAAWp3C,QAAUo3C,EAAW,GAAGn8B,aACrCpnB,KAAKqN,MACHI,EAAAhD,eAAeitG,oDACf92G,EAAKmK,QAKX,IAAIqgC,EAA8B,KAClC,GAAIunE,EAAG71C,KAAK1a,EAAAC,MAAMgZ,QAahB,GAZIz6D,EAAK6V,MAAQ9I,EAAA+I,SAASkM,YACxB5iB,KAAKqN,MACHI,EAAAhD,eAAe2uG,2DACfzG,EAAG5nG,SAEIysG,GACTx3G,KAAKqN,MACHI,EAAAhD,eAAe4uG,oDACf1G,EAAG5nG,WAGPqgC,EAAaprC,KAAKy0G,UAAU9B,EAAI/xG,EAAK6V,MAAQ9I,EAAA+I,SAASkM,aAAe40F,IACpD,OAAO,UAExBpsE,EAAaz9B,EAAAuF,KAAKM,kBAAkBm/F,EAAG5nG,MAAM4nG,EAAG5iD,MAC3CynD,GAAY52G,EAAK6V,MAAQ9I,EAAA+I,SAASkM,aACrC5iB,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf51B,EAAWrgC,OAKjB,IAAIkJ,EAAYtG,EAAAuF,KAAKS,mBACnB4vC,EACAnY,EACArhB,GACA,EACA4oF,EAAG5nG,MAAMwsG,EAAgB5E,EAAG5iD,MAG1B/nC,EAAyB,KAC7B,GAAI2qF,EAAG71C,KAAK1a,EAAAC,MAAMsZ,YAahB,GAZI3oD,EAAQxF,EAAAnL,YAAY0iB,QACtB/kB,KAAKqN,MACHI,EAAAhD,eAAe+rE,yDACfm8B,EAAG5nG,SAEIiI,EAAQxF,EAAAnL,YAAYmgB,UAC7BxiB,KAAKqN,MACHI,EAAAhD,eAAe6uG,qEACf3G,EAAG5nG,QAASnK,EAAKqL,QAGrB+b,EAAOhoB,KAAK43G,oBAAoBjF,GAAI,IACzB,OAAO,UACP3/F,EAAQxF,EAAAnL,YAAY0iB,SAAamtF,GAC5ClyG,KAAKqN,MACHI,EAAAhD,eAAeisE,gFACfi8B,EAAG5nG,SAIP,IAAIwuG,EAAY5rG,EAAAuF,KAAK+4C,wBACnBrrD,EACAkmB,EACA7S,EACA+T,EACAzH,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACPi+C,EAEF,GAAI7C,EACT12G,KAAKqN,MACHI,EAAAhD,eAAe+uG,sCACf54G,EAAKmK,WAGF,KAAIiZ,IAAYwzF,EAOhB,CACDxkG,EAAQxF,EAAAnL,YAAYmgB,UACtBxiB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAMytG,EAAeC,GAAc,YAItCzlG,EAAQxF,EAAAnL,YAAYwf,KACtB7hB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAnRW,EACF,GAkRgB,OAI5BiI,EAAQxF,EAAAnL,YAAYyf,KACtB9hB,KAAKqN,MACHI,EAAAhD,eAAe4pG,gCACf1B,EAAG5nG,MAAM6lC,EAAUkoE,GAAS,OAIhC,IAAI75F,EAAwB,KAU5B,GATI0zF,EAAG71C,KAAK1a,EAAAC,MAAMmZ,WAChBx7D,KAAKqN,MACHI,EAAAhD,eAAegvG,sCACf9G,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGtB4iD,EAAG71C,KAAK1a,EAAAC,MAAMsW,eAChB3lD,GAASxF,EAAAnL,YAAYwzG,qBAEnBlD,EAAG71C,KAAK1a,EAAAC,MAAMgZ,QAEhB,KADAp8C,EAAOjf,KAAKy0G,UAAU9B,IACX,OAAO,UAElB3yG,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf2xC,EAAG5nG,SAGP,IAAIqc,EAAiC,KACrC,GAAIurF,EAAG71C,KAAK1a,EAAAC,MAAM0W,WAChB3xC,EAAcpnB,KAAK+1G,gBAAgBpD,IACjB,OAAO,KAE3B,IAAI5nG,EAAQ4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,KAC7B/8C,EAAQxF,EAAAnL,YAAYwzG,sBAA0B7iG,EAAQxF,EAAAnL,YAAY6f,QAAWgwF,GAAe9qF,IAC/FpnB,KAAKqN,MACHI,EAAAhD,eAAeurG,iEACfjrG,GAGJ,IAAI2uG,EAAW/rG,EAAAuF,KAAKq4C,uBAClB3qD,EACAqe,EACAmI,EACA7G,EACAvN,EACAjI,GAGF,OADA4nG,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACPo+C,EApEP15G,KAAKqN,MACHI,EAAAhD,eAAeisE,gFACf91E,EAAKmK,OAoET,OAAO,MAGTonG,EAAAlwG,UAAA+2G,+BAAA,SAA+BrG,EAAepyF,GAIxCA,GAAcA,EAAWpU,QAC3BnM,KAAKqN,MACHI,EAAAhD,eAAe6pG,8BACflyD,EAAAzmC,MAAMhP,KAAK4T,EAAW,GAAGxV,MAAOwV,EAAWA,EAAWpU,OAAS,GAAGpB,QAItE,IAAIqB,EAAQumG,EAAG54C,SACf,GAAI44C,EAAG91C,iBAEL,GAAU,OADD81C,EAAGt1C,iBAEV,GAAIs1C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CACxB,IAAIvP,EAAU9rD,KAAKy0G,UAAU9B,GAC7B,IAAK7mD,EAAS,OAAO,KACrB,GAAIA,EAAQr1C,MAAQ9I,EAAA+I,SAASk3C,UAK3B,OAJA5tD,KAAKqN,MACHI,EAAAhD,eAAeu2D,cACf2xC,EAAG5nG,SAEE,KAET,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAMqZ,cAAe,CAC/B,GAAIi3C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CACxB,IAAItP,EAAY/rD,KAAKy0G,UAAU9B,GAC/B,OAAK5mD,EACEp+C,EAAAuF,KAAK24C,gCAA+CC,EAASC,EAAW4mD,EAAG5nG,MAAMqB,EAAOumG,EAAG5iD,MAD3E,KAGvB/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,YAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAA6xG,eAAA,SACEnB,EACA3/F,EACAuN,EACAsyF,GAKA,GAAIF,EAAG91C,iBAAkB,CACvB,IAAIvpD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACzE,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAAY,CAS5B,IARA,IAAI78C,EAAU,IAAI7X,MACdsN,EAAc5G,EAAAuF,KAAKa,2BACrBT,EACAwL,EACAyB,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAEhB4iD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIt9C,EAASte,KAAK4yG,uBAAuBD,EAAIp+F,GAC7C,GAAI+J,EAAQQ,EAAQpS,KAAK4R,QAGvB,GADAte,KAAK+yG,cAAcJ,GACfA,EAAG71C,KAAK1a,EAAAC,MAAMka,WAKhB,OAJAv8D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAMb,OAFAwJ,EAAYxJ,MAAMsB,IAAMsmG,EAAG5iD,IAC3B4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP/mD,EAEPvU,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAAmyG,YAAA,SACEzB,EACAE,EACA9oD,GAKA,IAAIvlC,EAAuC,KAC3C,GAAImuF,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAAY,CAE5B,IADA,IAAI78C,EAAU,IAAI7X,OACV0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIt9C,EAASte,KAAK25G,kBAAkBhH,GACpC,IAAKr0F,EAAQ,OAAO,KAEpB,GADAQ,EAAQpS,KAAK4R,IACRq0F,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YAChB,MAMA,OAJA57D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAM4T,MAAO,CACvB,IAAI08C,EAAG71C,KAAK1a,EAAAC,MAAMkY,eAOhB,OAJAv6D,KAAKqN,MACHI,EAAAhD,eAAeiZ,wBACfivF,EAAG5nG,SAEE,KANPyZ,EAAO7W,EAAAuF,KAAK+0C,8BAA8B0qD,EAAG7+D,aAAc6+D,EAAG5nG,SAgBlE,OALqB,QADjBsZ,GADAqvB,EAAM/lC,EAAAuF,KAAK42C,sBAAsBhrC,EAAS0F,EAAMulC,EAAW4oD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAC9D1rC,eACOrkB,KAAKqyG,QAAQ79F,IAAI6P,KAC7CrkB,KAAKoyG,QAAQ1lG,KAAK2X,GAClBrkB,KAAKqyG,QAAQr9F,IAAIqP,IAEnBsuF,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EACF,GAAIi/D,EAAG71C,KAAK1a,EAAAC,MAAM2V,UACvB,GAAI26C,EAAG71C,KAAK1a,EAAAC,MAAM4T,MAAO,CACvB,GAAI08C,EAAG71C,KAAK1a,EAAAC,MAAMkY,eAAgB,CAChC/1C,EAAO7W,EAAAuF,KAAK+0C,8BAA8B0qD,EAAG7+D,aAAc6+D,EAAG5nG,SAC9D,IAAI2oC,EAAM/lC,EAAAuF,KAAK42C,sBAAsB,KAAMtlC,EAAMulC,EAAW4oD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAC9E1rC,EAAeja,OAAOspC,EAAIrvB,cAC1B1Y,EAASgnG,EAAGhnG,OAQhB,OAPKA,EAAOkkD,cAAalkD,EAAOkkD,YAAc,IAAI1oD,KAClDwE,EAAOkkD,YAAY76C,IAAIqP,GAClBrkB,KAAKqyG,QAAQ79F,IAAI6P,KACpBrkB,KAAKoyG,QAAQ1lG,KAAK2X,GAClBrkB,KAAKqyG,QAAQr9F,IAAIqP,IAEnBsuF,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeiZ,wBACfivF,EAAG5nG,cAIP/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,aAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGhB,OAAO,MAGTonG,EAAAlwG,UAAA03G,kBAAA,SACEhH,GAKA,GAAIA,EAAG91C,iBAAkB,CACvB,IAAIvpD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrE6uG,EAA4C,KAChD,GAAIjH,EAAG71C,KAAK1a,EAAAC,MAAMiT,IAAK,CACrB,IAAIq9C,EAAG91C,eAAeza,EAAAgT,mBAAmB+G,QAOvC,OAJAn8D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KANP6uG,EAAejsG,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAS3E,OAAO4C,EAAAuF,KAAKu3C,mBACVn3C,EACAsmG,EACAA,EACIx3D,EAAAzmC,MAAMhP,KAAK2G,EAAWvI,MAAO6uG,EAAa7uG,OAC1CuI,EAAWvI,OAQnB,OALE/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGA,MAGTonG,EAAAlwG,UAAAkyG,wBAAA,SACExB,EACAE,EACAK,EACAC,GAKA,IAAIvyG,EAAO+xG,EAAGt1C,iBACVtyD,EAAQ4nG,EAAG5nG,QACX2oC,EAAM/lC,EAAAuF,KAAK42C,sBAAsB,CACnCn8C,EAAAuF,KAAKu3C,mBACH98C,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACtC4C,EAAAuF,KAAKE,2BAA2B,UAAWu/F,EAAG5nG,MAAMmoG,EAAcC,IAClEpoG,IAED,MAAM,EAAO4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEtC,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAA+xG,YAAA,SACErB,GAOA,IAAIE,EAAWF,EAAG54C,SACdj7C,EAAsC,KACtC+F,EAA6C,KAC7Cg1F,GAAW,EACf,GAAIlH,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAEhB,IADA78C,EAAU,IAAI7X,OACN0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIt9C,EAASte,KAAK85G,uBAAuBnH,GACzC,IAAKr0F,EAAQ,OAAO,KAEpB,GADAQ,EAAQpS,KAAK4R,IACRq0F,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YAChB,MAMA,OAJA57D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,WAIR,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAM2V,UAAW,CAClC,IAAI26C,EAAG71C,KAAK1a,EAAAC,MAAMiT,IAehB,OAJAt1D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,MAEP,KAdP,IAAI4nG,EAAG91C,iBAOL,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KANP8Z,EAAgBlX,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,cAevE,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAMM,WAAYP,EAAAgT,mBAAmBgH,QAAS,CAC/D,IAAIx7D,EAAO+xG,EAAGt1C,iBACVtyD,EAAQ4nG,EAAG5nG,QAQf,GAPA+T,EAAU,CACRnR,EAAAuF,KAAKi4C,wBACHx9C,EAAAuF,KAAKE,2BAA2B,UAAWrI,GAC3C4C,EAAAuF,KAAKE,2BAA2BxS,EAAMmK,GACtCA,IAGA4nG,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAMhB,OAJA9uD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfsxF,EAAG5nG,SAEE,UAGT8uG,GAAW,EAGb,GAAIA,GAAYlH,EAAG71C,KAAK1a,EAAAC,MAAM4T,MAAO,CACnC,GAAI08C,EAAG71C,KAAK1a,EAAAC,MAAMkY,eAAgB,CAChC,IAAI/1C,EAAO7W,EAAAuF,KAAK+0C,8BAA8B0qD,EAAG7+D,aAAc6+D,EAAG5nG,SAC9D2oC,OAAG,EACH7uB,GACFza,QAAQ0U,GACR40B,EAAM/lC,EAAAuF,KAAKg4C,kCAAkCrmC,EAAeL,EAAMmuF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAExFrc,EAAM/lC,EAAAuF,KAAK63C,sBAAsBjsC,EAAS0F,EAAMmuF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExE,IAAI1rC,EAAeqvB,EAAIrvB,aAMvB,OALKrkB,KAAKqyG,QAAQ79F,IAAI6P,KACpBrkB,KAAKoyG,QAAQ1lG,KAAK2X,GAClBrkB,KAAKqyG,QAAQr9F,IAAIqP,IAEnBsuF,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeiZ,wBACfivF,EAAG5nG,cAIP/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,QAGhB,OAAO,MAGTonG,EAAAlwG,UAAA63G,uBAAA,SACEnH,GAKA,GAAIA,EAAG91C,eAAeza,EAAAgT,mBAAmB+G,QAAS,CAChD,IAAI7oD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrE6uG,EAA4C,KAChD,GAAIjH,EAAG71C,KAAK1a,EAAAC,MAAMiT,IAAK,CACrB,IAAIq9C,EAAG91C,iBAOL,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KANP6uG,EAAejsG,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAS3E,OAAO4C,EAAAuF,KAAKi4C,wBACV73C,EACAsmG,EACAA,EACIx3D,EAAAzmC,MAAMhP,KAAK2G,EAAWvI,MAAO6uG,EAAa7uG,OAC1CuI,EAAWvI,OAQnB,OALE/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGA,MAGTonG,EAAAlwG,UAAA8xG,kBAAA,SACEpB,EACAE,GAKA,GAAIF,EAAG91C,iBAAkB,CACvB,IAAI+8C,EAAejsG,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAC3E,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAM0W,QAAS,CACzB,GAAI45C,EAAG91C,iBAAkB,CACvB,IAAIvpD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SACrE2oC,EAAM/lC,EAAAuF,KAAKq3C,4BAA4Bj3C,EAAYsmG,EAAcjH,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAE3F,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,cAIP/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAA2xG,eAAA,SACEjB,EACAoH,QAAA,IAAAA,OAAA,GAKA,IAAI/8C,EAAQ21C,EAAG51C,OAEXvmD,EAA8B,KAClC,OAFYm8F,EAAG16F,QAGb,KAAKmqC,EAAAC,MAAMiO,MACT95C,EAAYxW,KAAKg6G,WAAWrH,GAC5B,MAEF,KAAKvwD,EAAAC,MAAM5iC,MACTjJ,EAAYxW,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAYod,MAAO,KAAMkzF,EAAG54C,UAC/D,MAEF,KAAK3X,EAAAC,MAAMkO,SACT/5C,EAAYxW,KAAKi6G,cAActH,GAC/B,MAEF,KAAKvwD,EAAAC,MAAMmO,GACTh6C,EAAYxW,KAAKk6G,iBAAiBvH,GAClC,MAEF,KAAKvwD,EAAAC,MAAMwO,IACTr6C,EAAYxW,KAAKm6G,kBAAkBxH,GACnC,MAEF,KAAKvwD,EAAAC,MAAM2O,GACTx6C,EAAYxW,KAAKo6G,iBAAiBzH,GAClC,MAEF,KAAKvwD,EAAAC,MAAMiU,IACT9/C,EAAYxW,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAYi0D,IAAK,KAAMq8C,EAAG54C,UAC7D,MAEF,KAAK3X,EAAAC,MAAM0U,IACTvgD,EAAYxW,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAY4Q,KAAM,KAAM0/F,EAAG54C,UAC9D,MAEF,KAAK3X,EAAAC,MAAMsZ,UACTnlD,EAAYxW,KAAK43G,oBAAoBjF,EAAIoH,GACzC,MAEF,KAAK33D,EAAAC,MAAM6O,OACL6oD,GACF/5G,KAAKqN,MACHI,EAAAhD,eAAe4vG,2DACf1H,EAAG5nG,SAGPyL,EAAYxW,KAAKk2G,YAAYvD,GAC7B,MAEF,KAAKvwD,EAAAC,MAAMiZ,UACT,OAAO3tD,EAAAuF,KAAKs2C,qBAAqBmpD,EAAG5nG,MAAM4nG,EAAG54C,WAE/C,KAAK3X,EAAAC,MAAM+O,OACT56C,EAAYxW,KAAKs6G,qBAAqB3H,GACtC,MAEF,KAAKvwD,EAAAC,MAAMgP,MACT76C,EAAYxW,KAAKu6G,oBAAoB5H,GACrC,MAEF,KAAKvwD,EAAAC,MAAMiP,IACT96C,EAAYxW,KAAKw6G,kBAAkB7H,GACnC,MAEF,KAAKvwD,EAAAC,MAAMmP,KACTh7C,EAAYxW,KAAKy6G,mBAAmB9H,GACpC,MAEF,KAAKvwD,EAAAC,MAAMoP,MACTj7C,EAAYxW,KAAK06G,oBAAoB/H,GACrC,MAEF,KAAKvwD,EAAAC,MAAMwU,KACT,GAAI87C,EAAGn2C,MAAK,EAAOpa,EAAAgT,mBAAmBgH,SAAWha,EAAAC,MAAMM,WAAY,CACjEnsC,EAAYxW,KAAKi0G,qBAAqBtB,EAAInlG,EAAAnL,YAAY4Q,KAAM,KAAM0/F,EAAG54C,UACrE,MAIJ,QACE44C,EAAGv1C,MAAMJ,GACTxmD,EAAYxW,KAAK26G,yBAAyBhI,GAU9C,OANKn8F,EAIHm8F,EAAGx1C,QAAQH,IAHX21C,EAAGv1C,MAAMJ,GACTh9D,KAAK+yG,cAAcJ,IAIdn8F,GAGT27F,EAAAlwG,UAAA21G,oBAAA,SACEjF,EACAoH,GAOA,IAFA,IAAIlH,EAAWF,EAAG54C,SACdzjD,EAAa,IAAIrP,OACb0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIoB,EAAQ21C,EAAG51C,OACXvmD,EAAYxW,KAAK4zG,eAAejB,EAAIoH,GACxC,GAAKvjG,EAKHm8F,EAAGx1C,QAAQH,GACX1mD,EAAW5J,KAAK8J,OANF,CACd,GAAIm8F,EAAGx7C,OAAS/U,EAAAC,MAAMka,UAAW,OAAO,KACxCo2C,EAAGv1C,MAAMJ,GACTh9D,KAAK+yG,cAAcJ,IAMvB,IAAIj/D,EAAM/lC,EAAAuF,KAAK41C,qBAAqBxyC,EAAYq8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEtE,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAA+3G,WAAA,SACErH,GAKA,IAAIr/F,EAA0C,KAC1Cq/F,EAAGn2C,MAAK,IAASpa,EAAAC,MAAMM,YAAegwD,EAAGz4C,qBAC3Cy4C,EAAG16F,KAAKmqC,EAAAgT,mBAAmBgH,QAC3B9oD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,UAEvE,IAAI2oC,EAAM/lC,EAAAuF,KAAK81C,qBAAqB11C,EAAYq/F,EAAG5nG,SAEnD,OADA4nG,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAg4G,cAAA,SACEtH,GAKA,IAAIr/F,EAA0C,KAC1Cq/F,EAAGn2C,MAAK,IAASpa,EAAAC,MAAMM,YAAegwD,EAAGz4C,qBAC3Cy4C,EAAG16F,KAAKmqC,EAAAgT,mBAAmBgH,QAC3B9oD,EAAa3F,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,UAEvE,IAAI2oC,EAAM/lC,EAAAuF,KAAKk2C,wBAAwB91C,EAAYq/F,EAAG5nG,SAEtD,OADA4nG,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAi4G,iBAAA,SACEvH,GAKA,IAAIE,EAAWF,EAAG54C,SACdvjD,EAAYxW,KAAK4zG,eAAejB,GACpC,IAAKn8F,EAAW,OAAO,KAEvB,GAAIm8F,EAAG71C,KAAK1a,EAAAC,MAAMoP,OAEhB,GAAIkhD,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAI5wB,EAAY7pC,KAAK+1G,gBAAgBpD,GACrC,IAAK9oE,EAAW,OAAO,KAEvB,GAAI8oE,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAAa,CAC7B,IAAIhnB,EAAM/lC,EAAAuF,KAAKo2C,kBAA6B9yC,EAAuBqzB,EAAW8oE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEpG,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,SAGhB,OAAO,MAGTonG,EAAAlwG,UAAA04G,yBAAA,SACEhI,GAKA,IAAI/rE,EAAO5mC,KAAK+1G,gBAAgBpD,GAChC,IAAK/rE,EAAM,OAAO,KAElB,IAAI8M,EAAM/lC,EAAAuF,KAAKy3C,0BAA0B/jB,GAEzC,OADA+rE,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAk4G,kBAAA,SACExH,GAKA,IAAIE,EAAWF,EAAG54C,SAElB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAIrzC,EAAgC,KAEpC,GAAIurF,EAAG71C,KAAK1a,EAAAC,MAAM5iC,OAChB2H,EAAcpnB,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAYod,MAAO,KAAMkzF,EAAG54C,eAC5D,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMiU,KACvBlvC,EAAcpnB,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAYi0D,IAAK,KAAMq8C,EAAG54C,eAC1D,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAM0U,KACvB3vC,EAAcpnB,KAAK0zG,cAAcf,EAAInlG,EAAAnL,YAAY4Q,KAAM,KAAM0/F,EAAG54C,eAE3D,IAAK44C,EAAG71C,KAAK1a,EAAAC,MAAMiZ,cACxBl0C,EAAcpnB,KAAK26G,yBAAyBhI,IAC1B,OAAO,KAG3B,GAAIA,EAAGx7C,OAAS/U,EAAAC,MAAMiZ,UAAW,CAC/B,IAAIzxB,EAAwC,KAC5C,IAAK8oE,EAAG71C,KAAK1a,EAAAC,MAAMiZ,cACjBzxB,EAAY7pC,KAAK26G,yBAAyBhI,IAC1B,OAAO,KAGzB,GAAIA,EAAGx7C,OAAS/U,EAAAC,MAAMiZ,UAAW,CAC/B,IAAI5P,EAAiC,KACrC,IAAKinD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAAa,CAE9B,KADAhP,EAAc1rD,KAAK+1G,gBAAgBpD,IACjB,OAAO,KAEzB,IAAKA,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAKjB,OAJA16D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAIX,IAAIyL,EAAYxW,KAAK4zG,eAAejB,GACpC,OAAKn8F,EAEE7I,EAAAuF,KAAKu4C,mBACVrkC,EACAyiB,EACIA,EAAUG,WACV,KACJ0hB,EACAl1C,EACAm8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MATD,KAavB/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGhB,OAAO,MAGTonG,EAAAlwG,UAAAm4G,iBAAA,SACEzH,GAKA,IAAIE,EAAWF,EAAG54C,SAClB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAI5wB,EAAY7pC,KAAK+1G,gBAAgBpD,GACrC,IAAK9oE,EAAW,OAAO,KACvB,GAAI8oE,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAAa,CAC7B,IAAIlkD,EAAYxW,KAAK4zG,eAAejB,GACpC,IAAKn8F,EAAW,OAAO,KACvB,IAAIokG,EAAkC,KACtC,OAAIjI,EAAG71C,KAAK1a,EAAAC,MAAMyT,SAChB8kD,EAAgB56G,KAAK4zG,eAAejB,IACT,KAEtBhlG,EAAAuF,KAAK23C,kBACVhhB,EACArzB,EACAokG,EACAjI,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGhB,OAAO,MAGTonG,EAAAlwG,UAAAq4G,qBAAA,SACE3H,GAKA,IAAIE,EAAWF,EAAG54C,SAClB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAI5wB,EAAY7pC,KAAK+1G,gBAAgBpD,GACrC,IAAK9oE,EAAW,OAAO,KACvB,GAAI8oE,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAAa,CAC7B,GAAIi4C,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAAY,CAE5B,IADA,IAAIpP,EAAQ,IAAItlD,OACR0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,IAAIi/C,EAAQ76G,KAAK86G,gBAAgBnI,GACjC,IAAKkI,EAAO,OAAO,KACnBtuD,EAAM7/C,KAAiBmuG,GAEzB,IAAInnE,EAAM/lC,EAAAuF,KAAKo5C,sBAAsBziB,EAAW0iB,EAAOomD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAE7E,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGhB,OAAO,MAGTonG,EAAAlwG,UAAA64G,gBAAA,SACEnI,GAGA,IACIr8F,EACAE,EAFAq8F,EAAWF,EAAG54C,SAMlB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMoT,MAAO,CACvB,IAAIhsB,EAAQzpC,KAAK+1G,gBAAgBpD,GACjC,IAAKlpE,EAAO,OAAO,KACnB,GAAIkpE,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CAExB,IADA/kD,EAAa,IAAIrP,MACV0rG,EAAGn2C,QAAUpa,EAAAC,MAAMoT,MAAQk9C,EAAG34C,WAAa5X,EAAAC,MAAMuT,SAAW+8C,EAAG34C,WAAa5X,EAAAC,MAAMuZ,YAAY,CAEnG,KADAplD,EAAYxW,KAAK4zG,eAAejB,IAChB,OAAO,KACvBr8F,EAAW5J,KAAK8J,GAElB,OAAO7I,EAAAuF,KAAKu5C,iBAAiBhjB,EAAOnzB,EAAYq8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEtE/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAMX,GAAI4nG,EAAG71C,KAAK1a,EAAAC,MAAMuT,SAAU,CACjC,GAAI+8C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CAExB,IADA/kD,EAAa,IAAIrP,MACV0rG,EAAGn2C,QAAUpa,EAAAC,MAAMoT,MAAQk9C,EAAG34C,WAAa5X,EAAAC,MAAMuT,SAAW+8C,EAAG34C,WAAa5X,EAAAC,MAAMuZ,YAAY,CAEnG,KADAplD,EAAYxW,KAAK4zG,eAAejB,IAChB,OAAO,KACvBr8F,EAAW5J,KAAK8J,GAElB,OAAO7I,EAAAuF,KAAKu5C,iBAAiB,KAAMn2C,EAAYq8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAErE/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeswG,0BACfpI,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAAs4G,oBAAA,SACE5H,GAKA,IAAIE,EAAWF,EAAG54C,SACd/vB,EAAahqC,KAAK+1G,gBAAgBpD,GACtC,IAAK3oE,EAAY,OAAO,KACxB,IAAI0J,EAAM/lC,EAAAuF,KAAKy5C,qBAAiC3iB,EAAY2oE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAElF,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAu4G,kBAAA,SACE7H,GAQA,IACIxuD,EADA0uD,EAAWF,EAAG54C,SAElB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAAY,CAE5B,IADA,IAAIrlD,EAAa,IAAIrP,OACb0rG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CAEjC,KADAzX,EAAOnkD,KAAK4zG,eAAejB,IAChB,OAAO,KAClBr8F,EAAW5J,KAAgBy3C,GAE7B,IAAI2I,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI2lD,EAAG71C,KAAK1a,EAAAC,MAAMqT,OAAQ,CACxB,IAAKi9C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAKjB,OAJAz6D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAET,IAAK4nG,EAAG91C,iBAKN,OAJA78D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,KAGT,GADA+hD,EAAgBn/C,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,UACnE4nG,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAKjB,OAJA16D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAET,IAAK4nG,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAKjB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAGT,IADAgiD,EAAkB,IACV4lD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CAEjC,KADAzX,EAAOnkD,KAAK4zG,eAAejB,IAChB,OAAO,KAClB5lD,EAAgBrgD,KAAgBy3C,IAGpC,GAAIwuD,EAAG71C,KAAK1a,EAAAC,MAAM2T,SAAU,CAC1B,IAAK28C,EAAG71C,KAAK1a,EAAAC,MAAMsZ,WAKjB,OAJA37D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAGT,IADAiiD,EAAoB,IACZ2lD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CAEjC,KADAzX,EAAOnkD,KAAK4zG,eAAejB,IAChB,OAAO,KAClB3lD,EAAkBtgD,KAAgBy3C,IAGtC,IAAM4I,IAAmBC,EAKvB,OAJAhtD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,SAEP,KAET,IAAI2oC,EAAM/lC,EAAAuF,KAAK25C,mBACbv2C,EACAw2C,EACAC,EACAC,EACA2lD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAOT,OALE1zC,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGT,MAGTonG,EAAAlwG,UAAAgyG,qBAAA,SACEtB,EACA3/F,EACAuN,EACAsyF,GAKA,GAAIF,EAAG91C,iBAAkB,CACvB,IAAIj8D,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,SAC/D+b,EAA6C,KACjD,GAAI6rF,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,CAE3B,KADAzwC,EAAiB9mB,KAAKm2G,oBAAoBxD,IACrB,OAAO,KAC5B3/F,GAASxF,EAAAnL,YAAY8S,QAEvB,GAAIw9F,EAAG71C,KAAK1a,EAAAC,MAAM0W,QAAS,CACzB,IAAI95C,EAAOjf,KAAKy0G,UAAU9B,GAC1B,IAAK1zF,EAAM,OAAO,KAClB,IAAIy0B,EAAM/lC,EAAAuF,KAAKK,sBACb3S,EACAkmB,EACA7H,EACAsB,EACAvN,EACA2/F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGxB,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAGP,OAAO,MAGTonG,EAAAlwG,UAAAw4G,mBAAA,SACE9H,GAKA,IAAIE,EAAWF,EAAG54C,SACd/vB,EAAahqC,KAAK+1G,gBAAgBpD,EAAE,IACxC,IAAK3oE,EAAY,OAAO,KACxB,IAAI0J,EAAM/lC,EAAAuF,KAAKo6C,oBAAoBtjB,EAAY2oE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAErE,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,GAGTy+D,EAAAlwG,UAAAy4G,oBAAA,SACE/H,GAKA,IAAIE,EAAWF,EAAG54C,SAClB,GAAI44C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WAAY,CAC5B,IAAIzwB,EAAahqC,KAAK+1G,gBAAgBpD,GACtC,IAAK3oE,EAAY,OAAO,KACxB,GAAI2oE,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAAa,CAC7B,IAAIlkD,EAAYxW,KAAK4zG,eAAejB,GACpC,IAAKn8F,EAAW,OAAO,KACvB,IAAIk9B,EAAM/lC,EAAAuF,KAAKs6C,qBAAqBxjB,EAAYxzB,EAAWm8F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEjF,OADA4iD,EAAG71C,KAAK1a,EAAAC,MAAMiZ,WACP5nB,EAEP1zC,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,UAIhB/K,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAGhB,OAAO,MAMTonG,EAAAlwG,UAAA+4G,qBAAA,SACErI,GAGA,IAAIx7C,EAAQw7C,EAAG16F,KAAKmqC,EAAAgT,mBAAmBgH,QACnCy2C,EAAWF,EAAG54C,SACdkhD,EA8sBR,SAAkCxkG,GAChC,OAAQA,GACN,KAAK2rC,EAAAC,MAAMiV,YAAa,SACxB,KAAKlV,EAAAC,MAAM4U,MAAO,SAClB,KAAK7U,EAAAC,MAAMsW,YACX,KAAKvW,EAAAC,MAAMuW,MACX,KAAKxW,EAAAC,MAAMjyC,KACX,KAAKgyC,EAAAC,MAAM/xC,MACX,KAAK8xC,EAAAC,MAAM8V,UACX,KAAK/V,EAAAC,MAAM+V,YACX,KAAKhW,EAAAC,MAAMyU,OACX,KAAK1U,EAAAC,MAAMmP,KACX,KAAKpP,EAAAC,MAAMwT,OAAQ,UACnB,KAAKzT,EAAAC,MAAM6M,IAAK,UAElB,SA7tBmBgsD,CAAyB/jD,GAC1C,GAAc,GAAV8jD,EAA+B,CACjC,IAAIvyD,OAAO,EAKX,OAAIyO,GAAS/U,EAAAC,MAAM6M,KACjBxG,EAAU1oD,KAAK+1G,gBAAgBpD,EAAE,KAE7BjqD,EAAQjyC,MAAQ9I,EAAA+I,SAASmsC,KACpBl1C,EAAAuF,KAAK6zC,oBACO2B,EAAS1e,WACT0e,EAASz8B,cACTy8B,EAAS1lC,UAC1B2vF,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAGxB/vD,KAAKqN,MACHI,EAAAhD,eAAe4W,wBACfsxF,EAAG5nG,SAGA,MAdc,MAgBrB29C,EAAU1oD,KAAK+1G,gBAAgBpD,EAAIsI,KAKjC9jD,GAAS/U,EAAAC,MAAM8V,WAAahB,GAAS/U,EAAAC,MAAM+V,aAE3C1P,EAAQjyC,MAAQ9I,EAAA+I,SAASisC,YACzB+F,EAAQjyC,MAAQ9I,EAAA+I,SAASosC,eACzB4F,EAAQjyC,MAAQ9I,EAAA+I,SAASssC,gBAEzBhjD,KAAKqN,MACHI,EAAAhD,eAAe0wG,0FACfzyD,EAAQ39C,OAIP4C,EAAAuF,KAAK01C,4BAA4BuO,EAAOzO,EAASiqD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAhBvD,KAmBzB,IAAInpB,EAA0B,KAC9B,OAAQuwB,GAEN,KAAK/U,EAAAC,MAAME,KAAM,OAAO50C,EAAAuF,KAAK+zC,qBAAqB0rD,EAAG5nG,SACrD,KAAKq3C,EAAAC,MAAMG,KAAM,OAAO70C,EAAAuF,KAAKq1C,qBAAqBoqD,EAAG5nG,SACrD,KAAKq3C,EAAAC,MAAMI,MAAO,OAAO90C,EAAAuF,KAAKkzC,sBAAsBusD,EAAG5nG,SAIvD,KAAKq3C,EAAAC,MAAMoY,UAGT,GAAIk4C,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAChB,OAAO16D,KAAK83G,8BACVnF,EACAhlG,EAAAuF,KAAK0xC,gCAAgC+tD,EAAG5nG,MAAM8nG,IAC9C,GAAE,GAIN,IAAI71C,EAAQ21C,EAAG51C,OACXq+C,GAAQ,EACZ,GACE,OAAQzI,EAAG16F,KAAKmqC,EAAAgT,mBAAmBgH,SAGjC,KAAKha,EAAAC,MAAMiV,YAET,OADAq7C,EAAGv1C,MAAMJ,GACFh9D,KAAK63G,wBAAwBlF,GAGtC,KAAKvwD,EAAAC,MAAMM,WAET,OADAgwD,EAAGt1C,iBACKs1C,EAAG16F,QAGT,KAAKmqC,EAAAC,MAAMqY,WACT,IACGi4C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,SACds3C,EAAG71C,KAAK1a,EAAAC,MAAMkZ,oBACf,CACA6/C,GAAQ,EACR,MAKJ,KAAKh5D,EAAAC,MAAMgZ,MAET,OADAs3C,EAAGv1C,MAAMJ,GACFh9D,KAAK63G,wBAAwBlF,GAGtC,KAAKvwD,EAAAC,MAAMmZ,SACT,GACEm3C,EAAG71C,KAAK1a,EAAAC,MAAMgZ,QACds3C,EAAG71C,KAAK1a,EAAAC,MAAMyM,QACd6jD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAGd,OADAi4C,EAAGv1C,MAAMJ,GACFh9D,KAAK63G,wBAAwBlF,GAEtCyI,GAAQ,EACR,MAEF,KAAKh5D,EAAAC,MAAMyM,MACT,MAIF,QACEssD,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAzI,EAAGv1C,MAAMJ,IAGTp2B,EAAO5mC,KAAK+1G,gBAAgBpD,IAEvBA,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAOZ/sD,EAAAuF,KAAKm0C,8BAA8BzgB,EAAM+rE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OANpE/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MANS,KAWpB,KAAKq3C,EAAAC,MAAMoZ,YAET,IADA,IAAI1W,EAAqB,IAAI99C,OACrB0rG,EAAG71C,KAAK1a,EAAAC,MAAMqZ,eAAe,CACnC,GAAIi3C,EAAGn2C,QAAUpa,EAAAC,MAAMyM,MACrBloB,EAAO,UAGP,KADAA,EAAO5mC,KAAK+1G,gBAAgBpD,EAAI,IACrB,OAAO,KAGpB,GADA5tD,EAAmBr4C,KAAKk6B,IACnB+rE,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMqZ,cAChB,MAMA,OAJA17D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,OAAO4C,EAAAuF,KAAK2xC,6BAA6BE,EAAoB4tD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAGrF,KAAK3N,EAAAC,MAAMsZ,UAKT,IAJA,IAAI0/C,EAAW1I,EAAG54C,SACdhvB,EAAQ,IAAI9jC,MACZsW,EAAS,IAAItW,MACbrG,OAAI,GACA+xG,EAAG71C,KAAK1a,EAAAC,MAAMuZ,aAAa,CACjC,GAAK+2C,EAAG91C,iBAWNj8D,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,aAXvC,CACxB,IAAK4nG,EAAG71C,KAAK1a,EAAAC,MAAMkY,eAKjB,OAJAv6D,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfrC,EAAG5nG,SAEE,MAETnK,EAAO+M,EAAAuF,KAAKE,2BAA2Bu/F,EAAG7+D,aAAc6+D,EAAG5nG,UACtD05C,UAAW,EAKlB,GADA1Z,EAAMr+B,KAAK9L,GACP+xG,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAAQ,CACxB,IAAI/5D,EAAQtB,KAAK+1G,gBAAgBpD,EAAI,GACrC,IAAKrxG,EAAO,OAAO,KACnBic,EAAO7Q,KAAKpL,OACP,IAAKV,EAAK6jD,SAOf,OAJAzkD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KANPwS,EAAO7Q,KAAK9L,GAQd,IAAK+xG,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMuZ,YAChB,MAMA,OAJA57D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,OAAO4C,EAAAuF,KAAKi0C,8BAA8Bpc,EAAOxtB,EAAQo1F,EAAG5nG,MAAMswG,EAAU1I,EAAG5iD,MAGjF,KAAK3N,EAAAC,MAAMkV,SACT,IAAIrS,EAASllD,KAAKy0G,UAAU9B,GAC5B,OAAKztD,EACAytD,EAAG71C,KAAK1a,EAAAC,MAAMmV,cAOnB5wB,EAAO5mC,KAAK+1G,gBAAgBpD,EAAE,KAEvBhlG,EAAAuF,KAAK8xC,0BACVr3C,EAAAghD,cAAcmwB,OACdl4C,EACAse,EACAytD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MALN,MAPhB/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MANW,KAiBtB,KAAKq3C,EAAAC,MAAMM,WACT,IAAI24D,EAAiB3I,EAAGt1C,iBACxB,GAAsB,QAAlBi+C,EAA0B,OAAO3tG,EAAAuF,KAAK+zC,qBAAqB0rD,EAAG5nG,SAClE,IAAIuI,EAAa3F,EAAAuF,KAAKE,2BAA2BkoG,EAAgB3I,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MACvF,OAAI4iD,EAAGn2C,MAAK,IAASpa,EAAAC,MAAMkZ,oBAAuBo3C,EAAGz4C,mBAiB9C5mD,EAhBEtT,KAAK83G,8BACVnF,EACAhlG,EAAAuF,KAAK0xC,gCAAgC+tD,EAAG5nG,MAAM8nG,IAC9C,CACEllG,EAAAuF,KAAK4wC,gBACHxwC,EACA3F,EAAAuF,KAAKM,kBAAkBF,EAAWvI,MAAM87D,OACxC,KACAl5D,EAAAogD,cAAc6H,QACdtiD,EAAWvI,QAEd,EAED8nG,GAKN,KAAKzwD,EAAAC,MAAMiN,KACT,OAAO3hD,EAAAuF,KAAKm1C,qBAAqBsqD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEzD,KAAK3N,EAAAC,MAAMz/B,YACT,OAAOjV,EAAAuF,KAAK6yC,4BAA4B4sD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEhE,KAAK3N,EAAAC,MAAMY,MAOT,OANI0vD,EAAGn2C,QAAUpa,EAAAC,MAAMwY,KAAO83C,EAAG34C,WAAa5X,EAAAC,MAAMoY,WAClDz6D,KAAKqN,MACHI,EAAAhD,eAAe8wG,6DACf5I,EAAG5nG,SAGA4C,EAAAuF,KAAKi1C,sBAAsBwqD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAE1D,KAAK3N,EAAAC,MAAMkY,cACT,OAAO5sD,EAAAuF,KAAK+0C,8BAA8B0qD,EAAG7+D,aAAc6+D,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAEnF,KAAK3N,EAAAC,MAAM+Y,eACT,OAAOztD,EAAAuF,KAAK2zC,+BAA+B8rD,EAAGz0C,cAAey0C,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAErF,KAAK3N,EAAAC,MAAMuY,aACT,OAAOjtD,EAAAuF,KAAKozC,6BAA6BqsD,EAAGpzC,YAAaozC,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAIjF,KAAK3N,EAAAC,MAAM4V,MACT,IAAIujD,EAAgB7I,EAAG90C,oBACvB,OAAK80C,EAAG71C,KAAK1a,EAAAC,MAAM4V,OAOZtqD,EAAAuF,KAAKu0C,8BACV+zD,EACA7I,EAAG30C,kBACH20C,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OATtB/vD,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAQX,KAAKq3C,EAAAC,MAAM1jC,SACT,OAAO3e,KAAK63G,wBAAwBlF,GAEtC,KAAKvwD,EAAAC,MAAMxjC,MACT,OAAO7e,KAAKk4G,qBAAqBvF,GAEnC,QAYE,OAXIx7C,GAAS/U,EAAAC,MAAMka,UACjBv8D,KAAKqN,MACHI,EAAAhD,eAAegzD,uBACfk1C,EAAG5nG,MAAM8nG,IAGX7yG,KAAKqN,MACHI,EAAAhD,eAAegxG,oBACf9I,EAAG5nG,SAGA,OAKbonG,EAAAlwG,UAAAy5G,qCAAA,SACE/I,GAKA,IAAI31C,EAAQ21C,EAAG51C,OACf,IAAK41C,EAAG71C,KAAK1a,EAAAC,MAAMkV,UAAW,OAAO,KACrC,IAAItrC,EAAmC,KACvC,EAAG,CACD,GAAI0mF,EAAGn2C,SAAWpa,EAAAC,MAAMmV,YACtB,MAEF,IAAIv4C,EAAOjf,KAAKy0G,UAAU9B,GAAI,GAAM,GACpC,IAAK1zF,EAEH,OADA0zF,EAAGv1C,MAAMJ,GACF,KAEJ/wC,EACAA,EAAcvf,KAAKuS,GADJgN,EAAgB,CAAEhN,SAE/B0zF,EAAG71C,KAAK1a,EAAAC,MAAMyM,QACvB,OAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMmV,cAAgBm7C,EAAG71C,KAAK1a,EAAAC,MAAMoY,WACvCxuC,GAET0mF,EAAGv1C,MAAMJ,GACF,OAGTm1C,EAAAlwG,UAAAwzG,eAAA,SACE9C,GAMA,IADA,IAAIzuD,EAAO,IAAIj9C,OACP0rG,EAAG71C,KAAK1a,EAAAC,MAAMqY,aAAa,CACjC,IAAI9zB,EAAO5mC,KAAK+1G,gBAAgBpD,EAAI,GACpC,IAAK/rE,EAAM,OAAO,KAElB,GADAsd,EAAKx3C,KAAKk6B,IACL+rE,EAAG71C,KAAK1a,EAAAC,MAAMyM,OAAQ,CACzB,GAAI6jD,EAAG71C,KAAK1a,EAAAC,MAAMqY,YAChB,MAMA,OAJA16D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,MAIb,OAAOm5C,GAGTiuD,EAAAlwG,UAAA8zG,gBAAA,SACEpD,EACAsI,QAAA,IAAAA,MAAA,GAEA7wG,OAAiB,GAAV6wG,GAEP,IAAIr0E,EAAO5mC,KAAKg7G,qBAAqBrI,GACrC,IAAK/rE,EAAM,OAAO,KAOlB,IAJA,IACIuwB,EAEAwkD,EAHA9I,GAFJjsE,EAAO5mC,KAAK47G,yBAAyBjJ,EAAI/rE,IAErB77B,MAAMqB,MAEtB6L,EAA0B,MAG3B0jG,EAAiBE,EAAoB1kD,EAAQw7C,EAAGn2C,UAAYy+C,GAC7D,CAEA,OADAtI,EAAG16F,OACKk/C,GAEN,KAAK/U,EAAAC,MAAMiT,GACT,IAAIpQ,EAASllD,KAAKy0G,UAAU9B,GAC5B,IAAKztD,EAAQ,OAAO,KACpBte,EAAOj5B,EAAAuF,KAAK8xC,0BACVr3C,EAAAghD,cAAc2G,GACd1uB,EACAse,EACAytD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAEF,KAAK3N,EAAAC,MAAMsW,YACT/xB,EAAOj5B,EAAAuF,KAAK8xC,0BACVr3C,EAAAghD,cAAc4V,QACd39B,EACA,KACA+rE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAGF,KAAK3N,EAAAC,MAAM2M,WACT,IAAIrI,EAAS3mD,KAAKy0G,UAAU9B,GAC5B,IAAKhsD,EAAQ,OAAO,KACpB/f,EAAOj5B,EAAAuF,KAAKwzC,2BACV9f,EACA+f,EACAgsD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAGF,KAAK3N,EAAAC,MAAMoZ,YAET,KADAxjD,EAAOjY,KAAK+1G,gBAAgBpD,IACjB,OAAO,KAClB,IAAKA,EAAG71C,KAAK1a,EAAAC,MAAMqZ,cAKjB,OAJA17D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAET67B,EAAOj5B,EAAAuF,KAAK+yC,8BACVrf,EACA3uB,EACA06F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAGF,KAAK3N,EAAAC,MAAM8V,UACX,KAAK/V,EAAAC,MAAM+V,YAEPxxB,EAAKnwB,MAAQ9I,EAAA+I,SAASisC,YACtB/b,EAAKnwB,MAAQ9I,EAAA+I,SAASosC,eACtBlc,EAAKnwB,MAAQ9I,EAAA+I,SAASssC,gBAEtBhjD,KAAKqN,MACHI,EAAAhD,eAAe0wG,0FACfv0E,EAAK77B,OAGT67B,EAAOj5B,EAAAuF,KAAKu1C,6BACV0O,EACAvwB,EACA+rE,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAGF,KAAK3N,EAAAC,MAAMmZ,SACT,IAAI1T,EAAS9nD,KAAK+1G,gBAAgBpD,GAClC,IAAK7qD,EAAQ,OAAO,KACpB,IAAK6qD,EAAG71C,KAAK1a,EAAAC,MAAMgZ,OAKjB,OAJAr7D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEP,KAET,IAAIg9C,EAAS/nD,KAAK+1G,gBAAgBpD,EAAIsI,EAAU,EAC5C,EACD,GAEH,IAAKlzD,EAAQ,OAAO,KACpBnhB,EAAOj5B,EAAAuF,KAAK20C,wBACVjhB,EACAkhB,EACAC,EACA4qD,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAGF,KAAK3N,EAAAC,MAAMyM,MACT,IAAIgtD,EAA2B,CAAEl1E,GACjC,EAAG,CAED,KADAA,EAAO5mC,KAAK+1G,gBAAgBpD,EAAI,IACrB,OAAO,KAClBmJ,EAAWpvG,KAAKk6B,SACT+rE,EAAG71C,KAAK1a,EAAAC,MAAMyM,QACvBloB,EAAOj5B,EAAAuF,KAAK0yC,sBAAsBk2D,EAAYnJ,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MACpE,MAEF,QAGE,GAAIoH,GAAS/U,EAAAC,MAAMwY,IAAK,CACtB,GAAI83C,EAAG91C,iBACL5kD,EAAOtK,EAAAuF,KAAKE,2BAA2Bu/F,EAAGt1C,iBAAkBs1C,EAAG5nG,cAO/D,KALAkN,EAAOjY,KAAK+1G,gBAAgBpD,EAC1BoJ,EAAmB5kD,GACfwkD,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAI1jG,EAAKxB,MAAQ9I,EAAA+I,SAASisC,WACxB/b,EAAOj5B,EAAAuF,KAAKq0C,+BACV3gB,EACsB3uB,EACtB06F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,UAEnB,IAAI93C,EAAKxB,MAAQ9I,EAAA+I,SAASmsC,KAQ/B,OAJA7iD,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACf/8F,EAAKlN,OAEA,KANP,KADA67B,EAAO5mC,KAAKg8G,iBAAiBrJ,EAAIE,EAAUjsE,EAAsB3uB,IACtD,OAAO,UAUf,CAML,KALAA,EAAOjY,KAAK+1G,gBAAgBpD,EAC1BoJ,EAAmB5kD,GACfwkD,EACAA,EAAiB,IAEZ,OAAO,KAClB/0E,EAAOj5B,EAAAuF,KAAKkyC,uBAAuB+R,EAAOvwB,EAAM3uB,EAAM06F,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,OAKlFnpB,EAAO5mC,KAAK47G,yBAAyBjJ,EAAI/rE,GAE3C,OAAOA,GAGDurE,EAAAlwG,UAAA+5G,iBAAR,SACErJ,EACAE,EACAjsE,EACApmC,GAEA,IAAIy7G,EAASz7G,EAAKwpC,WAClB,OAAQiyE,EAAOxlG,MACb,KAAK9I,EAAA+I,SAASisC,WACZniD,EAAKwpC,WAAar8B,EAAAuF,KAAKq0C,+BACrB3gB,EACsBq1E,EACtBtJ,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,MAExB,MAEF,KAAKpiD,EAAA+I,SAASmsC,KACZ,IAAIq5D,EAAQl8G,KAAKg8G,iBAAiBrJ,EAAIE,EAAUjsE,EAAsBq1E,GACtE,IAAKC,EAAO,OAAO,KACnB17G,EAAKwpC,WAAakyE,EAClB17G,EAAKuK,MAAQ4nG,EAAG5nG,MAAM8nG,EAAUF,EAAG5iD,KACnC,MAEF,QAKE,OAJA/vD,KAAKqN,MACHI,EAAAhD,eAAeuqG,oBACfx0G,EAAKuK,OAEA,KAGX,OAAOvK,GAGD2xG,EAAAlwG,UAAA25G,yBAAR,SACEjJ,EACA/rE,GAEA,GAAIj5B,EAAA+0C,eAAe9b,EAAKnwB,MAEtB,IADA,IAAIwV,EAAmC,KAErC0mF,EAAG71C,KAAK1a,EAAAC,MAAMoY,YAEd9sD,EAAAu1C,sBAAsBtc,EAAKnwB,OAA6E,QAAnEwV,EAAgBjsB,KAAK07G,qCAAqC/I,KAC/F,CACA,IAAIzuD,EAAOlkD,KAAKy1G,eAAe9C,GAC/B,IAAKzuD,EAAM,MACXtd,EAAOj5B,EAAAuF,KAAKqyC,qBACV3e,EACA3a,EACAi4B,EACAyuD,EAAG5nG,MAAM67B,EAAK77B,MAAMqB,MAAOumG,EAAG5iD,MAIpC,OAAOnpB,GAITurE,EAAAlwG,UAAA8wG,cAAA,SAAcJ,GAGZ,IAFAA,EAAGn2C,MAAK,GACJm2C,EAAGz4C,oBAAoBy4C,EAAG16F,SAC3B,CACD,IAAI+hD,EAAY24C,EAAGn2C,MAAK,GACxB,GACExC,GAAa5X,EAAAC,MAAMka,WACnBvC,GAAa5X,EAAAC,MAAMiZ,UACnB,CACAq3C,EAAG16F,OACH,MAEF,GAAI06F,EAAGz4C,mBAAoB,MAC3B,OAAQy4C,EAAG16F,QACT,KAAKmqC,EAAAC,MAAMM,WACTgwD,EAAGt1C,iBACH,MAEF,KAAKjb,EAAAC,MAAMkY,cACTo4C,EAAG7+D,aACH,MAEF,KAAKsO,EAAAC,MAAM+Y,eACTu3C,EAAGz0C,cACH,MAEF,KAAK9b,EAAAC,MAAMuY,aACT+3C,EAAGpzC,YACH,MAEF,KAAKnd,EAAAC,MAAMsZ,UACT37D,KAAKm8G,UAAUxJ,MAQvBR,EAAAlwG,UAAAk6G,UAAA,SAAUxJ,GAER,IAAIyJ,EAAQ,EACRhB,GAAQ,EACZ,GACE,OAAQzI,EAAG16F,QACT,KAAKmqC,EAAAC,MAAMka,UACTv8D,KAAKqN,MACHI,EAAAhD,eAAeywD,YACfy3C,EAAG5nG,QAAS,KAEdqwG,GAAQ,EACR,MAEF,KAAKh5D,EAAAC,MAAMsZ,YACPygD,EACF,MAEF,KAAKh6D,EAAAC,MAAMuZ,aACPwgD,IACUhB,GAAQ,GACpB,MAEF,KAAKh5D,EAAAC,MAAMM,WACTgwD,EAAGt1C,iBACH,MAEF,KAAKjb,EAAAC,MAAMkY,cACTo4C,EAAG7+D,aACH,MAEF,KAAKsO,EAAAC,MAAM+Y,eACTu3C,EAAGz0C,cACH,MAEF,KAAK9b,EAAAC,MAAMuY,aACT+3C,EAAGpzC,mBAIA67C,IAEbjJ,EA3tHA,CAA4B1kG,EAAAX,mBA2wH5B,SAAS+uG,EAAoBplG,GAC3B,OAAQA,GACN,KAAK2rC,EAAAC,MAAMyM,MAAO,SAClB,KAAK1M,EAAAC,MAAM0W,OACX,KAAK3W,EAAAC,MAAM2W,YACX,KAAK5W,EAAAC,MAAM4W,aACX,KAAK7W,EAAAC,MAAM8W,yBACX,KAAK/W,EAAAC,MAAM6W,gBACX,KAAK9W,EAAAC,MAAM+W,aACX,KAAKhX,EAAAC,MAAMgX,eACX,KAAKjX,EAAAC,MAAMiX,yBACX,KAAKlX,EAAAC,MAAMkX,+BACX,KAAKnX,EAAAC,MAAMmX,2CACX,KAAKpX,EAAAC,MAAMoX,iBACX,KAAKrX,EAAAC,MAAMsX,aACX,KAAKvX,EAAAC,MAAMqX,WAAY,SACvB,KAAKtX,EAAAC,MAAMmZ,SAAU,SACrB,KAAKpZ,EAAAC,MAAMyW,QAAS,SACpB,KAAK1W,EAAAC,MAAMwW,oBAAqB,SAChC,KAAKzW,EAAAC,MAAMoW,IAAK,SAChB,KAAKrW,EAAAC,MAAMqW,MAAO,SAClB,KAAKtW,EAAAC,MAAMmW,UAAW,UACtB,KAAKpW,EAAAC,MAAMsV,cACX,KAAKvV,EAAAC,MAAMuV,mBACX,KAAKxV,EAAAC,MAAMwV,qBACX,KAAKzV,EAAAC,MAAMyV,0BAA2B,UACtC,KAAK1V,EAAAC,MAAMiT,GACX,KAAKlT,EAAAC,MAAM8T,GACX,KAAK/T,EAAAC,MAAM2M,WACX,KAAK5M,EAAAC,MAAMkV,SACX,KAAKnV,EAAAC,MAAMmV,YACX,KAAKpV,EAAAC,MAAMoV,gBACX,KAAKrV,EAAAC,MAAMqV,mBAAoB,UAC/B,KAAKtV,EAAAC,MAAMgW,kBACX,KAAKjW,EAAAC,MAAMiW,wBACX,KAAKlW,EAAAC,MAAMkW,oCAAqC,UAChD,KAAKnW,EAAAC,MAAMjyC,KACX,KAAKgyC,EAAAC,MAAM/xC,MAAO,UAClB,KAAK8xC,EAAAC,MAAM2V,SACX,KAAK5V,EAAAC,MAAM4V,MACX,KAAK7V,EAAAC,MAAM6V,QAAS,UACpB,KAAK9V,EAAAC,MAAM0V,kBAAmB,UAC9B,KAAK3V,EAAAC,MAAM8V,UACX,KAAK/V,EAAAC,MAAM+V,YAAa,UACxB,KAAKhW,EAAAC,MAAMwY,IACX,KAAKzY,EAAAC,MAAM6M,IACX,KAAK9M,EAAAC,MAAMoZ,YACX,KAAKrZ,EAAAC,MAAMsW,YAAa,UAE1B,SAIF,SAASojD,EAAmBtlG,GAC1B,OAAQA,GACN,KAAK2rC,EAAAC,MAAM0W,OACX,KAAK3W,EAAAC,MAAM2W,YACX,KAAK5W,EAAAC,MAAM4W,aACX,KAAK7W,EAAAC,MAAM8W,yBACX,KAAK/W,EAAAC,MAAM6W,gBACX,KAAK9W,EAAAC,MAAM+W,aACX,KAAKhX,EAAAC,MAAMgX,eACX,KAAKjX,EAAAC,MAAMiX,yBACX,KAAKlX,EAAAC,MAAMkX,+BACX,KAAKnX,EAAAC,MAAMmX,2CACX,KAAKpX,EAAAC,MAAMoX,iBACX,KAAKrX,EAAAC,MAAMsX,aACX,KAAKvX,EAAAC,MAAMqX,WACX,KAAKtX,EAAAC,MAAMmZ,SACX,KAAKpZ,EAAAC,MAAM0V,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAj1HPr4D,EAAAyyG,SA8tHb,SAAkBkK,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkB38G,EAAA28G,aAAA38G,EAAA28G,WAAU,2HClzH5Bl8G,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAA0xD,EAAA1xD,EAAA,GAEA0xD,EAAAvtB,OAAOriC,UAAU8xC,OAAS,WAKxB,OAAOuoE,SAASC,WAAWv8G,KAAK8oB,KAAK0zF,aAAoC,IAG3E3qD,EAAAvtB,OAAOriC,UAAU+xC,QAAU,WACzB,OAAOsoE,SAASC,WAAWv8G,KAAK8oB,KAAK2zF,+BCxBvC,SAAAl9F,GAEA,MAAA+8F,EAAA/8F,EAAAm9F,UAAoCv8G,EAAQ,IAG5C,QAAAyB,KAFA2d,EAAA+8F,WAEAA,GACA16G,EAAAsoD,WAAA,cAAAtoD,EAAAsoD,WAAA,gBAAA3qC,EAAA3d,GAAA06G,EAAA16G,IAKA2d,EAAAo9F,kBAAAL,EAAAM,QACAr9F,EAAAs9F,cAAAP,EAAAQ,MACAv9F,EAAAw9F,cAAAT,EAAAU,SACAz9F,EAAA09F,QAAA,SAAAn1E,EAAA0V,GAAqC8+D,EAAAY,OAAAp1E,GAAA0V,GACrCj+B,EAAA49F,OAAA,SAAAr1E,GAA+B,OAAAw0E,EAAAY,OAAAp1E,qCCf/BnoC,EAAAD,QAAAO,oBCAA,SAAAsf,GAEA,IAAA69F,EAAA,oBAAAj9C,qBAAA,IAAA5gD,MAAAxf,KAEAq9G,EAAA73G,WAAA,EACA63G,EAAA33G,eAAA,EACA23G,EAAA13G,gBAAA,EACA03G,EAAAz3G,mBAAA,EACAy3G,EAAAx3G,iBAAA,EACAw3G,EAAAv3G,4BAAA,EACAu3G,EAAAt3G,4BAAA,EACAs3G,EAAAr3G,yBAAA,EACAq3G,EAAAp3G,kBAAA,EACAo3G,EAAAn3G,qBAAA,EAEA,IAAAa,EAAA,IAAAqB,aAAA,GACAzB,EAAA,IAAAsB,YAAAlB,EAAA2L,QA2IA,SAAA4qG,IACAjhG,MAAAkhG,kBACAlhG,MAAAkhG,kBAAAt9G,KAAAq9G,GAEAr9G,KAAA4pE,MAAA5pE,KAAAY,KAAA,KAAAZ,KAAA8K,QAAA,UAAAsR,OAAAwtD,MAWA,SAAA2zC,EAAAzyG,GACA9K,KAAA8K,WAAA,mBACAsR,MAAAkhG,kBACAlhG,MAAAkhG,kBAAAt9G,KAAAu9G,GAEAv9G,KAAA4pE,MAAA5pE,KAAAY,KAAA,KAAAZ,KAAA8K,QAAA,UAAAsR,OAAAwtD,MA7JA7oE,OAAAy8G,iBACAJ,EAAA,YAAA97G,GAA0C,OAAAA,GAAA,QAC1C,CACA0sE,UAAA,CAAgB1sE,OAAA,IAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,IAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,aAAA97G,GAA4C,OAAAA,GAAA,QAC5C,CACA0sE,UAAA,CAAgB1sE,OAAA,MAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,MAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,IAAAA,EAAA,eAAA97G,GAAmE,SAAAA,GACnE,CACA0sE,UAAA,CAAgB1sE,OAAA,WAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,WAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,YAAA97G,GAA0C,WAAAA,GAC1C,CACA0sE,UAAA,CAAgB1sE,MAAA,EAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,IAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,aAAA97G,GAA4C,aAAAA,GAC5C,CACA0sE,UAAA,CAAgB1sE,MAAA,EAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,MAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,IAAAA,EAAA,eAAA97G,GAAmE,OAAAA,IAAA,GACnE,CACA0sE,UAAA,CAAgB1sE,MAAA,EAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,WAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,cAAA97G,GAA8C,QAAAA,GAC9C,CACA0sE,UAAA,CAAgB1sE,OAAA,EAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,OAAA,EAAAm8G,UAAA,KAGhB18G,OAAAy8G,iBACAJ,EAAA,aAAA97G,GAA4C,OAAAiG,KAAAm2G,OAAAp8G,IAC5C,CACAq8G,QAAA,CAAgBr8G,MAAAiG,KAAAm2G,OAAA,cAAAD,UAAA,GAChBzvC,UAAA,CAAgB1sE,MAAAiG,KAAAm2G,OAAA,eAAAD,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAAiG,KAAAm2G,OAAA,cAAAD,UAAA,GAChBG,iBAAA,CAAwBt8G,MAAAiG,KAAAm2G,OAAA,gBAAAD,UAAA,GACxBI,iBAAA,CAAwBv8G,OAAA,SAAAm8G,UAAA,GACxBK,iBAAA,CAAwBx8G,MAAA,SAAAm8G,UAAA,KAGxB18G,OAAAy8G,iBACAJ,EAAA,aAAA97G,GAA4C,OAAAA,GAC5C,CACAq8G,QAAA,CAAgBr8G,MAAA,sBAAAm8G,UAAA,GAChBzvC,UAAA,CAAgB1sE,MAAA,OAAAm8G,UAAA,GAChBhpE,UAAA,CAAgBnzC,MAAA,uBAAAm8G,UAAA,GAChBG,iBAAA,CAAwBt8G,MAAA,wBAAAm8G,UAAA,GACxBI,iBAAA,CAAwBv8G,OAAA,iBAAAm8G,UAAA,GACxBK,iBAAA,CAAwBx8G,MAAA,iBAAAm8G,UAAA,KAGxBL,EAAA,IAAA71G,KAAAw2G,MAEAX,EAAA,aAAA97G,GACA,IAAAZ,EAAA6G,KAAAw2G,MAAAz8G,MACA,OAAAA,EAAA,GAAAZ,KAGA08G,EAAA,gBAAA97G,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA87G,EAAA,cAAA97G,EAAAyrC,GAEA,OAAAzrC,IADAyrC,GAAA,IACAzrC,IAAA,GAAAyrC,GAGAqwE,EAAA,cAAA97G,EAAAyrC,GAEA,OAAAzrC,KADAyrC,GAAA,IACAzrC,GAAA,GAAAyrC,GAGAqwE,EAAA,IAAA71G,KAAA0mF,IAEAmvB,EAAA,IAAA71G,KAAAojE,IAEAyyC,EAAA,IAAA71G,KAAAonF,IAEAyuB,EAAA,KAAA71G,KAAA4qD,KAEAirD,EAAA,MAAA71G,KAAAunF,MAGAsuB,EAAA,iBAAA97G,GACA,WAAAiG,KAAA0mF,IAAA3sF,EAAAiG,KAAA0oF,MAAA3uF,IACA,EAAAiG,KAAAy2G,MAAA,GAAA18G,GAEAiG,KAAAy2G,MAAA18G,IAGA87G,EAAA,gBAAA/yE,EAAAC,EAAAT,GACA,OAAAA,EAAAQ,EAAAC,GAGA8yE,EAAA,KAAA71G,KAAAuoF,KAEAstB,EAAA,MAAA71G,KAAA0oF,MAEAmtB,EAAA,kBAAA1zG,EAAAu0G,GACA,OAAA12G,KAAA0mF,IAAAvkF,GAAAnC,KAAA22G,KAAAD,IAGAb,EAAA,eAAA97G,GACA,IAAAs4D,EAAAt4D,GAAA,WACAu4D,GAAA,SAAAv4D,IAAA,EAIA,OAFAs4D,GADAt4D,EAAAs4D,EAAAC,IACA,WACAA,GAAA,MAAAv4D,IAAA,KAIA87G,EAAA,iBAAA97G,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA+7G,EAAAp7G,UAAAlB,OAAAY,OAAAya,MAAAna,WACAo7G,EAAAp7G,UAAArB,KAAA,mBACAy8G,EAAAp7G,UAAA6I,QAAA,cAEAsyG,EAAA,uBACA,UAAAC,GAWAE,EAAAt7G,UAAAlB,OAAAY,OAAAya,MAAAna,WACAs7G,EAAAt7G,UAAArB,KAAA,iBAEAw8G,EAAA,gBAAAe,EAAArzG,GACA,GAAAqzG,EAAA,OAAAA,EACA,UAAAZ,EAAAzyG,IAGAsyG,EAAA,oBAAA97G,GACA,OAAAA,GAGA0F,OAAA,uBAAAi3C,GACA,OAAAj3C,OAAA42D,aAAA33C,MAAAjf,OAAAi3C,IAGAj3C,OAAA,wBAAAi3C,GACA,OAAAj3C,OAAAo3G,cAAAn4F,MAAAjf,OAAAi3C,IAGAj3C,OAAA/E,UAAAo8G,YACAt9G,OAAAC,eAAAgG,OAAA/E,UAAA,cACAX,MAAA,SAAAg9G,EAAAC,GACA,IAAAC,EAAAx+G,KAAAy+G,MAAAH,GAAA3xG,KAAA4xG,GAEA,OADAD,EAAAnyG,SAAAqyG,EAAAD,EAAAC,EAAAD,GACAC,KAKApB,EAAA,UAAAsB,OAAA1yB,UAEAoxB,EAAA,iBAAA3uG,GACA,uBAAAA,GAGA2uG,EAAA,oBAAA3uG,GACA,UAGA2uG,EAAA,qBAAA3uG,GACA,uBAAAA,GAAA,iBAAAA,GAGA2uG,EAAA,oBAAA3uG,GACA,yBAAAA,GAGA2uG,EAAA,kBAAA3uG,GACA,uBAAAA,gBAAAzH,QAGAo2G,EAAA,QAAAn2G,MAAAslF,QACA6wB,EAAA,qBAAAx2E,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAAz6B,QACAy6B,EAAAz6B,QAAA,GACA5E,KAAA0oF,MAAArpD,EAAAz6B,UAAAy6B,EAAAz6B,QAGAlF,MAAAtF,OAAA,SAAAg9G,GACA,IAAA1gE,EAAA,IAAAh3C,MAAA03G,GAEA,OADA1gE,EAAA9xC,OAAA,EACA8xC,GAGAm/D,EAAA,mBAAAx2E,GACA,gBAAAA,GAGAw2E,EAAA,oBAAAx2E,GACA,UAGAw2E,EAAA,mBAAAx2E,GACA,OAAAA,GAGAw2E,EAAA,cAAA1zG,EAAAu0G,GACA,OAAAv0G,EAAAu0G,GAGAb,EAAA,eAAA1zG,EAAAu0G,GACA,OAAA12G,KAAAm2G,OAAAh0G,EAAAu0G,IAGAb,EAAA,OAAA71G,KAEAxG,OAAAy8G,iBAAAJ,EAAA,QACAwB,WAAA,CAAet9G,MAAA,EAAAm8G,UAAA,GACfoB,WAAA,CAAev9G,MAAA,EAAAm8G,UAAA,GACfqB,QAAA,CACAx9G,MAAA,SAAAoI,GACiB,OAAjB5C,EAAA,GAAA4C,EAAiBq1G,QAAAr4G,EAAA,QAAAgD,QAGjBs1G,OAAA,CACA19G,MAAA,SAAAoI,GACA1J,KAAA4+G,WAAAr3G,KAAA03G,IAAAv1G,GACA1J,KAAA6+G,WAAAt3G,KAAA23G,IAAAx1G,OAKA0zG,EAAA,aACA,IAAA+B,EAAA,IAAAt3G,WAAA,GACAu3G,EAAA,EACA,OACAv6E,SAAAu4E,EAAA,4BAAAxxE,GACA,KAAAA,KAAA,YACA,GAAAwzE,EAAAxzE,EAAAuzE,EAAAhzG,OAAA,CACA,IAAAkzG,EAAAF,GACAA,EAAA,IAAAt3G,WAAAN,KAAAojE,IAAA,MAAAw0C,EAAAhzG,OAAAy/B,EAAA,EAAAuzE,EAAAhzG,UACAgG,IAAAktG,GAEA,IAAAv3E,EAAAs3E,EAEA,OADA,GAAAA,GAAAxzE,KAAAwzE,EAAA,KAAAA,IACAt3E,GAEAw3E,KAAAlC,EAAA,wBAAAnuF,EAAA3tB,EAAAsqC,GACAuzE,EAAAG,KAAAh+G,EAAA2tB,IAAA2c,IAEAnjC,KAAA20G,EAAA,wBAAAt1E,KACAy3E,KAAAnC,EAAA,wBAAAnuF,EAAAD,EAAA4c,GACAuzE,EAAAK,WAAAvwF,EAAAD,IAAA4c,IAEAwxB,MAAAggD,EAAA,2BACA+B,EAAA,IAAAt3G,WAAA,GACAu3G,EAAA,KAxBA,GA6BAhC,EAAA,MAAAA,EAAA,kBAAAt1E,EAAAxmC,EAAAoR,GACAysG,MAAA,EAAAr3E,IAAA,EAAAp1B,IAAApR,GAGA87G,EAAA,KAAAA,EAAA,iBAAAt1E,EAAAp1B,GACA,OAAAysG,MAAA,EAAAr3E,IAAA,EAAAp1B,KAGA0qG,EAAA,2DChUA,SAAA79F,GAAA,MAAAzY,EAAA,IAAAqB,aAAA,GACAtB,EAAA,IAAAqB,aAAApB,EAAA2L,QACArM,EAAA,IAAAuB,WAAAb,EAAA2L,QAEA8M,EAAAkgG,WAAA,SAAAn+G,GAEA,OADAuF,EAAA,GAAAvF,EACA8E,EAAA,IAGAmZ,EAAAmgG,WAAA,SAAAp+G,GAEA,OADA8E,EAAA,GAAA9E,EACAuF,EAAA,IAGA0Y,EAAAogG,WAAA,SAAAr+G,GAEA,OADAwF,EAAA,GAAAxF,EACAiU,QAAAnP,EAAA,GAAAA,EAAA,KAGAmZ,EAAAqgG,WAAA,SAAAt+G,GAGA,OAFA8E,EAAA,GAAA8pC,QAAA5uC,GACA8E,EAAA,GAAA+pC,SAAA7uC,GACAwF,EAAA,wCCtBA,SAAAyY,GAAA,MAAAsgG,EAAAtgG,EAAAsgG,MAA4B1/G,EAAQ,IAEpCof,EAAAklD,SAAAo7C,EAAAC,KAEAvgG,EAAAwgG,QAAAF,EAAAG,IAEAzgG,EAAAhK,QAAA,SAAA0qG,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGA3gG,EAAA2wB,QAAA,SAAA5uC,GACA,OAAAA,EAAA8+G,KAGA7gG,EAAA4wB,SAAA,SAAA7uC,GACA,OAAAA,EAAA++G,MAGA9gG,EAAAo/C,QAAA,SAAA53B,EAAAC,GACA,OAAAD,EAAA/xB,IAAAgyB,IAGAznB,EAAAilD,QAAA,SAAAz9B,EAAAC,GACA,OAAAD,EAAAu5E,IAAAt5E,IAGAznB,EAAA0/C,QAAA,SAAAl4B,EAAAC,GACA,OAAAD,EAAAw5E,IAAAv5E,IAGAznB,EAAAihG,QAAA,SAAAz5E,EAAAC,GACA,OAAAD,EAAA05E,IAAAz5E,IAGAznB,EAAAmhG,UAAA,SAAA35E,EAAAC,GACA,OAAAD,EAAA45E,aAAAF,IAAAz5E,EAAA25E,cAAAC,YAGArhG,EAAAshG,QAAA,SAAA95E,EAAAC,GACA,OAAAD,EAAAz+B,IAAA0+B,IAGAznB,EAAAuhG,UAAA,SAAA/5E,EAAAC,GACA,OAAAD,EAAA45E,aAAAr4G,IAAA0+B,EAAA25E,cAAAC,YAGArhG,EAAAwhG,QAAA,SAAAh6E,EAAAC,GACA,OAAAD,EAAAi6E,IAAAh6E,IAGAznB,EAAA0hG,OAAA,SAAAl6E,EAAAC,GACA,OAAAD,EAAAm6E,GAAAl6E,IAGAznB,EAAA4hG,QAAA,SAAAp6E,EAAAC,GACA,OAAAD,EAAAq6E,IAAAp6E,IAGAznB,EAAAq/C,QAAA,SAAA73B,EAAAC,GACA,OAAAD,EAAAs6E,IAAAr6E,IAGAznB,EAAA+hG,QAAA,SAAAv6E,EAAAC,GACA,OAAAD,EAAAw6E,IAAAv6E,IAGAznB,EAAAoyD,UAAA,SAAA5qC,EAAAC,GACA,OAAAD,EAAAy6E,KAAAx6E,IAGAznB,EAAAkiG,QAAA,SAAAngH,GACA,OAAAA,EAAAogH,OAGAniG,EAAAoiG,OAAA,SAAA56E,EAAAC,GACA,OAAAD,EAAA66E,GAAA56E,IAGAznB,EAAAsiG,OAAA,SAAA96E,EAAAC,GACA,OAAAD,EAAA+6E,GAAA96E,IAGAznB,EAAAkyD,UAAA,SAAAnwE,EAAAy1E,GACA3sE,OAAA2sE,GAAA,IAAAA,IAAA,IACA,IAAAtqC,EAAAozE,EAAAkC,QAAAhrC,EAAA,GACA,OAAAz1E,EAAA0T,IAAAy3B,GAAAu0E,IAAAv0E,EAAAi1E,QAGAniG,EAAAgkD,UAAA,SAAAjiE,GACA,WAAAA,EAAA++G,MAAA/+G,EAAA8+G,KAAA,GAAA9+G,EAAA8+G,KAAAl9G,GAAAuxC,YACA,IAAAnzC,EAAA++G,MAAA/+G,EAAA8+G,KAAAl9G,GAAA8qE,WAAA1sE,EAAA8+G,IAAA,GAGA7gG,EAAAkkD,WAAA,SAAAniE,GACA,WAAAA,EAAA++G,MAAA/+G,EAAA8+G,KAAA,GAAA9+G,EAAA8+G,KAAAj9G,IAAAsxC,YACA,IAAAnzC,EAAA++G,MAAA/+G,EAAA8+G,KAAAj9G,IAAA6qE,WAAA1sE,EAAA8+G,IAAA,GAGA7gG,EAAAokD,WAAA,SAAAriE,GACA,WAAAA,EAAA++G,MAAA/+G,EAAA8+G,KAAA,IACA,IAAA9+G,EAAA++G,MAAA/+G,EAAA8+G,IAAA,GAGA7gG,EAAAikD,UAAA,SAAAliE,GACA,WAAAA,EAAA++G,MAAA/+G,EAAA8+G,KAAA,GAAA9+G,EAAA8+G,KAAA78G,GAAAkxC,WAGAl1B,EAAAmkD,WAAA,SAAApiE,GACA,WAAAA,EAAA++G,MAAA/+G,EAAA8+G,KAAA,GAAA9+G,EAAA8+G,KAAA58G,IAAAixC,WAGAl1B,EAAAqkD,WAAA,SAAAtiE,GACA,WAAAA,EAAA++G,MAGA9gG,EAAAskD,YAAA,SAAAviE,GACA,WAAAA,EAAA++G,OAAA,IAAA/+G,EAAA8+G,KAAA,IAAA9+G,EAAA8+G,MAGA,MAAA4B,EAAAnC,EAAAoC,WAAAp+G,IAAAg6G,kBACAqE,EAAArC,EAAAoC,WAAAp+G,IAAAi6G,kBAEAv+F,EAAA4iG,WAAA,SAAA7gH,GACA,OAAAA,EAAA8gH,IAAAJ,IAAA1gH,EAAA+gH,IAAAH,IAGA,MAAAI,EAAAzC,EAAAoC,WAAAn+G,IAAA+5G,kBACA0E,EAAA1C,EAAAoC,WAAAn+G,IAAAg6G,kBAEAv+F,EAAAijG,WAAA,SAAAlhH,GACA,OAAAA,EAAA8gH,IAAAE,IAAAhhH,EAAA+gH,IAAAE,IAGAhjG,EAAAypE,WAAA,SAAA1nF,GACA,OAAAie,EAAAhY,KAAAm2G,OAAAp8G,EAAAmhH,aAGAljG,EAAA0pE,WAAA,SAAA3nF,GACA,OAAAA,EAAAmhH,YAGAljG,EAAAuwF,cAAA,SAAAxuG,EAAAohH,GACA,OAAAA,EAAAphH,EAAAq/G,aAAAr/G,GAAAoK,SAAA,sCC9IA/L,EAAAD,QAAAmgH,EAKA,IAAA8C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAt+E,OAAA,IAAAz8B,WAAA,CACA,m2BACA,IAASnI,QACR,MAAAwgE,IAcD,SAAA2/C,EAAAO,EAAAC,EAAAqC,GAMA1iH,KAAAogH,IAAA,EAAAA,EAMApgH,KAAAqgH,KAAA,EAAAA,EAMArgH,KAAA0iH,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAlD,EAAA59G,UAAA+gH,WAEAjiH,OAAAC,eAAA6+G,EAAA59G,UAAA,cAAqDX,OAAA,IAkBrDu+G,EAAAiD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAAzgH,EAAAohH,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADA9hH,KAAA,IACAA,EAAA,OACA6hH,EAAAD,EAAA5hH,IAEA6hH,GAEAJ,EAAA5C,EAAA7+G,GAAA,EAAAA,GAAA,WACA8hH,IACAF,EAAA5hH,GAAAyhH,GACAA,IAGAK,GAAA,MADA9hH,GAAA,IACAA,EAAA,OACA6hH,EAAAF,EAAA3hH,IAEA6hH,GAEAJ,EAAA5C,EAAA7+G,IAAA,WACA8hH,IACAH,EAAA3hH,GAAAyhH,GACAA,GAmBA,SAAAd,EAAA3gH,EAAAohH,GACA,GAAAW,MAAA/hH,GACA,OAAAohH,EAAAY,EAAAxD,EACA,GAAA4C,EAAA,CACA,GAAAphH,EAAA,EACA,OAAAgiH,EACA,GAAAhiH,GAAAiiH,EACA,OAAAC,MACK,CACL,GAAAliH,IAAAmiH,EACA,OAAAz1C,EACA,GAAA1sE,EAAA,GAAAmiH,EACA,OAAAhvE,EAEA,OAAAnzC,EAAA,EACA2gH,GAAA3gH,EAAAohH,GAAAgB,MACAvD,EAAA7+G,EAAAqiH,EAAA,EAAAriH,EAAAqiH,EAAA,EAAAjB,GAmBA,SAAAvC,EAAAyD,EAAAC,EAAAnB,GACA,WAAA7C,EAAA+D,EAAAC,EAAAnB,GA5CA7C,EAAAkC,UAkCAlC,EAAAoC,aAsBApC,EAAAM,WASA,IAAA2D,EAAAv8G,KAAAc,IASA,SAAA07G,EAAA9vE,EAAAyuE,EAAAsB,GACA,OAAA/vE,EAAA9nC,OACA,MAAAiQ,MAAA,gBACA,WAAA63B,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAA6rE,EASA,GARA,iBAAA4C,GAEAsB,EAAAtB,EACAA,GAAA,GAEAA,OAEAsB,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAA9hH,EACA,IAAAA,EAAA8xC,EAAAy+D,QAAA,QACA,MAAAt2F,MAAA,mBACA,OAAAja,EACA,OAAA4hH,EAAA9vE,EAAAxnC,UAAA,GAAAi2G,EAAAsB,GAAAN,MAQA,IAHA,IAAAQ,EAAAjC,EAAA6B,EAAAE,EAAA,IAEA3+E,EAAAy6E,EACAz/G,EAAA,EAAmBA,EAAA4zC,EAAA9nC,OAAgB9L,GAAA,GACnC,IAAAurC,EAAArkC,KAAAonF,IAAA,EAAA16C,EAAA9nC,OAAA9L,GACAiB,EAAA6a,SAAA83B,EAAAxnC,UAAApM,IAAAurC,GAAAo4E,GACA,GAAAp4E,EAAA,GACA,IAAAu4E,EAAAlC,EAAA6B,EAAAE,EAAAp4E,IACAvG,IAAAk7E,IAAA4D,GAAAnvG,IAAAitG,EAAA3gH,SAGA+jC,GADAA,IAAAk7E,IAAA2D,IACAlvG,IAAAitG,EAAA3gH,IAIA,OADA+jC,EAAAq9E,WACAr9E,EAoBA,SAAA++E,EAAA5mE,EAAAklE,GACA,uBAAAllE,EACAykE,EAAAzkE,EAAAklE,GACA,iBAAAllE,EACAumE,EAAAvmE,EAAAklE,GAEAvC,EAAA3iE,EAAA4iE,IAAA5iE,EAAA6iE,KAAA,kBAAAqC,IAAAllE,EAAAklE,UAfA7C,EAAAkE,aAyBAlE,EAAAuE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAvC,EA5BA,OAkCAjC,EAAAiC,EAAA,GAMAlC,EAAAC,OAMA,IAAAwD,EAAAvB,EAAA,MAMAlC,EAAAyD,QAMA,IAAAtD,EAAA+B,EAAA,GAMAlC,EAAAG,MAMA,IAAAuE,EAAAxC,EAAA,MAMAlC,EAAA0E,OAMA,IAAAC,EAAAzC,GAAA,GAMAlC,EAAA2E,UAMA,IAAA/vE,EAAA0rE,GAAA,iBAMAN,EAAAprE,YAMA,IAAA+uE,EAAArD,GAAA,SAMAN,EAAA2D,qBAMA,IAAAx1C,EAAAmyC,EAAA,kBAMAN,EAAA7xC,YAMA,IAAAy2C,EAAA5E,EAAA59G,UAMAwiH,EAAAC,MAAA,WACA,OAAA1kH,KAAA0iH,SAAA1iH,KAAAogH,MAAA,EAAApgH,KAAAogH,KAOAqE,EAAAhC,SAAA,WACA,OAAAziH,KAAA0iH,UACA1iH,KAAAqgH,OAAA,GAAAsD,GAAA3jH,KAAAogH,MAAA,GACApgH,KAAAqgH,KAAAsD,GAAA3jH,KAAAogH,MAAA,IAUAqE,EAAA/4G,SAAA,SAAAs4G,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAjkH,KAAA2kH,SACA,UACA,GAAA3kH,KAAA4kH,aAAA,CACA,GAAA5kH,KAAA4hH,GAAA5zC,GAAA,CAGA,IAAA62C,EAAA5C,EAAA+B,GACAvD,EAAAzgH,KAAAygH,IAAAoE,GACAC,EAAArE,EAAAF,IAAAsE,GAAAvE,IAAAtgH,MACA,OAAAygH,EAAA/0G,SAAAs4G,GAAAc,EAAAJ,QAAAh5G,SAAAs4G,GAEA,UAAAhkH,KAAA0jH,MAAAh4G,SAAAs4G,GAQA,IAHA,IAAAE,EAAAjC,EAAA6B,EAAAE,EAAA,GAAAhkH,KAAA0iH,UACAqC,EAAA/kH,KACAqlC,EAAA,KACA,CACA,IAAA2/E,EAAAD,EAAAtE,IAAAyD,GAEAe,GADAF,EAAAzE,IAAA0E,EAAAzE,IAAA2D,IAAAQ,UAAA,GACAh5G,SAAAs4G,GAEA,IADAe,EAAAC,GACAL,SACA,OAAAM,EAAA5/E,EAEA,KAAA4/E,EAAA94G,OAAA,GACA84G,EAAA,IAAAA,EACA5/E,EAAA,GAAA4/E,EAAA5/E,IASAo/E,EAAAS,YAAA,WACA,OAAAllH,KAAAqgH,MAOAoE,EAAAU,oBAAA,WACA,OAAAnlH,KAAAqgH,OAAA,GAOAoE,EAAAW,WAAA,WACA,OAAAplH,KAAAogH,KAOAqE,EAAAY,mBAAA,WACA,OAAArlH,KAAAogH,MAAA,GAOAqE,EAAAa,cAAA,WACA,GAAAtlH,KAAA4kH,aACA,OAAA5kH,KAAA4hH,GAAA5zC,GAAA,GAAAhuE,KAAA0jH,MAAA4B,gBAEA,IADA,IAAA9nE,EAAA,GAAAx9C,KAAAqgH,KAAArgH,KAAAqgH,KAAArgH,KAAAogH,IACAmF,EAAA,GAAsBA,EAAA,GACtB,IAAA/nE,EAAA,GAAA+nE,GAD+BA,KAG/B,UAAAvlH,KAAAqgH,KAAAkF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAA3kH,KAAAqgH,MAAA,IAAArgH,KAAAogH,KAOAqE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAA5kH,KAAA0iH,UAAA1iH,KAAAqgH,KAAA,GAOAoE,EAAAgB,WAAA,WACA,OAAAzlH,KAAA0iH,UAAA1iH,KAAAqgH,MAAA,GAOAoE,EAAAiB,MAAA,WACA,aAAA1lH,KAAAogH,MAOAqE,EAAAkB,OAAA,WACA,aAAA3lH,KAAAogH,MAQAqE,EAAAmB,OAAA,SAAAn3F,GAGA,OAFAq0F,EAAAr0F,KACAA,EAAA21F,EAAA31F,KACAzuB,KAAA0iH,WAAAj0F,EAAAi0F,UAAA1iH,KAAAqgH,OAAA,OAAA5xF,EAAA4xF,OAAA,SAEArgH,KAAAqgH,OAAA5xF,EAAA4xF,MAAArgH,KAAAogH,MAAA3xF,EAAA2xF,MASAqE,EAAA7C,GAAA6C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAAp3F,GACA,OAAAzuB,KAAA4hH,GAAAnzF,IASAg2F,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAt3F,GACA,OAAAzuB,KAAAgmH,KAAAv3F,GAAA,GASAg2F,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAz3F,GACA,OAAAzuB,KAAAgmH,KAAAv3F,IAAA,GASAg2F,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA33F,GACA,OAAAzuB,KAAAgmH,KAAAv3F,GAAA,GASAg2F,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA73F,GACA,OAAAzuB,KAAAgmH,KAAAv3F,IAAA,GASAg2F,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAA/3F,GAGA,GAFAq0F,EAAAr0F,KACAA,EAAA21F,EAAA31F,IACAzuB,KAAA4hH,GAAAnzF,GACA,SACA,IAAAg4F,EAAAzmH,KAAA4kH,aACA8B,EAAAj4F,EAAAm2F,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEA1mH,KAAA0iH,SAGAj0F,EAAA4xF,OAAA,EAAArgH,KAAAqgH,OAAA,GAAA5xF,EAAA4xF,OAAArgH,KAAAqgH,MAAA5xF,EAAA2xF,MAAA,EAAApgH,KAAAogH,MAAA,OAFApgH,KAAAsgH,IAAA7xF,GAAAm2F,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAA3mH,KAAA0iH,UAAA1iH,KAAA4hH,GAAA5zC,GACAA,EACAhuE,KAAA0hH,MAAA1sG,IAAAgrG,IAQAyE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAAzvG,IAAA,SAAA4xG,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAA7mH,KAAAqgH,OAAA,GACAyG,EAAA,MAAA9mH,KAAAqgH,KACA0G,EAAA/mH,KAAAogH,MAAA,GACA4G,EAAA,MAAAhnH,KAAAogH,IAEA6G,EAAAL,EAAAvG,OAAA,GACA6G,EAAA,MAAAN,EAAAvG,KACA8G,EAAAP,EAAAxG,MAAA,GAGAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAxG,QAIA,GAGAiH,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA9G,GANAmH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGArnH,KAAA0iH,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACAznH,KAAAgV,IAAAyyG,EAAA/D,QASAe,EAAAnE,IAAAmE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAA3nH,KAAA2kH,SACA,OAAA7E,EAKA,GAJAgD,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAAxC,EAJAwC,EAAApC,IAAAvgH,KAAAogH,IACApgH,KAAAqgH,KACAsH,EAAAvH,IACAuH,EAAAtH,MACAsC,EAAAiF,WAAA5nH,KAAA0iH,UAGA,GAAAiF,EAAAhD,SACA,OAAA7E,EACA,GAAA9/G,KAAA4hH,GAAA5zC,GACA,OAAA25C,EAAAjC,QAAA13C,EAAA8xC,EACA,GAAA6H,EAAA/F,GAAA5zC,GACA,OAAAhuE,KAAA0lH,QAAA13C,EAAA8xC,EAEA,GAAA9/G,KAAA4kH,aACA,OAAA+C,EAAA/C,aACA5kH,KAAA0jH,MAAAnD,IAAAoH,EAAAjE,OAEA1jH,KAAA0jH,MAAAnD,IAAAoH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAA5kH,KAAAugH,IAAAoH,EAAAjE,aAGA,GAAA1jH,KAAAimH,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAArC,EAAAjiH,KAAAyiH,WAAAkF,EAAAlF,WAAAziH,KAAA0iH,UAKA,IAAAmE,EAAA7mH,KAAAqgH,OAAA,GACAyG,EAAA,MAAA9mH,KAAAqgH,KACA0G,EAAA/mH,KAAAogH,MAAA,GACA4G,EAAA,MAAAhnH,KAAAogH,IAEA6G,EAAAU,EAAAtH,OAAA,GACA6G,EAAA,MAAAS,EAAAtH,KACA8G,EAAAQ,EAAAvH,MAAA,GACAyH,EAAA,MAAAF,EAAAvH,IAEAgH,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA9G,GAZAmH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGArnH,KAAA0iH,WASA+B,EAAAlE,IAAAkE,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAAvoG,MAAA,oBAaA,IAWA4rG,EAAAjD,EAAAvG,EArBA,GAAAmE,EAIA,OAAA3iH,KAAA0iH,WACA,aAAA1iH,KAAAqgH,OACA,IAAA0H,EAAA3H,MAAA,IAAA2H,EAAA1H,KAUAF,GANAngH,KAAA0iH,SAAAC,EAAAsF,MAAAtF,EAAAuF,OACAloH,KAAAogH,IACApgH,KAAAqgH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAA5nH,KAAA0iH,UARA1iH,KAWA,GAAAA,KAAA2kH,SACA,OAAA3kH,KAAA0iH,SAAAY,EAAAxD,EAEA,GAAA9/G,KAAA0iH,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAApH,cACAoH,EAAA1B,GAAArmH,MACA,OAAAsjH,EACA,GAAAyE,EAAA1B,GAAArmH,KAAAwhH,KAAA,IACA,OAAA+C,EACA/F,EAAA8E,MAtCA,CAGA,GAAAtjH,KAAA4hH,GAAA5zC,GACA,OAAA+5C,EAAAnG,GAAA5B,IAAA+H,EAAAnG,GAAA4C,GACAx2C,EACA+5C,EAAAnG,GAAA5zC,GACAgyC,GAIAgI,EADAhoH,KAAAuhH,IAAA,GACAd,IAAAsH,GAAA1G,IAAA,IACAO,GAAA9B,GACAiI,EAAAnD,aAAA5E,EAAAwE,GAEAO,EAAA/kH,KAAAsgH,IAAAyH,EAAAxH,IAAAyH,IACAxJ,EAAAwJ,EAAAhzG,IAAA+vG,EAAAtE,IAAAsH,KAIS,GAAAA,EAAAnG,GAAA5zC,GACT,OAAAhuE,KAAA0iH,SAAAY,EAAAxD,EACA,GAAA9/G,KAAA4kH,aACA,OAAAmD,EAAAnD,aACA5kH,KAAA0jH,MAAAjD,IAAAsH,EAAArE,OACA1jH,KAAA0jH,MAAAjD,IAAAsH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAA5kH,KAAAygH,IAAAsH,EAAArE,aACAlF,EAAAsB,EAmBA,IADAiF,EAAA/kH,KACA+kH,EAAA3C,IAAA2F,IAAA,CAGAC,EAAAzgH,KAAAojE,IAAA,EAAApjE,KAAAunF,MAAAi2B,EAAAtC,WAAAsF,EAAAtF,aAWA,IAPA,IAAA0F,EAAA5gH,KAAA4qD,KAAA5qD,KAAA6gH,IAAAJ,GAAAzgH,KAAA8gH,KACAC,EAAAH,GAAA,KAAArE,EAAA,EAAAqE,EAAA,IAIAI,EAAAtG,EAAA+F,GACAQ,EAAAD,EAAAhI,IAAAwH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAAtG,EADA+F,GAAAM,EACAtoH,KAAA0iH,WACAnC,IAAAwH,GAKAQ,EAAA5D,WACA4D,EAAAvI,GAEAxB,IAAAxpG,IAAAuzG,GACAxD,IAAAzE,IAAAkI,GAEA,OAAAhK,GASAiG,EAAAhE,IAAAgE,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOAxC,GANAngH,KAAA0iH,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACA3oH,KAAAogH,IACApgH,KAAAqgH,KACA0H,EAAA3H,IACA2H,EAAA1H,MAEAsC,EAAAiF,WAAA5nH,KAAA0iH,UAGA1iH,KAAAsgH,IAAAtgH,KAAAygH,IAAAsH,GAAAxH,IAAAwH,KASAtD,EAAAn8G,IAAAm8G,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA/C,IAAA,WACA,OAAAvB,GAAAngH,KAAAogH,KAAApgH,KAAAqgH,KAAArgH,KAAA0iH,WAQA+B,EAAAzD,IAAA,SAAAvyF,GAGA,OAFAq0F,EAAAr0F,KACAA,EAAA21F,EAAA31F,IACA0xF,EAAAngH,KAAAogH,IAAA3xF,EAAA2xF,IAAApgH,KAAAqgH,KAAA5xF,EAAA4xF,KAAArgH,KAAA0iH,WAQA+B,EAAAvD,GAAA,SAAAzyF,GAGA,OAFAq0F,EAAAr0F,KACAA,EAAA21F,EAAA31F,IACA0xF,EAAAngH,KAAAogH,IAAA3xF,EAAA2xF,IAAApgH,KAAAqgH,KAAA5xF,EAAA4xF,KAAArgH,KAAA0iH,WAQA+B,EAAArD,IAAA,SAAA3yF,GAGA,OAFAq0F,EAAAr0F,KACAA,EAAA21F,EAAA31F,IACA0xF,EAAAngH,KAAAogH,IAAA3xF,EAAA2xF,IAAApgH,KAAAqgH,KAAA5xF,EAAA4xF,KAAArgH,KAAA0iH,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACA7oH,KACA6oH,EAAA,GACA1I,EAAAngH,KAAAogH,KAAAyI,EAAA7oH,KAAAqgH,MAAAwI,EAAA7oH,KAAAogH,MAAA,GAAAyI,EAAA7oH,KAAA0iH,UAEAvC,EAAA,EAAAngH,KAAAogH,KAAAyI,EAAA,GAAA7oH,KAAA0iH,WASA+B,EAAApD,IAAAoD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACA7oH,KACA6oH,EAAA,GACA1I,EAAAngH,KAAAogH,MAAAyI,EAAA7oH,KAAAqgH,MAAA,GAAAwI,EAAA7oH,KAAAqgH,MAAAwI,EAAA7oH,KAAA0iH,UAEAvC,EAAAngH,KAAAqgH,MAAAwI,EAAA,GAAA7oH,KAAAqgH,MAAA,OAAArgH,KAAA0iH,WASA+B,EAAAlD,IAAAkD,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAA7oH,KAEA,IAAAqgH,EAAArgH,KAAAqgH,KACA,OAAAwI,EAAA,GAEA1I,EADAngH,KAAAogH,MACAyI,EAAAxI,GAAA,GAAAwI,EAAAxI,IAAAwI,EAAA7oH,KAAA0iH,UAEAvC,EADS,KAAA0I,EACTxI,EAEAA,IAAAwI,EAAA,GAFA,EAAA7oH,KAAA0iH,WAYA+B,EAAAjD,KAAAiD,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAA7D,SAAA,WACA,OAAA5gH,KAAA0iH,SAEAvC,EAAAngH,KAAAogH,IAAApgH,KAAAqgH,MAAA,GADArgH,MAQAykH,EAAA9D,WAAA,WACA,OAAA3gH,KAAA0iH,SACA1iH,KACAmgH,EAAAngH,KAAAogH,IAAApgH,KAAAqgH,MAAA,IAQAoE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAAnmH,KAAAkpH,YAAAlpH,KAAAmpH,aAOA1E,EAAAyE,UAAA,WACA,IAAAhJ,EAAAlgH,KAAAqgH,KACAJ,EAAAjgH,KAAAogH,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAuE,EAAA0E,UAAA,WACA,IAAAjJ,EAAAlgH,KAAAqgH,KACAJ,EAAAjgH,KAAAogH,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAuJ,UAAA,SAAA7iF,EAAAm8E,EAAAyD,GACA,OAAAA,EAAAtG,EAAAwJ,YAAA9iF,EAAAm8E,GAAA7C,EAAAyJ,YAAA/iF,EAAAm8E,IASA7C,EAAAwJ,YAAA,SAAA9iF,EAAAm8E,GACA,WAAA7C,EACAt5E,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAm8E,IAUA7C,EAAAyJ,YAAA,SAAA/iF,EAAAm8E,GACA,WAAA7C,EACAt5E,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAm8E,mFCryCA,SAAkBx5G,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkBxJ,EAAAwJ,UAAAxJ,EAAAwJ,QAAO,oFCAzB,SAAYE,GAEVA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,WANF,CAAY1J,EAAA0J,SAAA1J,EAAA0J,OAAM,qbCalB,IAAAE,EAAA,oBAAAA,KAKA,OALaA,EAAQigH,EAAA,CADpBC,WACYlgH,GAAb,GAAa5J,EAAA4J,WAQb,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,sBAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,sCAEAA,IAAA,oCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,+BAEAA,IAAA,qCAEAA,IAAA,mCAhDF,CAAkB7J,EAAA6J,gBAAA7J,EAAA6J,cAAa,oVClB/B,IAAAqiF,EAAAzrF,EAAA,IACAspH,EAAAtpH,EAAA,IACAupH,EAAAvpH,EAAA,IACAsN,EAAAtN,EAAA,GA4BoCT,EAAAiqH,iBA5BYl8G,EAAAb,wBAEhD,IAAAg9G,EAAAzpH,EAAA,IAIAT,EAAA+yG,UAAA,SAA0BxmG,EAAcuY,EAAc/G,EACpDosG,GAIA,YALoD,IAAApsG,OAAA,QACpD,IAAAosG,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAzX,QAC1B0X,EAAOpX,UAAUxmG,EAAMuY,EAAM/G,GACtBosG,GAITnqH,EAAA60G,SAAA,SAAyBsV,GACvB,OAAOA,EAAOtV,YAIhB70G,EAAAoqH,eAAA,SAA+BD,GAC7B,IAAIrkG,EAAUqkG,EAAOrkG,QACrB,OAAOA,EAAQpU,kBAAoBoU,EAAQzY,YAAYZ,OACnDqZ,EAAQzY,YAAYyY,EAAQpU,qBAC5B,MAON1R,EAAAqqH,OAAA,SAAuBj/G,GACrB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBM,MAIhDvK,EAAAsqH,UAAA,SAA0Bl/G,GACxB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBO,SAIhDxK,EAAAuqH,QAAA,SAAwBn/G,GACtB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBQ,OAIhDzK,EAAAwqH,cAAA,WACE,OAAO,IAAIt+B,EAAApd,SAIb9uE,EAAAyqH,UAAA,SAA0Bz1G,EAAkB2Y,GAC1C3Y,EAAQ2Y,OAASA,GAInB3tB,EAAA0qH,YAAA,SAA4B11G,EAAkBiB,GAC5CjB,EAAQiB,SAAWA,GAIrBjW,EAAA2qH,gBAAA,SAAgC31G,EAAkB+5D,GAChD/5D,EAAQ+5D,aAAeA,GAIzB/uE,EAAA4qH,gBAAA,SAAgC51G,EAAkBg6D,GAChDh6D,EAAQg6D,aAAeA,GAIzBhvE,EAAA6qH,eAAA,SAA+B71G,EAAkBi6D,GAC/Cj6D,EAAQi6D,YAAcA,GAIxBjvE,EAAA8qH,aAAA,SAA6B91G,EAAkBgW,GAC7ChW,EAAQgW,UAAYA,GAItBhrB,EAAA+qH,cAAA,SAA8B/1G,EAAkBkB,GAC9ClB,EAAQkB,WAAaA,GAIvBlW,EAAAgrH,eAAA,SAA+Bh2G,EAAkBuH,EAAerb,GAC9D,IAAIib,EAAgBnH,EAAQmH,cACvBA,IAAenH,EAAQmH,cAAgBA,EAAgB,IAAIzU,KAChEyU,EAAc1J,IAAI8J,EAAOrb,IAI3BlB,EAAAirH,iBAAA,SAAiCj2G,EAAkBk6D,GACjDl6D,EAAQk6D,cAAgBA,GAIblvE,EAAAkrH,uBAAsB,EAEtBlrH,EAAAmrH,uBAAsB,EAEtBnrH,EAAAorH,oBAAmB,EAEnBprH,EAAAqrH,aAAY,EAEZrrH,EAAAsrH,gBAAe,GAG5BtrH,EAAAurH,cAAA,SAA8Bv2G,EAAkBo6D,GAC9Cp6D,EAAQm6D,UAAYC,GAItBpvE,EAAAwrH,sBAAA,SAAsCx2G,EAAkBy2G,EAAoBC,GAC1E12G,EAAQmB,kBAAoBs1G,EAC5Bz2G,EAAQoB,gBAAkBs1G,GAI5B1rH,EAAA2rH,cAAA,SAA8BxB,GAC5B,OAAOA,EAAO7pD,UAIhBtgE,EAAA4rH,eAAA,SAA+B9lG,EAAkB9Q,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIk3E,EAAAzc,SAAS3pD,EAAS9Q,GAAS67D,WAIxC7wE,EAAA6rH,gBAAA,SAAgC5rH,GAC9B,IAAI8vG,EAAa,IAAIga,EAAAna,WAErB,OADAG,EAAWD,UAAU7vG,GACd8vG,EAAWzvC,UAIpBtgE,EAAA8rH,SAAA,SAAyBhmG,GACvB,OAAOkkG,EAAAvY,WAAWE,MAAM7rF,IAI1B9lB,EAAA+rH,SAAA,SAAyBjmG,GACvB,OAAOkkG,EAAA9X,WAAWP,MAAM7rF,IAI1B9lB,EAAAgsH,UAAA,SAA0BlmG,mBACpBhZ,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,yBACR,IAAgB,IAAA2R,EAAAtG,EAAAyN,EAAQ9T,eAAe6L,UAAQwB,EAAAV,EAAApG,QAAA8G,EAAA7G,KAAA6G,EAAAV,EAAApG,OAAE,CAA5C,IAAI0zG,EAAG5sG,EAAAzd,MACVkL,EAAGE,KAAK,SACRF,EAAGE,KAAKi/G,EAAIv5G,cACZ5F,EAAGE,KAAK,0GAEVF,EAAGE,KAAK,2BACR,IAAgB,IAAAsS,EAAAjH,EAAAyN,EAAQ9T,eAAe6L,UAAQpF,EAAA6G,EAAA/G,QAAAE,EAAAD,KAAAC,EAAA6G,EAAA/G,OAAE,CAA5C,IACCiU,GADGy/F,EAAGxzG,EAAA7W,OACK4qB,KACf1f,EAAGE,KAAK,QACRF,EAAGE,KAAKwf,EAAOA,EAAKpZ,GAAGpH,WAAa,KACpCc,EAAGE,KAAK,yGAEVF,EAAGE,KAAK,4BACR,IAAgB,IAAAyM,EAAApB,EAAAyN,EAAQ9T,eAAe6L,UAAQhE,EAAAJ,EAAAlB,QAAAsB,EAAArB,KAAAqB,EAAAJ,EAAAlB,OAAtC0zG,EAAGpyG,EAAAjY,MACVkL,EAAGE,KAAK,QACRF,EAAGE,KAAKi/G,EAAIn/F,UAAU9gB,YACtBc,EAAGE,KAAK,wGAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,IAAAa,EAAArN,EAAA,GAAST,EAAAoD,eAAA0K,EAAA1K,eAGT0G,EAAArJ,EAAA,IAEAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,mFCrMAT,EAAAksH,SAAA,SAAyBC,EAAUjkG,GAEjC,OADAxd,OAAOwd,GAAS,GAAKA,EAAQ,IACtBi6F,OACLd,QACE8K,EACAjtD,QACEmhD,QACAxqG,QAAQqS,KAGZ68C,WAKJ/kE,EAAAosH,UAAA,SAA0BD,EAAUjkG,EAAYmkG,GAE9C,OADA3hH,OAAOwd,GAAS,GAAKA,EAAQ,IACtBmkG,EACH9K,OACE4K,EACAjtD,QACEmhD,QACAxqG,QAAQqS,KAGZm5F,QACE8K,EACApK,QACE7iD,QACEmhD,QACAxqG,QAAQqS,sFC9BpB,SAAkBokG,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBtsH,EAAAssH,WAAAtsH,EAAAssH,SAAQ,KAuI1BtsH,EAAA4M,YAAA,SAA4B5L,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAA28D,aAAA,SAA6B37D,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAi7D,eAAA,SAA+Bj6D,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA4+D,aAAA,SAA6B59D,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAo8D,kBAAA,SAAkCp7D,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqBmK,EAnLYnK,GAoL9B,GAAKmK,EAAO,QACnBohH,EAAmBphH,EAAaqhH,GAFzC,IAAkCrhH,GA/KlCnL,EAAAq8D,mBAAA,SAAmCr7D,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAu8D,iBAAA,SAAiCv7D,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoBmK,EAzKYnK,GA0K7B,GAAKmK,EAAO,QACnBohH,EAAmBphH,EAAashH,GAFzC,IAAiCthH,GArKjC,IAAMqhH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.FUNCTIONTYPE) {\n      let explicitThisType = (<FunctionTypeNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<FunctionTypeNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.NAMEDTYPE);\n    var typeNode = <NamedTypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var isSimpleType = !typeName.next;\n\n    // look up in contextual type arguments if a simple type\n    if (isSimpleType) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle built-in types\n      if (isSimpleType) {\n        switch (typeName.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(typeNode, context, contextualTypeArguments, reportMode);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n\n          // }\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                  DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                  propertyAccess.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      this.warning(\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\n        reportNode.range, instance.internalName\n      );\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}