{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","OperatorKind","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedImports","Array","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","set","internalName","currentFilespace","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","declaration","element","tryResolveImport","externalName","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","range","parent","path","text","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","alias","Error","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","queuedNamedExports","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","flag","decoratorKindToFlag","decoratorNameToKind","Duplicate_decorator","toString","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameters","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","isNullable","asNullable","typeNode","ENUM","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","_e","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_f","_g","inheritedMember","partialConstructor","constructorInstance","_h","_j","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","propagate","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","Node","createType","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","exportPaths","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","terminated","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray"],"mappings":"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wD,GAnKjC,IAAMywD,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryResolveImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryResolveImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        if (!name.length) continue; // explicitly disabled\r\n        let element = this.elementsLookup.get(name);\r\n        if (element) this.elementsLookup.set(alias, element);\r\n        else throw new Error(\"element not found: \" + name);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = identifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = identifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if from a library file\r\n    if (identifier.range.source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return node.isNullable\r\n        ? signature.type.asNullable()\r\n        : signature.type;\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n    if (\r\n      (element = this.elementsLookup.get(localName)) || // file-global\r\n      (element = this.elementsLookup.get(globalName))   // program-global\r\n    ) {\r\n      switch (element.kind) {\r\n        case ElementKind.ENUM: return Type.i32;\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          if (!instance) return null;\r\n          return node.isNullable\r\n            ? instance.type.asNullable()\r\n            : instance.type;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: {\r\n                if (memoryOffset & 1) ++memoryOffset;\r\n                break;\r\n              }\r\n              case 4: {\r\n                if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                break;\r\n              }\r\n              case 8: {\r\n                if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                break;\r\n              }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11,\r\n  /** This branch returns a properly wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 12,\r\n\r\n  /** This branch is terminated if any of these flags is set. */\r\n  TERMINATED = FlowFlags.RETURNS | FlowFlags.THROWS | FlowFlags.BREAKS | FlowFlags.CONTINUES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(propagate: bool = true): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate conditionaal flags to parent\r\n    if (propagate) {\r\n      if (this.is(FlowFlags.RETURNS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n      }\r\n      if (this.is(FlowFlags.THROWS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n      }\r\n      if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n      }\r\n      if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n      }\r\n      if (this.is(FlowFlags.ALLOCATES)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n      }\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // flags set in both arms\r\n    this.flags |= left.flags & right.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(\r\n      left.wrappedLocals,\r\n      right.wrappedLocals\r\n    );\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = fileLevelExports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    var count = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n        stmts[count++] = stmt;\r\n        if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n      }\r\n    }\r\n    stmts.length = count;\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = blockFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts, NativeType.None);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = blockFlow.leaveBranchOrScope();\r\n    this.currentFunction.flow = parentFlow;\r\n    parentFlow.inherit(blockFlow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it?\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = true;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = flow.leaveBranchOrScope();\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    currentFunction.flow = parentFlow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (parentFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel,\r\n        module.createBlock(null, repeatBlock, NativeType.None)\r\n      )\r\n    );\r\n\r\n    var expr = module.createBlock(breakLabel, breakBlock, NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\r\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\r\n\r\n    var ifFalseFlow: Flow | null;\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\r\n      currentFunction.flow = parentFlow;\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.TERMINATED)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope(false);\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.TERMINATED)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.program.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else if (i64_is_u32(intValue)) {\r\n          this.currentType = Type.u32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = classPrototype.resolve(\r\n        classReference.typeArguments,\r\n        currentFunction.flow.contextualTypeArguments\r\n      );\r\n    } else {\r\n      classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n        typeArguments,\r\n        currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    program.info(\r\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\r\n      reportNode.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}