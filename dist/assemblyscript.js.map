{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","__export","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","INSTANCE","EXTERNAL","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDOp","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterTypeNode","REST","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Type_expected","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","ARROW","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","shift","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","numArguments","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","simpleName","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_THREADS","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","i64_shl","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","isFloat","isSigned","isReference","isString","isDefined","SWALLOW","isConstant","expr_1","ctz","popcnt","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","evaluateConstantOffset","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","RMWOp","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","hasError","atomic_notify","sizeof","alignof","alignLog2","Type_0_has_no_property_1","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","call_indirect","operandExprs","signatureParts","nativeParamTypes","operandType","instantiate","User_defined_0","iterateRoots","expr_2","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_u_add","i32_atomic_rmw16_u_add","i32_atomic_rmw_add","i64_atomic_rmw8_u_add","i64_atomic_rmw16_u_add","i64_atomic_rmw32_u_add","i64_atomic_rmw_add","i32_atomic_rmw8_u_sub","i32_atomic_rmw16_u_sub","i32_atomic_rmw_sub","i64_atomic_rmw8_u_sub","i64_atomic_rmw16_u_sub","i64_atomic_rmw32_u_sub","i64_atomic_rmw_sub","i32_atomic_rmw8_u_and","i32_atomic_rmw16_u_and","i32_atomic_rmw_and","i64_atomic_rmw8_u_and","i64_atomic_rmw16_u_and","i64_atomic_rmw32_u_and","i64_atomic_rmw_and","i32_atomic_rmw8_u_or","i32_atomic_rmw16_u_or","i32_atomic_rmw_or","i64_atomic_rmw8_u_or","i64_atomic_rmw16_u_or","i64_atomic_rmw32_u_or","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_u_xor","i64_atomic_rmw16_u_xor","i64_atomic_rmw32_u_xor","i64_atomic_rmw_xor","i32_atomic_rmw8_u_xchg","i32_atomic_rmw16_u_xchg","i32_atomic_rmw_xchg","i64_atomic_rmw8_u_xchg","i64_atomic_rmw16_u_xchg","i64_atomic_rmw32_u_xchg","i64_atomic_rmw_xchg","i32_atomic_rmw8_u_cmpxchg","i32_atomic_rmw16_u_cmpxchg","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_u_cmpxchg","i64_atomic_rmw16_u_cmpxchg","i64_atomic_rmw32_u_cmpxchg","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","deferASMCall","Expression_must_be_a_compile_time_constant","messageArg","filenameArg","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBv5F,EAAWo5F,GACrC,GAAIp5F,EAAOo5F,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEIM,EAFA9V,EAAK,EACLC,EAAKuV,EAAI16F,OAGNklF,EAAK,EAAIC,GAAI,CAGlB,GAFA6V,EAAM9V,GAAMC,EAAKD,GAAM,EAEnBwV,EADJM,GAAOA,EAAM,IACG15F,GAAQA,GAAQo5F,EAAIM,EAAM,GACxC,OAAO,EAEL15F,EAAOo5F,EAAIM,GACb7V,EAAK6V,EAEL9V,EAAK8V,EAAM,EAGf,OAAO,ikBC5WTniG,EAAAoiG,UAAA,SAA6BpxB,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAIqxB,EAAS,IAAI17F,MAASqqE,EAAS7pE,QAC1BxG,EAAI,EAAGuT,EAAI88D,EAAS7pE,OAAQxG,EAAIuT,IAAKvT,EAAG0nB,UAAUg6E,EAAO1hG,GAAKqwE,EAASrwE,IAChF,OAAO0hG,EAET,OAAO,IAAI17F,OAGb3G,EAAAsiG,QAAA,SAA2BtxB,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAIqxB,EAAS,IAAInlB,QACjB,IAAc,IAAAqlB,EAAA5sF,EAAAq7D,GAAQwxB,EAAAD,EAAA1sF,QAAA2sF,EAAA1sF,KAAA0sF,EAAAD,EAAA1sF,OAAA,CAAjB,IAAI4sF,EAACD,EAAA5gG,MAAcygG,EAAOrvF,IAAIyvF,qGACnC,OAAOJ,EAET,OAAO,IAAInlB,KAGbl9E,EAAA6zD,QAAA,SAA6Bmd,EAAkC0xB,wBAAlC,IAAA1xB,MAAA,WAAkC,IAAA0xB,MAAA,MAC7D,IAAIL,EAAS,IAAIlzF,IACjB,GAAI6hE,EAAU,KACZ,IAAmB,IAAA2xB,EAAAhtF,EAAAq7D,GAAQ4xB,EAAAD,EAAA9sF,QAAA+sF,EAAA9sF,KAAA8sF,EAAAD,EAAA9sF,OAAA,CAAlB,IAAAmE,EAAAhE,EAAA4sF,EAAAhhG,MAAA,GAACsS,EAAA8F,EAAA,GAAGyoF,EAAAzoF,EAAA,GAAgBqoF,EAAO3xF,IAAIwD,EAAGuuF,qGAC3C,GAAIC,MAAW,IAAmB,IAAAG,EAAAltF,EAAA+sF,GAASI,EAAAD,EAAAhtF,QAAAitF,EAAAhtF,KAAAgtF,EAAAD,EAAAhtF,OAAA,CAAnB,IAAA6E,EAAA1E,EAAA8sF,EAAAlhG,MAAA,GAACsS,EAAAwG,EAAA,GAAG+nF,EAAA/nF,EAAA,GAAiB2nF,EAAO3xF,IAAIwD,EAAGuuF,2GACtD,GAAIC,MACT,IAAmB,IAAAK,EAAAptF,EAAA+sF,GAASM,EAAAD,EAAAltF,QAAAmtF,EAAAltF,KAAAktF,EAAAD,EAAAltF,OAAA,CAAnB,IAAA8E,EAAA3E,EAAAgtF,EAAAphG,MAAA,GAACsS,EAAAyG,EAAA,GAAG8nF,EAAA9nF,EAAA,GAAiB0nF,EAAO3xF,IAAIwD,EAAGuuF,qGAE9C,OAAOJ,kFCpBT,IAAMY,EAAS,GAMf,SAAgB9lD,EAAcl9B,GAK5B,IAJA,IAiBI04C,EAjBA7V,EAAM,EACNh5C,EAAMmW,EAAK9Y,OAGR27C,EAAM,EAAIh5C,GACK,IAApBmW,EAAK/V,WAAW44C,IAChB7iC,EAAK/V,WAAW44C,EAAM,IAAMmgD,GAE5BngD,GAAO,EAUT,KAPIA,EAAM,GAAKh5C,EAAMmW,EAAK9Y,UACxB8Y,EAAOA,EAAK7V,UAAU04C,EAAKh5C,GAC3BA,GAAOg5C,EACPA,EAAM,GAIDA,EAAM,EAAIh5C,GAAK,CAIpB,GAHA6uD,GAAQ,EAIN14C,EAAK/V,WAAW44C,IAAQmgD,GACA,IAAxBhjF,EAAK/V,WAAW44C,EAAM,GACtB,CAGA,IADA6V,EAAQ7V,EAAM,GAAKh5C,IAEjBg5C,EAAM,EAAIh5C,GACVmW,EAAK/V,WAAW44C,EAAM,IAAMmgD,EAC5B,CACAhjF,EAAO04C,EACH14C,EAAK7V,UAAU,EAAG04C,GAClB7iC,EAAK7V,UAAU,EAAG04C,GAAO7iC,EAAK7V,UAAU04C,EAAM,GAClDh5C,GAAO,EACP,SAKF,IADA6uD,EAAQ7V,EAAM,GAAKh5C,IACkB,IAAxBmW,EAAK/V,WAAW44C,EAAM,IACjCA,EAAM,EAAIh5C,GACc,IAAxBmW,EAAK/V,WAAW44C,EAAM,IACtB7iC,EAAK/V,WAAW44C,EAAM,IAAMmgD,EAC5B,CAGA,IADA,IAAIC,EAAOpgD,IACFogD,GAAQ,GACf,GAAIjjF,EAAK/V,WAAWg5F,IAASD,EAAW,CAClCngD,EAAMogD,GAAQ,GACS,IAAzBjjF,EAAK/V,WAAWg5F,EAAO,IACE,IAAzBjjF,EAAK/V,WAAWg5F,EAAO,KAEvBjjF,EAAO04C,EACH14C,EAAK7V,UAAU,EAAG84F,GAClBjjF,EAAK7V,UAAU,EAAG84F,GAAQjjF,EAAK7V,UAAU04C,EAAM,GACnDh5C,GAAOg5C,EAAM,EAAIogD,EACjBpgD,EAAMogD,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKpgD,EAAM,IACT,GAAPA,GACgB,IAAlB7iC,EAAK/V,WAAW,IACE,IAAlB+V,EAAK/V,WAAW,IAChB,CAEAJ,GADAmW,EAAOA,EAAK7V,UAAU04C,EAAM,IACjB37C,OACX,WAKR27C,IAEF,OAAOh5C,EAAM,EAAImW,EAAO,IAc1B,SAAgBkjF,EAAQ35F,GAEtB,IADA,IAAIs5C,EAAMt5C,EAAerC,SAChB27C,EAAM,GACb,GAAIt5C,EAAeU,WAAW44C,IAAQmgD,EACpC,OAAOz5F,EAAeY,UAAU,EAAG04C,GAGvC,MAAO,IArGT9iD,EAAAm9C,gBAoFAn9C,EAAAq9C,YAAA,SAA4B7zC,EAAwB45F,GAClD,OAAI55F,EAAe4zC,WAAW,QACrB5zC,EAEF2zC,EACLgmD,EAAQC,GAAU18F,OAAO0pD,aAAa6yC,GAAaz5F,IAKvDxJ,EAAAmjG,yFCxGA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjBvjG,EAAAm+E,OAAA,SAAuBh0E,EAAci+B,GACnC,KAAOA,GAAS,GACdj+B,EAAGE,KAAKk5F,GACRn7D,GAAS,EAEPA,GAAS,IACXj+B,EAAGE,KAAKi5F,GACRl7D,GAAS,GAEPA,GACFj+B,EAAGE,KAAKg5F,kCCQZ,SAAgBG,EAAQtnE,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgB+3C,EAAStyE,EAAYs6B,EAAoBC,GACvDD,EAAOC,GAAcv6B,EACrBs6B,EAAOC,EAAS,GAAKv6B,IAAU,EAC/Bs6B,EAAOC,EAAS,GAAKv6B,IAAU,GAC/Bs6B,EAAOC,EAAS,GAAKv6B,IAAU,GAIjC,SAAgB6hG,EAAQvnE,EAAoBC,GAC1C,IAAIkwD,EAAKmX,EAAQtnE,EAAQC,GACrBmwD,EAAKkX,EAAQtnE,EAAQC,EAAS,GAClC,OAAO5oB,QAAQ84E,EAAIC,oDAzCrBtsF,EAAA0jG,OAAA,SAAuBxnE,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBn8B,EAAA60E,QAAA,SAAwBjzE,EAAYs6B,EAAoBC,GACtDD,EAAOC,GAAUv6B,GAInB5B,EAAA2jG,QAAA,SAAwBznE,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/Bn8B,EAAAo0E,SAAA,SAAyBxyE,EAAYs6B,EAAoBC,GACvDD,EAAOC,GAAcv6B,EACrBs6B,EAAOC,EAAS,GAAKv6B,IAAU,GAIjC5B,EAAAwjG,UAQAxjG,EAAAk0E,WAQAl0E,EAAAyjG,UAOAzjG,EAAA80E,SAAA,SAAyBlzE,EAAYs6B,EAAoBC,GACvD+3C,EAAS7sC,QAAQzlC,GAAQs6B,EAAQC,GACjC+3C,EAAS5sC,SAAS1lC,GAAQs6B,EAAQC,EAAS,IAI7Cn8B,EAAA4jG,QAAA,SAAwB1nE,EAAoBC,GAC1C,OAAO2vD,WAAW0X,EAAQtnE,EAAQC,KAIpCn8B,EAAA+0E,SAAA,SAAyBnzE,EAAYs6B,EAAoBC,GACvD+3C,EAAS2X,WAAWjqF,GAAQs6B,EAAQC,IAItCn8B,EAAA6jG,QAAA,SAAwB3nE,EAAoBC,GAC1C,OAAO6vD,WAAWyX,EAAQvnE,EAAQC,KAIpCn8B,EAAAg1E,SAAA,SAAyBpzE,EAAYs6B,EAAoBC,GACvD,IAAI2nE,EAAW/X,WAAWnqF,GAC1BsyE,EAAS7sC,QAAQy8D,GAAW5nE,EAAQC,GACpC+3C,EAAS5sC,SAASw8D,GAAW5nE,EAAQC,EAAS,iJCnEhD,IAAAzS,EAAAjpB,EAAA,IAOAsjG,EAAAtjG,EAAA,IAIAujG,EAAAvjG,EAAA,IAKA4K,EAAA5K,EAAA,GAyCoCT,EAAAikG,iBAtClC54F,EAAAd,wBAOF,IAAA25F,EAAAzjG,EAAA,IASAT,EAAAi/E,UAAA,SAA0Bp1E,EAAcoW,EAAcxG,EACpD0qF,GAIA,YALoD,IAAA1qF,OAAA,QACpD,IAAA0qF,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAvlB,QAC1BwlB,EAAOllB,UAAUp1E,EAAMoW,EAAMxG,GACtB0qF,GAITnkG,EAAAygF,SAAA,SAAyB0jB,GACvB,OAAOA,EAAO1jB,YAIhBzgF,EAAAokG,eAAA,SAA+BD,GAC7B,IAAIhjF,EAAUgjF,EAAOhjF,QACrB,OAAOA,EAAQnS,kBAAoBmS,EAAQzW,YAAYvD,OACnDga,EAAQzW,YAAYyW,EAAQnS,qBAC5B,MAONhP,EAAAqkG,OAAA,SAAuB37F,GACrB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBM,MAIhD7H,EAAAskG,UAAA,SAA0B57F,GACxB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBO,SAIhD9H,EAAAukG,QAAA,SAAwB77F,GACtB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBQ,OAIhD/H,EAAAwkG,cAAA,WACE,OAAO,IAAI96E,EAAA0vC,SAIbp5D,EAAAykG,UAAA,SAA0B/xF,EAAkByV,GAC1CzV,EAAQyV,OAASA,GAInBnoB,EAAA0kG,YAAA,SAA4BhyF,EAAkBe,GAC5Cf,EAAQe,SAAWA,GAIrBzT,EAAA2kG,gBAAA,SAAgCjyF,EAAkB4mD,GAChD5mD,EAAQ4mD,aAAeA,GAIzBt5D,EAAA4kG,gBAAA,SAAgClyF,EAAkB6mD,GAChD7mD,EAAQ6mD,aAAeA,GAIzBv5D,EAAA6kG,eAAA,SAA+BnyF,EAAkB8mD,GAC/C9mD,EAAQ8mD,YAAcA,GAIxBx5D,EAAA8kG,aAAA,SAA6BpyF,EAAkBoT,GAC7CpT,EAAQoT,UAAYA,GAItB9lB,EAAA+kG,cAAA,SAA8BryF,EAAkBgB,GAC9ChB,EAAQgB,WAAaA,GAIvB1T,EAAAglG,eAAA,SAA+BtyF,EAAkBxR,EAAc2X,GAC7D,IAAIJ,EAAgB/F,EAAQ+F,cACvBA,IAAe/F,EAAQ+F,cAAgBA,EAAgB,IAAItJ,KAChEsJ,EAAc/H,IAAIxP,EAAM2X,IAIb7Y,EAAAilG,uBAAsB,EAEtBjlG,EAAAklG,uBAAsB,EAEtBllG,EAAAmlG,oBAAmB,EAEnBnlG,EAAAolG,aAAY,EAEZplG,EAAAqlG,gBAAe,GAG5BrlG,EAAAslG,cAAA,SAA8B5yF,EAAkBgnD,GAC9ChnD,EAAQ+mD,UAAYC,GAItB15D,EAAAulG,sBAAA,SAAsC7yF,EAAkB8yF,EAAoBC,GAC1E/yF,EAAQiB,kBAAoB6xF,EAC5B9yF,EAAQkB,gBAAkB6xF,GAI5BzlG,EAAA0lG,cAAA,SAA8BvB,GAC5B,OAAOA,EAAO3xC,UAIhBxyD,EAAA2lG,eAAA,SAA+BxkF,EAAkBzO,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIgX,EAAAuwC,SAAS94C,EAASzO,GAASsoD,WAIxCh7D,EAAA4lG,gBAAA,SAAgC3lG,GAC9B,IAAI45E,EAAa,IAAIkqB,EAAArqB,WAErB,OADAG,EAAWD,UAAU35E,GACd45E,EAAWrnB,UAIpBxyD,EAAA6lG,SAAA,SAAyB1kF,GACvB,OAAO6iF,EAAAhmB,WAAWE,MAAM/8D,IAI1BnhB,EAAA8lG,SAAA,SAAyB3kF,GACvB,OAAO6iF,EAAA1lB,WAAWJ,MAAM/8D,IAI1B,IAAA/V,EAAA3K,EAAA,GAAST,EAAAoD,eAAAgI,EAAAhI,eAGT8H,EAAAzK,EAAA,IAEAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,KACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA,IACAyK,EAAAzK,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 19,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 20,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 21,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 22,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 26,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 27,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 28,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 29\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n}\r\n\r\n/** Common standard library symbols. */\r\nexport namespace LibrarySymbols {\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  // runtime\r\n  export const memory = \"memory\";\r\n  export const allocate = \"allocate\";\r\n  export const abort = \"abort\";\r\n  export const main = \"main\";\r\n  // other\r\n  export const length = \"length\";\r\n  export const byteLength = \"byteLength\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  LibrarySymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  // runtime references\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  // gc integration\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range,\r\n            queuedImport.foreignPath,\r\n            foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let elementsByName = this.elementsByName;\r\n          let element = elementsByName.get(name);\r\n          if (element) {\r\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n            elementsByName.set(alias, element);\r\n          }\r\n          else throw new Error(\"no such global element: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register global library elements\r\n    {\r\n      let element: Element | null;\r\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayPrototype = <ClassPrototype>element;\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\r\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\r\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\r\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\r\n    // code cannot call without explicitly enabling it with a flag.\r\n    if (\r\n      this.elementsByName.has(\"__gc_allocate\") &&\r\n      this.elementsByName.has(\"__gc_link\") &&\r\n      this.elementsByName.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): void {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name);\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (decorator.range.source.isLibrary) {\r\n              flags |= flag;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.NONE;\r\n    if (!declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (parent.kind != ElementKind.CLASS_PROTOTYPE && !declaration.is(CommonFlags.INSTANCE)) {\r\n      validDecorators |= DecoratorFlags.GLOBAL;\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (declaration.is(CommonFlags.AMBIENT)) {\r\n        validDecorators |= DecoratorFlags.EXTERNAL;\r\n      } else if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Namespace(name, parent, declaration);\r\n    if (!parent.add(name, element)) return;\r\n    element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], element);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], element);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], element);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>members[i], element);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], element);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple na,e */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do {\r\n      if (current === basePtototype) return true;\r\n    } while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(this.program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDOp {\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    // FIXME: does this work or do we need to malloc?\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetGlobal(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenSetGlobal(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name, this.typeParameters, this.signature, this.body, this.decorators, this.flags, this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.name + \" | null\"\r\n          : classReference.name;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.V128: return \"v\";\r\n      case TypeKind.VOID: return \"_\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterTypeNode = parameterNodes[i];\r\n        switch (parameterTypeNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterType = this.resolveType(\r\n          assert(parameterTypeNode.type),\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterTypeNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      return this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook,\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  LibrarySymbols,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var explicitStartFunction = program.explicitStartFunction;\r\n    if (startFunctionBody.length || explicitStartFunction) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStartFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.makeModuleExports(file);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private makeModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // general\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = startFunction.flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.createBlock(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.createCall(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          initializerNode,\r\n          Type.void,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(\r\n          initializerNode,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          global.identifierNode.range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(\r\n            valueNode,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.currentBody.push(\r\n            module.createSetGlobal(val.internalName, initExpr)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\r\n          }\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    var stmts: BinaryenExportRef[];\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.is(CommonFlags.ARROW));\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let stmt = this.compileExpression(\r\n        (<ExpressionStatement>bodyNode).expression,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      flow.set(FlowFlags.RETURNS);\r\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      stmts = [ stmt ];\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      this.currentFlow = instance.flow;\r\n      let stmts = this.compileFunctionBody(instance);\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmts.length\r\n          ? stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\r\n          : module.createNop()\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    return true;\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.createUnreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n    var actualFunction = outerFlow.actualFunction;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.createUnreachable();\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n\r\n    return module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(\r\n            this.compileAssignmentWithValue(declaration.name, initExpr)\r\n          );\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          this.currentFlow.actualFunction,\r\n          this.currentFlow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.createUnreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var target = this.resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.createUnreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n          this.makeCallDirect(getterInstance) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.createTeeLocal(tempLocalIndex, thisExpr),\r\n            valueWithCorrectType\r\n          ]),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n          ])\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeAllocation(<Class>classInstance)\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    }\r\n\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    {\r\n      let stmts = this.compileFunctionBody(instance);\r\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        CompilerSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return CompilerSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = CompilerSymbols.setargc;\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var flow = this.currentFlow;\r\n    var prototype = new FunctionPrototype(\r\n      simpleName,\r\n      flow.actualFunction,\r\n      declaration.clone(), // same function can be compiled multiple times if generic\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      makeMap<string,Type>(flow.contextualTypeArguments),\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeAllocation(<Class>classInstance)\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(\r\n      expression.isType,\r\n      this.currentFlow.actualFunction\r\n    );\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.createUnreachable();\r\n\r\n    // instanceof <basicType> must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.createI32(actualType == expectedType ? 1 : 0);\r\n    }\r\n    // <nullable> instanceof <nonNullable> must be != 0\r\n    if (\r\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\r\n      actualType.nonNullableType.isAssignableTo(expectedType)\r\n    ) {\r\n      return module.createBinary(\r\n        actualType.is(TypeFlags.LONG)\r\n          ? BinaryOp.NeI64\r\n          : BinaryOp.NeI32,\r\n        expr,\r\n        actualType.toNativeZero(module)\r\n      );\r\n    }\r\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expr = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(compiledValues[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    flow.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeAllocation(classReference)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // use the signature of the parent constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    var signature = baseClass\r\n      ? this.ensureConstructor(baseClass, reportNode).signature\r\n      : new Signature(null, classInstance.type, classInstance.type);\r\n\r\n    instance = new Function(\r\n      CommonSymbols.constructor,\r\n      new FunctionPrototype(CommonSymbols.constructor, classInstance,\r\n        this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n          CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n        )\r\n      ),\r\n      signature,\r\n      null\r\n    );\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeAllocation(classInstance)\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      stmts.length == 1\r\n        ? stmts[0]\r\n        : module.createBlock(null, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect(\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module)\r\n    );\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    ifElseFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(classInstance: Class): ExpressionRef {\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n\r\n    // __gc_allocate(size, markFn)\r\n    if (program.hasGC && classInstance.type.isManaged(program)) {\r\n      let allocateInstance = assert(program.gcAllocateInstance);\r\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset),\r\n          module.createI32(\r\n            ensureGCHook(this, classInstance)\r\n          )\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n\r\n    // memory.allocate(size)\r\n    } else {\r\n      let allocateInstance = program.memoryAllocateInstance;\r\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset)\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression( // reports\r\n              initializerNode,\r\n              fieldType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Special compiler symbols. */\r\nnamespace CompilerSymbols {\r\n  /** Module started global. Used if an explicit start function is present. */\r\n  export const started = \"~lib/started\";\r\n  /** Argument count global. Used to call trampolines for varargs functions. */\r\n  export const argc = \"~lib/argc\";\r\n  /** Argument count setter. Exported for use by host calls. */\r\n  export const setargc = \"~lib/setargc\";\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getGetGlobalName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\nimport {\r\n  bitsetIs,\r\n  bitsetSet\r\n} from \"./util\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 2,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 6,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 7,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 8,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 9,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 10,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 11,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 12,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 13,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.wrappedLocals = i64_new(0);\r\n    flow.wrappedLocalsExt = null;\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `currentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the value of the local at the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    if (index < 0) return true; // inlined constant\r\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!(ext && i < ext.length)) return false;\r\n    return bitsetIs(ext[i], index - (i + 1) * 64);\r\n  }\r\n\r\n  /** Sets if the value of the local at the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    if (index < 0) return; // inlined constant\r\n    if (index < 64) {\r\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\r\n      return;\r\n    }\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!ext) {\r\n      this.wrappedLocalsExt = ext = new Array(i + 1);\r\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\r\n    } else {\r\n      while (ext.length <= i) ext.push(i64_new(0));\r\n    }\r\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable,\r\n  IndexSignatureDeclaration\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0; // JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  AtomicRMWOp\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags, CommonSymbols\r\n} from \"./common\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_u_add = \"~lib/builtins/i32.atomic.rmw8_u.add\";\r\n  export const i32_atomic_rmw16_u_add = \"~lib/builtins/i32.atomic.rmw16_u.add\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_u_add = \"~lib/builtins/i64.atomic.rmw8_u.add\";\r\n  export const i64_atomic_rmw16_u_add = \"~lib/builtins/i64.atomic.rmw16_u.add\";\r\n  export const i64_atomic_rmw32_u_add = \"~lib/builtins/i64.atomic.rmw32_u.add\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_u_sub = \"~lib/builtins/i32.atomic.rmw8_u.sub\";\r\n  export const i32_atomic_rmw16_u_sub = \"~lib/builtins/i32.atomic.rmw16_u.sub\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_u_sub = \"~lib/builtins/i64.atomic.rmw8_u.sub\";\r\n  export const i64_atomic_rmw16_u_sub = \"~lib/builtins/i64.atomic.rmw16_u.sub\";\r\n  export const i64_atomic_rmw32_u_sub = \"~lib/builtins/i64.atomic.rmw32_u.sub\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_u_and = \"~lib/builtins/i32.atomic.rmw8_u.and\";\r\n  export const i32_atomic_rmw16_u_and = \"~lib/builtins/i32.atomic.rmw16_u.and\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_u_and = \"~lib/builtins/i64.atomic.rmw8_u.and\";\r\n  export const i64_atomic_rmw16_u_and = \"~lib/builtins/i64.atomic.rmw16_u.and\";\r\n  export const i64_atomic_rmw32_u_and = \"~lib/builtins/i64.atomic.rmw32_u.and\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_u_or = \"~lib/builtins/i32.atomic.rmw8_u.or\";\r\n  export const i32_atomic_rmw16_u_or = \"~lib/builtins/i32.atomic.rmw16_u.or\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_u_or = \"~lib/builtins/i64.atomic.rmw8_u.or\";\r\n  export const i64_atomic_rmw16_u_or = \"~lib/builtins/i64.atomic.rmw16_u.or\";\r\n  export const i64_atomic_rmw32_u_or = \"~lib/builtins/i64.atomic.rmw32_u.or\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8_u.xor\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16_u.xor\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_u_xor = \"~lib/builtins/i64.atomic.rmw8_u.xor\";\r\n  export const i64_atomic_rmw16_u_xor = \"~lib/builtins/i64.atomic.rmw16_u.xor\";\r\n  export const i64_atomic_rmw32_u_xor = \"~lib/builtins/i64.atomic.rmw32_u.xor\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_u_xchg = \"~lib/builtins/i32.atomic.rmw8_u.xchg\";\r\n  export const i32_atomic_rmw16_u_xchg = \"~lib/builtins/i32.atomic.rmw16_u.xchg\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_u_xchg = \"~lib/builtins/i64.atomic.rmw8_u.xchg\";\r\n  export const i64_atomic_rmw16_u_xchg = \"~lib/builtins/i64.atomic.rmw16_u.xchg\";\r\n  export const i64_atomic_rmw32_u_xchg = \"~lib/builtins/i64.atomic.rmw32_u.xchg\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw8_u.cmpxchg\";\r\n  export const i32_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw16_u.cmpxchg\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw8_u.cmpxchg\";\r\n  export const i64_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw16_u.cmpxchg\";\r\n  export const i64_atomic_rmw32_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw32_u.cmpxchg\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n  export const i32_notify = \"~lib/builtins/i32.notify\";\r\n  export const i64_notify = \"~lib/builtins/i64.notify\";\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n  // std/memory.ts\r\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  // std/gc.ts\r\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.createI32(\r\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\r\n          ? 1\r\n          : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          ret = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          ret = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicLoad(\r\n        typeArguments[0].byteSize,\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case BuiltinSymbols.atomic_add:  // add<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_sub:  // sub<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_and:  // and<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_or:   // or<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_xor:  // xor<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_xchg: // xchg<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      let RMWOp: AtomicRMWOp | null = null;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.atomic_add: { RMWOp = AtomicRMWOp.Add; break; }\r\n        case BuiltinSymbols.atomic_sub: { RMWOp = AtomicRMWOp.Sub; break; }\r\n        case BuiltinSymbols.atomic_and: { RMWOp = AtomicRMWOp.And; break; }\r\n        case BuiltinSymbols.atomic_or: { RMWOp = AtomicRMWOp.Or; break; }\r\n        case BuiltinSymbols.atomic_xor: { RMWOp = AtomicRMWOp.Xor; break; }\r\n        case BuiltinSymbols.atomic_xchg: { RMWOp = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      if (RMWOp !== null) {\r\n        return module.createAtomicRMW(\r\n          RMWOp, typeArguments[0].byteSize, offset, arg0, arg1, type.toNativeType()\r\n        );\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, cOff?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 3 || operands.length > 4) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 3) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 4 ? evaluateConstantOffset(compiler, operands[3]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicCmpxchg(\r\n        typeArguments[0].byteSize, offset, arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected:T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        Type.i64,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type = typeArguments[0];\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n      }\r\n\r\n      return module.createAtomicWait(\r\n        arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: u32): u32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.i32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      return module.createAtomicWake(\r\n        arg0, arg1\r\n      );\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false, \"unexected byte size\"); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // other\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.unchecked: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    // TODO: v128\r\n\r\n    // gc\r\n\r\n    case BuiltinSymbols.iterateRoots: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u64, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for library elements)\r\n  var members = classInstance.members;\r\n  if (classInstance.isDeclaredInLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"I_\" : \"i_\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}