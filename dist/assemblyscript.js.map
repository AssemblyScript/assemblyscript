{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createType","typeArguments","isNullable","type","TypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","START","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","byteSize","_l","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","FILE","Module_cannot_have_multiple_start_functions","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicNotify","notifyCount","_BinaryenAtomicNotify","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicNotify","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","NEARBindingsBuilder","typeMapping","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","exportedClasses","exportedFunctions","classInjections","classRanges","build","generateArgsParser","generateWrapperFunction","visitInterface","fields","map","paramName","forEach","generateDecodeFunction","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","fieldsWithTypes","filter","indexOf","generateBasicSetterHandlers","nonBasicFields","generatePushHandler","isArrayType","setterType","setterValueType","matchingFields","fieldTypeName","encodeType","generateArrayHandlerMethods","setterTypeName","encodedTypeName","methodName","tryUsingImport","getFields","sourceExpr","injections","sourcesWithExport","getExports","console","log","importPath","generateHandler","cls","argType","fieldExpr","pushType","__spread","mainSource","copyImports","allImportsStr","concat","bracketIndex","classText","getImports","declarationsStr","IDLBuilder","indentLevel","indent","typeToString","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR"],"mappings":"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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicNotify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  createSIMDExtract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  createSIMDReplace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  createSIMDShuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createSIMDBitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  createSIMDShift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.createUnreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.createUnreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.createUnreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.createUnreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.createUnreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\nimport { Source, NodeKind, ImportStatement, DeclarationStatement, ExportStatement, Range } from \"./ast\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"u32\": \"Integer\",\n    \"i64\": \"String\",\n    \"u64\": \"String\",\n    \"String\": \"String\",\n    \"bool\": \"Boolean\",\n    \"Uint8Array\": \"String\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n  private exportedClasses: Class[] = [];\n  private exportedFunctions: Function[] = [];\n  classInjections = new Map<string, string>();\n  classRanges = new Map<string, Range>();\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(element: Class): void {\n    this.classRanges.set(element.name, element.declaration.range);\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedClasses.push(element);\n  }\n\n  visitFunction(element: Function): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n    this.exportedFunctions.push(element);\n  }\n\n  visitInterface(element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(element: Element): void {\n    // Do nothing\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { name: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.name} extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_${element.name}>;\n        handledRoot: boolean = false;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.name}: ${this.typeName(field.type)};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function ${element.name}(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_${element.name}();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_${element.name}>(handler);\n      handler.decoder.deserialize(json);`);\n    if (returnType != Type.void) {\n      this.sb.push(`let result = wrapped_${element.name}(`);\n    } else {\n      this.sb.push(`wrapped_${element.name}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType != Type.void) {\n      this.sb.push(`\n        let encoder = new JSONEncoder();\n      `);\n      this.generateFieldEncoder(returnType, \"null\", \"result\");\n      this.sb.push(`\n        let val = encoder.serialize();\n        return_value(val.byteLength, val.buffer.data);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    let fieldsWithTypes = (types: string[]): any[] =>\n      fields.filter(field => types.indexOf(this.typeName(field.type)) != -1);\n\n    this.generateBasicSetterHandlers(valuePrefix, \"Integer\", \"i64\", fieldsWithTypes([\"i32\", \"u32\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"String\", \"String\", fieldsWithTypes([\"String\", \"i64\", \"u64\", \"Uint8Array\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"Boolean\", \"bool\", fieldsWithTypes([\"bool\"]));\n\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.name}\") {\n        ${valuePrefix}${field.name} = <${this.typeName(field.type)}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    let nonBasicFields = fields.filter(field => field.type.classReference);\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.sb.push(`if (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => !this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generateBasicSetterHandlers(valuePrefix: string, setterType: string, setterValueType: string, matchingFields: any[]) {\n    if (matchingFields.length > 0) {\n      this.sb.push(`set${setterType}(name: string, value: ${setterValueType}): void {`);\n      matchingFields.forEach(field => {\n        let fieldTypeName = this.typeName(field.type);\n        if (setterType == \"String\" && fieldTypeName != \"String\") {\n          if (fieldTypeName == \"Uint8Array\") {\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = base64.decode(value);\n              return; \n            }`);\n          } else {\n            let className = field.type == \"u64\" ? \"U64\" : \"I64\";\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = ${className}.parseInt(value);\n              return;\n            }`);\n          }\n        } else {\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = <${fieldTypeName}>value;\n            return;\n          }`);\n        }\n      });\n      this.sb.push(`\n        super.set${setterType}(name, value);\n      }`);\n    }\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(this.typeName(field.type) in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.name}\") {\n          ${valuePrefix}${field.name} = __near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.state);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterTypeName = this.typeMapping[fieldTypeName];\n    if (setterTypeName) {\n      if (fieldTypeName == \"u64\" || fieldTypeName == \"i64\") {\n        let className = fieldTypeName == \"u64\" ? \"U64\" : \"I64\";\n        this.sb.push(`setString(name: string, value: string): void {\n          ${valuePrefix}.push(${className}.parseInt(value));\n        }`);\n      } else {\n        let valueType = fieldTypeName;\n        if (valueType == \"u32\" || valueType == \"i32\") {\n          valueType = \"i64\";\n        }\n        this.sb.push(`set${setterTypeName}(name: string, value: ${valueType}): void {\n          ${valuePrefix}.push(<${fieldTypeName}>value);\n        }`);\n      }\n      this.sb.push(`setNull(name: string): void {\n        ${valuePrefix}.push(<${fieldTypeName}>null);\n      }\n      pushArray(name: string): bool {\n        assert(name == null && !this.handledRoot);\n        this.handledRoot = true;\n        return true;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }\n      pushArray(name: string): bool {\n        assert(name == null);\n        if (!this.handledRoot) {\n          this.handledRoot = true;\n          return true;\n        }\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }`);\n    }\n  }\n\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    if (this.generatedEncodeFunctions.has(encodedTypeName) || encodedTypeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_encode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    let typeName = this.typeName(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments![0]);\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments![0], \"null\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.getFields(type.classReference).forEach(field => {\n        let fieldType = field.type;\n        let fieldName = field.name;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n    let className = this.typeName(type);\n\n    let injections = `\n        static decode(json: Uint8Array): ${className} {\n          let value = new ${className}();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): ${className} {\n          __near_decode_${typeName}(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_${typeName}(this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      `;\n    this.classInjections.set(type.classReference.name, injections);\n  }\n\n  private tryUsingImport(type: Type, methodName: string): bool {\n    let sourcesWithExport = this.program.sources.filter(source =>\n      this.getExports(source).filter(d => d.name.text == methodName).length > 0);\n\n    if (sourcesWithExport.length == 0) {\n      return false;\n    }\n\n    if (sourcesWithExport.length > 1) {\n      console.log(`WARN: more than one file exporting ${methodName}: ${sourcesWithExport.map(s => s.normalizedPath)}`);\n    }\n\n    let importPath = sourcesWithExport[0].normalizedPath.replace('.ts', '');\n    this.sb.push(`import { ${methodName} } from \"./${importPath}\";`);\n    return true;\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_JSONHandler_${typeName} extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_${typeName}>;\n      handledRoot: boolean = false;\n      value: ${this.typeName(type)};\n      \n      constructor(value_: ${this.typeName(type)}) {\n        super();\n        this.value = value_;\n      }\n    `);\n    if (this.isArrayType(type)) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>this.typeName(type))\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private typeName(type: Type): string {\n    if (!type.classReference) {\n      return type.toString();\n    }\n    let cls = type.classReference;\n    if (cls.typeArguments && cls.typeArguments.length > 0) {\n      return cls.prototype.name + \"<\" +\n        cls.typeArguments.map(argType => this.typeName(argType)).join(\", \") +\n        \">\"\n    }\n    return cls.prototype.name;\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    if (this.generatedDecodeFunctions.has(encodedTypeName) || encodedTypeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_decode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    this.generateHandler(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments![0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    let typeName = this.typeName(type);\n    this.sb.push(`export function __near_decode_${encodedTypeName}(\n        buffer: Uint8Array, state: DecoderState, value: ${typeName} = null):${typeName} {\n      if (value == null) {\n        value = new ${typeName}();\n      }\n      let handler = new __near_JSONHandler_${encodedTypeName}(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_${encodedTypeName}>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterType = this.typeMapping[fieldTypeName];\n    if (!setterType) {\n      // Object / array\n      let pushType = this.isArrayType(fieldType) ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldTypeName) != -1) {\n        if ([\"i64\", \"u64\"].indexOf(fieldTypeName) != -1) {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr}.toString());`);\n        } else {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n        }\n      } else if (fieldTypeName == \"Uint8Array\") {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.setString(${fieldExpr}, base64.encode(${sourceExpr}));\n          } else {\n            encoder.setNull(${fieldExpr});\n          };`);\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private isArrayType(type: Type): bool {\n    return !!(type.classReference && type.classReference.prototype.name == \"Array\" && type.classReference.typeArguments);\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  build(): string {\n    let mainSource = this.program.sources\n      .filter(s => s.isEntry)[0];\n    this.copyImports(mainSource);\n\n    this.walk();\n\n    this.exportedClasses.forEach(c => {\n      this.generateEncodeFunction(c.type);\n      this.generateDecodeFunction(c.type);\n    });\n\n    let allExported = (<Element[]>this.exportedClasses).concat(<Element[]>this.exportedFunctions).filter(e => e.is(CommonFlags.MODULE_EXPORT));\n    let allImportsStr = allExported.map(c => `${c.name} as wrapped_${c.name}`).join(\", \");\n\n    this.sb = [`\n      import { storage, near, base64 } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\";\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\";\n      import {${allImportsStr}} from \"./${mainSource.normalizedPath.replace(\".ts\", \"\")}\";\n      \n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    `].concat(this.sb);\n\n    for (let [key, value] of this.classRanges) {\n      let injections = this.classInjections.get(key);\n      if (injections) {\n        let str = value.toString();\n        let bracketIndex = str.lastIndexOf(\"}\");\n        let classText = str.substring(0, bracketIndex) + `\\n${injections}\\n}`;\n        this.sb.push(classText);\n      }\n    }\n\n    return this.sb.join(\"\\n\");\n  }\n\n  private copyImports(mainSource: Source): any {\n    this.getImports(mainSource).forEach(statement => {\n      if (statement.declarations) {\n        let declarationsStr = statement.declarations!\n          .map(declaration => `${declaration.foreignName.text} as ${declaration.name.text}`)\n          .join(\",\");\n        this.sb.push(`import {${declarationsStr}} from \"${statement.path.value}\";`);\n      }\n    });\n  }\n\n  private getImports(source: Source): ImportStatement[] {\n    return <ImportStatement[]>source.statements\n      .filter(statement => statement.kind == NodeKind.IMPORT);\n  }\n\n  private getExports(source: Source): DeclarationStatement[] {\n    let declarations = <DeclarationStatement[]>source.statements\n      .filter(statement =>\n        statement.kind == NodeKind.FUNCTIONDECLARATION ||\n        statement.kind == NodeKind.CLASSDECLARATION);\n    return declarations.filter(d => d.is(CommonFlags.EXPORT));\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n}\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64\n} from \"./module\";\n\nimport {\n  ElementKind,\n  OperatorKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      return module.createI32(\n        classReference.lookupInSelf(\"length\") && (\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\n        ) ? 1 : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(byteSize);\n        } else {\n          expr = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(byteSize, 0);\n        } else {\n          expr = module.createI32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(alignLog2);\n        } else {\n          expr = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(alignLog2, 0);\n        } else {\n          expr = module.createI32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          expr = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.createLoad(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = outType;\n      return module.createAtomicLoad(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.createAtomicRMW(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        inType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = inType;\n      return module.createAtomicCmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.i32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicNotify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.createSelect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.createUnreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.GrowMemory, null, [\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u8,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        toType,\n        WrapMode.NONE\n      );\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.createUnreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\n            expr = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.createUnreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.createUnreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.createUnreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      return module.createSIMDExtract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDReplace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = module.precomputeExpression(\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n        );\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createSIMDShuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDShift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createUnary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createSIMDBitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createUnary(op, arg0);\n    }\n\n    // === GC integration =========================================================================\n\n    case BuiltinSymbols.iterateRoots: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      compiler.currentType = Type.void;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if required. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            typeName\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            typeName\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder,\n  NEARBindingsBuilder,\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}