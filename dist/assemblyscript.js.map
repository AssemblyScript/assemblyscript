{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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M,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        );\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_bitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              typeNode.name.range, typeName.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          // if (!arrayType) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementExpression.range, (<Class>target).internalName\r\n              );\r\n              return null;\r\n            }\r\n            let arrayType = indexedGet.signature.returnType;\r\n          // }\r\n          if (!(target = arrayType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, arrayType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n        // if (!arrayType) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementAccess.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n        // }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        expression.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough && !alwaysFalse) { // (4)\r\n      stmts.push(module.br(continueLabel, condExpr));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile incrementor\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.LOCAL: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      this.warning(\r\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\r\n        reportNode.range, instance.internalName\r\n      );\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.unreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          Constraints.CONV_IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, constraints);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.unreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.unreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.unreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            initExpr,\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.local_get(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Mutable_value_cannot_be_inlined = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  An_export_assignment_cannot_have_modifiers = 1120,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Mutable value cannot be inlined.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1120: return \"An export assignment cannot have modifiers.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      return module.i32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            Constraints.CONV_IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_bitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      let block: RelooperBlockRef;\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        block = relooper.addBlock(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        let callExpr = module.call(visitFunc.internalName, [\r\n          module.local_get(0, nativeSizeType), // ref\r\n          module.local_get(1, NativeType.I32)  // cookie\r\n        ], NativeType.None);\r\n        block = relooper.addBlock(\r\n          instance.base\r\n            ? callExpr // branch will be added later\r\n            : module.block(null, [\r\n                callExpr,\r\n                module.return()\r\n              ])\r\n        );\r\n      }\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n\r\n    // otherwise generate one\r\n    } else {\r\n      // traverse references assigned to own fields\r\n      let code = new Array<ExpressionRef>();\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!instance.base) code.push(module.return());\r\n      let block = relooper.addBlock(\r\n        flatten(module, code, NativeType.None)\r\n      );\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n    }\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\" = typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: TypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<TypeNode>parameter];\r\n          else parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\r\n          else implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: CommonTypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Value is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Value is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}