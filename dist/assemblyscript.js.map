{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createType","typeArguments","isNullable","type","TypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","START","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","byteSize","_l","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","FILE","Module_cannot_have_multiple_start_functions","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDOp","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterTypeNode","REST","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Type_expected","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","ARROW","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","shift","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","numArguments","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","simpleName","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","NEARBindingsBuilder","typeMapping","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","exportedClasses","exportedFunctions","filesByImport","build","generateArgsParser","generateWrapperFunction","visitInterface","fields","map","paramName","forEach","generateDecodeFunction","wrappedTypeName","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","setterType","this_1","matchingFields","filter","nonBasicFields","generatePushHandler","isArrayType","encodeType","generateArrayHandlerMethods","methodName","tryUsingImport","getFields","sourceExpr","importedFile","hasExport","importedSource","getExports","generateHandler","cls","indexOf","argType","fieldExpr","pushType","__spread","mainSource","copyImports","allImportsStr","concat","getImports","declarationsStr","IDLBuilder","indentLevel","indent","typeToString","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_THREADS","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","i64_shl","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","isFloat","isSigned","isReference","isString","isDefined","SWALLOW","isConstant","expr_1","ctz","popcnt","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","evaluateConstantOffset","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","RMWOp","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","hasError","atomic_notify","sizeof","alignof","alignLog2","Type_0_has_no_property_1","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","call_indirect","operandExprs","signatureParts","nativeParamTypes","operandType","instantiate","User_defined_0","iterateRoots","expr_2","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_u_add","i32_atomic_rmw16_u_add","i32_atomic_rmw_add","i64_atomic_rmw8_u_add","i64_atomic_rmw16_u_add","i64_atomic_rmw32_u_add","i64_atomic_rmw_add","i32_atomic_rmw8_u_sub","i32_atomic_rmw16_u_sub","i32_atomic_rmw_sub","i64_atomic_rmw8_u_sub","i64_atomic_rmw16_u_sub","i64_atomic_rmw32_u_sub","i64_atomic_rmw_sub","i32_atomic_rmw8_u_and","i32_atomic_rmw16_u_and","i32_atomic_rmw_and","i64_atomic_rmw8_u_and","i64_atomic_rmw16_u_and","i64_atomic_rmw32_u_and","i64_atomic_rmw_and","i32_atomic_rmw8_u_or","i32_atomic_rmw16_u_or","i32_atomic_rmw_or","i64_atomic_rmw8_u_or","i64_atomic_rmw16_u_or","i64_atomic_rmw32_u_or","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_u_xor","i64_atomic_rmw16_u_xor","i64_atomic_rmw32_u_xor","i64_atomic_rmw_xor","i32_atomic_rmw8_u_xchg","i32_atomic_rmw16_u_xchg","i32_atomic_rmw_xchg","i64_atomic_rmw8_u_xchg","i64_atomic_rmw16_u_xchg","i64_atomic_rmw32_u_xchg","i64_atomic_rmw_xchg","i32_atomic_rmw8_u_cmpxchg","i32_atomic_rmw16_u_cmpxchg","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_u_cmpxchg","i64_atomic_rmw16_u_cmpxchg","i64_atomic_rmw32_u_cmpxchg","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","deferASMCall","Expression_must_be_a_compile_time_constant","messageArg","filenameArg","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR"],"mappings":"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AM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is the main function. */\n  MAIN = 1 << 28,\n\n  // Other\n\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name, this.typeParameters, this.signature, this.body, this.decorators, this.flags, this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (!declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (parent.kind != ElementKind.CLASS_PROTOTYPE && !declaration.is(CommonFlags.INSTANCE)) {\n      validDecorators |= DecoratorFlags.GLOBAL;\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (declaration.is(CommonFlags.AMBIENT)) {\n        validDecorators |= DecoratorFlags.EXTERNAL;\n      } else if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>members[i], element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDOp {\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    // FIXME: does this work or do we need to malloc?\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nvar cachedStrings = new Map<string | null,usize>();\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  cachedStrings.set(str, ptr);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.name + \" | null\"\n          : classReference.name;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.V128: return \"v\";\n      case TypeKind.VOID: return \"_\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterTypeNode = parameterNodes[i];\n        switch (parameterTypeNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterType = this.resolveType(\n          assert(parameterTypeNode.type),\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterTypeNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  FieldDeclaration\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\n          }\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.is(CommonFlags.ARROW));\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var flow = this.currentFlow;\n    var prototype = new FunctionPrototype(\n      simpleName,\n      flow.actualFunction,\n      declaration.clone(), // same function can be compiled multiple times if generic\n      DecoratorFlags.NONE\n    );\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      makeMap<string,Type>(flow.contextualTypeArguments),\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // use the signature of the parent constructor if a derived class\n    var baseClass = classInstance.base;\n    var signature = baseClass\n      ? this.ensureConstructor(baseClass, reportNode).signature\n      : new Signature(null, classInstance.type, classInstance.type);\n\n    instance = new Function(\n      CommonSymbols.constructor,\n      new FunctionPrototype(CommonSymbols.constructor, classInstance,\n        this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n          CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n        )\n      ),\n      signature,\n      null\n    );\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\nimport { Source, NodeKind, ImportStatement, DeclarationStatement, ExportStatement } from \"./ast\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"String\": \"String\",\n    \"bool\": \"Boolean\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n  private exportedClasses: Class[] = [];\n  private exportedFunctions: Function[] = [];\n  private filesByImport = new Map<string, string>();\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(element: Class): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedClasses.push(element);\n  }\n\n  visitFunction(element: Function): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedFunctions.push(element);\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n  }\n\n  visitInterface(element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(element: Element): void {\n    // Do nothing\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { name: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.name} extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_${element.name}>;\n        handledRoot: boolean = false;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.name}: ${this.wrappedTypeName(field.type)};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function near_func_${element.name}(): void {\n      let json = new Uint8Array(input_read_len());\n      input_read_into(json.buffer.data);\n      let handler = new __near_ArgsParser_${element.name}();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_${element.name}>(handler);\n      handler.decoder.deserialize(json);`);\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`let result = wrapped_${element.name}(`);\n    } else {\n      this.sb.push(`wrapped_${element.name}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType.toString() != \"void\") {\n      this.sb.push(`\n        let encoder = new JSONEncoder();\n        encoder.pushObject(null);\n      `);\n      this.generateFieldEncoder(returnType, '\"result\"', \"result\");\n      this.sb.push(`\n        encoder.popObject();\n        return_value(near.bufferWithSize(encoder.serialize()).buffer.data);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    for (let fieldType in this.typeMapping) {\n      let setterType = this.typeMapping[fieldType];\n      let matchingFields = fields.filter(field => field.type.toString() == fieldType);\n      if (matchingFields.length > 0) {\n        this.sb.push(`set${setterType}(name: string, value: ${fieldType}): void {`);\n        matchingFields.forEach(field => {\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = value;\n            return;\n          }`);\n        });\n        this.sb.push(`\n          super.set${setterType}(name, value);\n        }`);\n      }\n    }\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.name}\") {\n        ${valuePrefix}${field.name} = <${this.wrappedTypeName(field.type)}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    let nonBasicFields = fields.filter(field => !(field.type.toString() in this.typeMapping));\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.sb.push(`if (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => !this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(field.type.toString() in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.name}\") {\n          ${valuePrefix}${field.name} = <${field.type}>__near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.state);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (setterType) {\n      this.sb.push(`set${setterType}(name: string, value: ${fieldType}): void {\n        ${valuePrefix}.push(value);\n      }\n      setNull(name: string): void {\n        ${valuePrefix}.push(<${fieldType}>null);\n      }\n      pushArray(name: string): bool {\n        assert(name == null && !this.handledRoot);\n        this.handledRoot = true;\n        return true;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}.push(<${fieldType}>__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }\n      pushArray(name: string): bool {\n        assert(name == null);\n        if (!this.handledRoot) {\n          this.handledRoot = true;\n          return true;\n        }\n        ${valuePrefix}.push(<${fieldType}>__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }`);\n    }\n  }\n\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedEncodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(typeName);\n\n    let methodName = `__near_encode_${typeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments![0]);\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${this.wrappedTypeName(type)},\n          encoder: JSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments![0], \"null\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${typeName}(\n          value: ${this.wrappedTypeName(type)},\n          encoder: JSONEncoder): void {`);\n      this.getFields(type.classReference).forEach((field) => {\n        let fieldType = field.type;\n        let fieldName = field.name;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n  }\n\n  private tryUsingImport(type: Type, methodName: string): bool {\n    let importedFile = this.filesByImport.get(type.classReference!.name);\n    if (importedFile) {\n      if (this.hasExport(importedFile, methodName)) {\n        this.sb.push(`import { ${methodName} } from \"${importedFile}\";`);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private hasExport(importedFile: string, name: string): bool {\n    let importedSource = this.program.sources.filter(\n      s => \"./\" + s.normalizedPath == importedFile + \".ts\")[0];\n\n    return this.getExports(importedSource).filter(d => d.name.text == name).length > 0;\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_JSONHandler_${typeName} extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_${typeName}>;\n      handledRoot: boolean = false;\n      value: ${this.wrappedTypeName(type)} = new ${this.wrappedTypeName(type)}();`);\n    if (this.isArrayType(type)) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private wrappedTypeName(type: Type): string {\n    if (!type.classReference) {\n      return type.toString();\n    }\n    let cls = type.classReference;\n    if (this.exportedClasses.indexOf(cls) != -1) {\n      return \"wrapped_\" + cls.name;\n    }\n    if (cls.typeArguments && cls.typeArguments.length > 0) {\n      return cls.prototype.name + \"<\" +\n        cls.typeArguments.map(argType => this.wrappedTypeName(argType)).join(\", \") +\n      \">\"\n    }\n    return cls.name;\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let typeName = this.encodeType(type);\n    if (this.generatedDecodeFunctions.has(typeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(typeName);\n\n    let methodName = `__near_decode_${typeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    this.generateHandler(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments![0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    this.sb.push(`export function __near_decode_${typeName}(\n        buffer: Uint8Array, state: DecoderState):${this.wrappedTypeName(type)} {\n      let handler = new __near_JSONHandler_${typeName}();\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_${typeName}>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return handler.value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let setterType = this.typeMapping[fieldType.toString()];\n    if (!setterType) {\n      // Object / array\n      let pushType = this.isArrayType(fieldType) ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(<${fieldType}>${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldType.toString()) != -1) {\n        this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>type.toString())\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private isArrayType(type: Type): bool {\n    return !!(type.classReference && type.classReference.prototype.name == \"Array\" && type.classReference.typeArguments);\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  build(): string {\n    let mainSource = this.program.sources\n      .filter(s => s.normalizedPath.indexOf(\"~lib\") != 0)[0];\n    this.copyImports(mainSource);\n\n    this.walk();\n\n    this.exportedClasses.forEach(c => {\n      this.generateEncodeFunction(c.type);\n      this.generateDecodeFunction(c.type);\n    });\n\n    let allExported = (<Element[]>this.exportedClasses).concat(<Element[]>this.exportedFunctions).filter(e => e.is(CommonFlags.MODULE_EXPORT));\n    let allImportsStr = allExported.map(c => `${c.name} as wrapped_${c.name}`).join(\", \");\n    this.sb = [`\n      import { near } from \"./near\";\n      import { JSONEncoder} from \"./json/encoder\"\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState  } from \"./json/decoder\"\n      import {${allImportsStr}} from \"./${mainSource.normalizedPath.replace(\".ts\", \"\")}\";\n\n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_ptr: u32): void;\n      @external(\"env\", \"input_read_len\")\n      declare function input_read_len(): u32;\n      @external(\"env\", \"input_read_into\")\n      declare function input_read_into(ptr: usize): void;\n    `].concat(this.sb);\n    this.exportedClasses.forEach(c => {\n      this.sb.push(`export class ${c.name} extends ${this.wrappedTypeName(c.type)} {\n        static decode(json: Uint8Array): ${c.name} {\n          return <${c.name}>__near_decode_${this.encodeType(c.type)}(json, null);\n        }\n\n        encode(): Uint8Array {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_${this.encodeType(c.type)}(<${c.name}>this, encoder);\n          encoder.popObject();\n          return encoder.serialize();\n        }\n      }`);\n    })\n    return this.sb.join(\"\\n\");\n  }\n\n  private copyImports(mainSource: Source): any {\n    this.getImports(mainSource).forEach(statement => {\n      if (statement.declarations) {\n        let declarationsStr = statement.declarations!\n          .map(declaration => `${declaration.foreignName.text} as ${declaration.name.text}`)\n          .join(\",\");\n        this.sb.push(`import {${declarationsStr}} from \"${statement.path.value}\";`);\n        statement.declarations.forEach(d => {\n          this.filesByImport.set(d.name.text, statement.path.value);\n        });\n      }\n    });\n  }\n\n  private getImports(source: Source): ImportStatement[] {\n    return <ImportStatement[]>source.statements\n      .filter(statement => statement.kind == NodeKind.IMPORT);\n  }\n\n  private getExports(source: Source): DeclarationStatement[] {\n    let declarations = <DeclarationStatement[]>source.statements\n      .filter(statement =>\n        statement.kind == NodeKind.FUNCTIONDECLARATION ||\n        statement.kind == NodeKind.CLASSDECLARATION);\n    return declarations.filter(d => d.is(CommonFlags.EXPORT));\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable,\n  IndexSignatureDeclaration\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  AtomicRMWOp\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags, CommonSymbols\n} from \"./common\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_u_add = \"~lib/builtins/i32.atomic.rmw8_u.add\";\n  export const i32_atomic_rmw16_u_add = \"~lib/builtins/i32.atomic.rmw16_u.add\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_u_add = \"~lib/builtins/i64.atomic.rmw8_u.add\";\n  export const i64_atomic_rmw16_u_add = \"~lib/builtins/i64.atomic.rmw16_u.add\";\n  export const i64_atomic_rmw32_u_add = \"~lib/builtins/i64.atomic.rmw32_u.add\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_u_sub = \"~lib/builtins/i32.atomic.rmw8_u.sub\";\n  export const i32_atomic_rmw16_u_sub = \"~lib/builtins/i32.atomic.rmw16_u.sub\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_u_sub = \"~lib/builtins/i64.atomic.rmw8_u.sub\";\n  export const i64_atomic_rmw16_u_sub = \"~lib/builtins/i64.atomic.rmw16_u.sub\";\n  export const i64_atomic_rmw32_u_sub = \"~lib/builtins/i64.atomic.rmw32_u.sub\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_u_and = \"~lib/builtins/i32.atomic.rmw8_u.and\";\n  export const i32_atomic_rmw16_u_and = \"~lib/builtins/i32.atomic.rmw16_u.and\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_u_and = \"~lib/builtins/i64.atomic.rmw8_u.and\";\n  export const i64_atomic_rmw16_u_and = \"~lib/builtins/i64.atomic.rmw16_u.and\";\n  export const i64_atomic_rmw32_u_and = \"~lib/builtins/i64.atomic.rmw32_u.and\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_u_or = \"~lib/builtins/i32.atomic.rmw8_u.or\";\n  export const i32_atomic_rmw16_u_or = \"~lib/builtins/i32.atomic.rmw16_u.or\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_u_or = \"~lib/builtins/i64.atomic.rmw8_u.or\";\n  export const i64_atomic_rmw16_u_or = \"~lib/builtins/i64.atomic.rmw16_u.or\";\n  export const i64_atomic_rmw32_u_or = \"~lib/builtins/i64.atomic.rmw32_u.or\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8_u.xor\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16_u.xor\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_u_xor = \"~lib/builtins/i64.atomic.rmw8_u.xor\";\n  export const i64_atomic_rmw16_u_xor = \"~lib/builtins/i64.atomic.rmw16_u.xor\";\n  export const i64_atomic_rmw32_u_xor = \"~lib/builtins/i64.atomic.rmw32_u.xor\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_u_xchg = \"~lib/builtins/i32.atomic.rmw8_u.xchg\";\n  export const i32_atomic_rmw16_u_xchg = \"~lib/builtins/i32.atomic.rmw16_u.xchg\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_u_xchg = \"~lib/builtins/i64.atomic.rmw8_u.xchg\";\n  export const i64_atomic_rmw16_u_xchg = \"~lib/builtins/i64.atomic.rmw16_u.xchg\";\n  export const i64_atomic_rmw32_u_xchg = \"~lib/builtins/i64.atomic.rmw32_u.xchg\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw8_u.cmpxchg\";\n  export const i32_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw16_u.cmpxchg\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw8_u.cmpxchg\";\n  export const i64_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw16_u.cmpxchg\";\n  export const i64_atomic_rmw32_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw32_u.cmpxchg\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          ret = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          ret = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createAtomicLoad(\n        typeArguments[0].byteSize,\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case BuiltinSymbols.atomic_add:  // add<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_sub:  // sub<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_and:  // and<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_or:   // or<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_xor:  // xor<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_xchg: // xchg<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      let RMWOp: AtomicRMWOp | null = null;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.atomic_add: { RMWOp = AtomicRMWOp.Add; break; }\n        case BuiltinSymbols.atomic_sub: { RMWOp = AtomicRMWOp.Sub; break; }\n        case BuiltinSymbols.atomic_and: { RMWOp = AtomicRMWOp.And; break; }\n        case BuiltinSymbols.atomic_or: { RMWOp = AtomicRMWOp.Or; break; }\n        case BuiltinSymbols.atomic_xor: { RMWOp = AtomicRMWOp.Xor; break; }\n        case BuiltinSymbols.atomic_xchg: { RMWOp = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = typeArguments[0];\n      if (RMWOp !== null) {\n        return module.createAtomicRMW(\n          RMWOp, typeArguments[0].byteSize, offset, arg0, arg1, type.toNativeType()\n        );\n      } else {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, cOff?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 3 || operands.length > 4) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 3) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n\n      let offset = operands.length == 4 ? evaluateConstantOffset(compiler, operands[3]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createAtomicCmpxchg(\n        typeArguments[0].byteSize, offset, arg0, arg1, arg2, type.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected:T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      let hasError = typeArguments == null;\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        hasError = true;\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        hasError = true;\n      }\n\n      if (!typeArguments || hasError) {\n        return module.createUnreachable();\n      }\n\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type = typeArguments[0];\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n      }\n\n      return module.createAtomicWait(\n        arg0, arg1, arg2, type.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: u32): u32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      let hasError = typeArguments == null;\n      if (operands.length != 2) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        hasError = true;\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        hasError = true;\n      }\n\n      if (!typeArguments || hasError) {\n        return module.createUnreachable();\n      }\n\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.i32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      return module.createAtomicWake(\n        arg0, arg1\n      );\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false, \"unexected byte size\"); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let usizeType = compiler.options.usizeType;\n      arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let usizeType = compiler.options.usizeType;\n      arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // other\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.unchecked: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFlow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classInstance = typeArguments[0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // user-defined diagnostic macros\n\n    case BuiltinSymbols.ERROR: {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case BuiltinSymbols.i8: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i16: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.isize: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u8: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u16: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.usize: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.bool: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.f32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.f64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    // TODO: v128\n\n    // gc\n\n    case BuiltinSymbols.iterateRoots: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i64, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"i_\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"i_\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"I_\" : \"i_\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder,\n  NEARBindingsBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}